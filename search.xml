<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS布局-让一个盒子水平垂直居中的几种方法</title>
    <url>/2014/12/01/141201CSS%E5%B8%83%E5%B1%80-%E8%AE%A9%E4%B8%80%E4%B8%AA%E7%9B%92%E5%AD%90%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;实现问题的方式永远不只一种，这里也是根据一个经常会用到的需求来做一个小结，下面列出了5种能够让一个盒子水平垂直居中的方法，也是在提醒自己在工作当中要随时记得发散思维，不要太固化，提高自己灵活解决问题的能力，问题很简单，就是实现如图效果：<br><img src="/2014/12/01/141201CSS布局-让一个盒子水平垂直居中的几种方法/%E7%9B%92%E5%AD%90%E5%B1%85%E4%B8%AD.png" alt="盒子居中.png"><br>下面上代码：<a id="more"></a></p>
<h2 id="方法一、最传统的方法"><a href="#方法一、最传统的方法" class="headerlink" title="方法一、最传统的方法"></a>方法一、最传统的方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;居中问题&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  .outer &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line">  .inner &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top: -50px;</span><br><span class="line">    margin-left: -50px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>大体实现思路就是先设置父盒子为相对定位，然后设置子盒子为绝对定位，设置其left和top都为50%，然后再设置<code>margin-top</code>和<code>margin-left</code>为它们各自高和宽的一半即可，这一个方法不足的地方是必须需要先知道子盒子的宽高，设置了居中还得靠js来获取就有点兴师动众了，看下面的方法</p>
<h2 id="方法二、巧妙的运用了margin-auto"><a href="#方法二、巧妙的运用了margin-auto" class="headerlink" title="方法二、巧妙的运用了margin:auto"></a>方法二、巧妙的运用了margin:auto</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;居中问题&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .outer &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inner &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        margin: auto;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>大体实现思路就是先设置父盒子为相对定位，然后设置子盒子为绝对定位，设置其<code>left、right、top、bottom</code>都为0，再设置<code>margin：auto</code>即可；</p>
<h2 id="方法三、利用C3属性transform"><a href="#方法三、利用C3属性transform" class="headerlink" title="方法三、利用C3属性transform"></a>方法三、利用C3属性transform</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;居中问题&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  .outer &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line">  .inner &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这一点实现思路跟方法一差不多，但是弥补了方法一的缺陷，不需要提前知道子盒子的宽高了，兼容性这块兼容主流的，当然ie6/7还是需要传统解决的</p>
<h2 id="方法四、利用flex布局"><a href="#方法四、利用flex布局" class="headerlink" title="方法四、利用flex布局"></a>方法四、利用flex布局</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;居中问题&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .outer &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        margin: 50px auto;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inner &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>大体实现思路就是只需要设置父盒子display为flex，然后再设置其<br><code>justify-content: center;</code>（主轴方向对齐，可以调整子元素在主轴方向上的对齐方式）<br><code>align-items: center;</code>（定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式）;<br>扩展性较强，移动端常用；</p>
<h2 id="方法五、flex布局结合margin-auto"><a href="#方法五、flex布局结合margin-auto" class="headerlink" title="方法五、flex布局结合margin:auto"></a>方法五、flex布局结合margin:auto</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;居中问题&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .outer &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inner &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>大体实现思路也是先设置父盒子<code>display：flex</code>，然后再设置子盒子<code>margin：auto</code>即可,扩展性较强，移动端常用；</p>
<h2 id="附加一个图片水平垂直居中"><a href="#附加一个图片水平垂直居中" class="headerlink" title="附加一个图片水平垂直居中"></a>附加一个图片水平垂直居中</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图片水平居中&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .outer &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px solid #000;</span><br><span class="line">        display: table-cell;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;demo.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p> 主要是指定父盒子为<code>display: table-cell;</code>然后设置<code>text-align: center;vertical-align: middle;</code>即可</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>当然可能还有一些方式可以实现，这里只是记录下，有需要的朋友可以参考！</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>使用原生JS实现动画-匀速动画</title>
    <url>/2015/02/02/150202%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB-%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;其实动画效果无非就是根据时间一直移动而已，只不过移动的快而已，所以肯定需要通过定时器来实现，<br>下面的实现主要有几个点：</p>
<ul>
<li>效果是实现一个对象<code>（obj）</code>移动到目标位置<code>（target)</code></li>
<li>用之前先清一下定时器，防止导致出现存在多个定时器，无法停下来，导致出现bug;</li>
<li>定时器间隔设为25ms是因为现在主流的大多是25ms效果比较好一点，具体你也可以根据需要改变;</li>
<li>step是指的步长，也就是每25ms走的距离，同样这个step也是可以调整的，step在这里做判断是因为目标位置有时候会小于对象现在所处的位置，也就是<code>target &lt; leader</code>,这时就需要step变为负值了。</li>
<li>清除定时器的时间点判断-当目标位置与现在的位置的差值小于step的时候，清除，需要使用Math.abs是因为step有可能是负值<br>下面是具体代码实现：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function animate(obj,target) &#123;  //匀速动画</span><br><span class="line">     clearInterval(obj.timer);   //用之前先清定时器</span><br><span class="line">     obj.timer = setInterval(function()&#123;</span><br><span class="line">                 var leader = obj.offsetLeft,</span><br><span class="line">                     step = 20;</span><br><span class="line">                 step = leader &lt; target ? step : -step;  //根据当前位置与目标位置的大小来确定步长的正负；</span><br><span class="line">         if (Math.abs(leader - target) &gt; Math.abs(step)) &#123;</span><br><span class="line">             obj.style.left = leader + step + &quot;px&quot;; //注意加上px</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             clearInterval(obj.timer);</span><br><span class="line">             //手动将快要到达终点的对象放到终点,保证最终停在目标位置</span><br><span class="line">             obj.style.left = target + &quot;px&quot;;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;, 25)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>下面是使用这个封装的animate实现的<a href="http://lsqy.github.io/constantSpeed/" target="_blank" rel="noopener">匀速动画效果</a>;</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用原生JS实现动画-缓动动画</title>
    <url>/2015/02/04/150204%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;缓动动画跟前面的匀速动画相比肯定会更加细腻，在现实中还是缓动应用的较多，<br>下面的同样列出实现主要有几个点：</p>
<ul>
<li>效果是实现一个对象<code>（obj）</code>移动到目标位置<code>（target)</code></li>
<li>用之前先清一下定时器，防止导致出现存在多个定时器，无法停下来，导致出现bug;</li>
<li>定时器间隔设为25ms是因为现在主流的大多是25ms效果比较好一点，具体你也可以根据需要改变;</li>
<li>step是指的步长，在这里的step是实现缓动效果的关键，step是通过目标点和当前位置的距离差来决定的，这样就会有随着距离减小会慢慢变小，也就是会有慢慢减速，先快后慢的效果</li>
<li>清除定时器的时间点判断-这次就不用向匀速动画中那样通过手动在快接近目标点的时候将其赋值为目标点，因为这里上面的step都是除以10，并且也对step在0位置做了判断，所以可以达到当前位置等于目标位置，也就是可以顺利清除定时器；<br>下面是具体代码实现：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function animate(obj, target) &#123; //缓动动画  事实证明还是缓动效果比较细腻</span><br><span class="line">    clearInterval(obj.timer); //防止重复调用，用前先清定时器</span><br><span class="line">    obj.timer = setInterval(function() &#123;</span><br><span class="line">        var leader = obj.offsetLeft; //读取的时候用offsetTop确保也能读取到不是行内的样式</span><br><span class="line">        var step = (target - leader) / 10;</span><br><span class="line">        step = step &gt; 0 ? Math.ceil(step) : Math.floor(step);</span><br><span class="line">        //通过下面这个方法能够在控制台中体会到数据的渐变</span><br><span class="line">        console.log(&quot;target:&quot; + target + &quot;---leader:&quot; + leader + &quot;---step:&quot; + step);</span><br><span class="line">        if (leader != target) &#123;</span><br><span class="line">            obj.style.left = leader + step + &quot;px&quot;; //赋值的时候就用top设置行间样式</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 25)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>下面是使用这个封装的animate实现的<a href="http://lsqy.github.io/slowAction/" target="_blank" rel="noopener">缓动动画效果</a>，<br>另外这个案例当中还穿插了一下无缝滚动的效果，能够实现最后一张平滑的切换到第一张，下面附上代码：</p>
<blockquote>
<p>下面的代码并不是特别规范，只是站在初学者的角度通俗的将几个重要的点展示出来</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&apos;box&apos;&gt;</span><br><span class="line">        &lt;div class=&quot;screen&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/1.jpg&quot;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/2.jpg&quot;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/3.jpg&quot;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/4.jpg&quot;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/5.jpg&quot;&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">            &lt;/ol&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;arr&quot;&gt;&lt;span id=&quot;left&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span id=&quot;right&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var box = document.getElementById(&quot;box&quot;),</span><br><span class="line">    screen = box.children[0],</span><br><span class="line">    ul = screen.children[0],</span><br><span class="line">    ullis = ul.children,</span><br><span class="line">    ol = screen.children[1],</span><br><span class="line">    imgWidth = screen.offsetWidth,</span><br><span class="line">    arr = document.getElementById(&quot;arr&quot;),</span><br><span class="line">    arrLeft = document.getElementById(&quot;left&quot;),</span><br><span class="line">    arrRight = document.getElementById(&quot;right&quot;),</span><br><span class="line">    pic = 0,</span><br><span class="line">    square = 0,</span><br><span class="line">    timer = null，</span><br><span class="line">    ollis = ol.children;</span><br><span class="line"></span><br><span class="line">&lt;!-- 根据图片的数量生成小按钮 --&gt;</span><br><span class="line">for (var i = 0; i &lt; ullis.length; i++) &#123;</span><br><span class="line">    var li = document.createElement(&quot;li&quot;);</span><br><span class="line">    ol.appendChild(li);</span><br><span class="line">    li.innerHTML = i + 1;</span><br><span class="line">&#125;</span><br><span class="line">ollis[0].className = &quot;current&quot;;</span><br><span class="line"></span><br><span class="line">var firstImg = ullis[0].cloneNode(true); //如果不加上.cloneNode(true),只是单纯的把li移动了，而不是重新复制一个</span><br><span class="line">ul.appendChild(firstImg); //这样能够很好地实现无缝衔接；</span><br><span class="line"></span><br><span class="line">// 根据按钮来让图片滚动</span><br><span class="line">for (var j = 0; j &lt; ollis.length; j++) &#123;</span><br><span class="line">    ollis[j].index = j;</span><br><span class="line">    ollis[j].onmouseover = function() &#123;</span><br><span class="line">        for (var k = 0; k &lt; ollis.length; k++) &#123;</span><br><span class="line">            ollis[k].className = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        this.className = &quot;current&quot;;</span><br><span class="line">        var target = -this.index * imgWidth;</span><br><span class="line">        animate(ul, target);</span><br><span class="line">        square = pic = this.index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 鼠标放到盒子上面清除定时器，并显示箭头</span><br><span class="line">box.onmouseover = function() &#123;</span><br><span class="line">        arr.style.display = &quot;block&quot;;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">// 鼠标离开盒子重新设置定时器，并隐藏箭头</span><br><span class="line">box.onmouseout = function() &#123;</span><br><span class="line">    arr.style.display = &quot;none&quot;;</span><br><span class="line">    timer = setInterval(playnextR, 2000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrRight.onclick = function() &#123;</span><br><span class="line">    playnextR();</span><br><span class="line">&#125;</span><br><span class="line">arrLeft.onclick = function() &#123;</span><br><span class="line">    playnextL();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//封装向右切换的动画函数</span><br><span class="line">function playnextR() &#123;</span><br><span class="line">    if (pic == ullis.length - 1) &#123; //注意这里是pic == ullis.length-1，先前写成了pic == ollis.length-1,导致出现bug</span><br><span class="line">        ul.style.left = 0;</span><br><span class="line">        pic = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    pic++;</span><br><span class="line">    var target = -imgWidth * pic;</span><br><span class="line">    animate(ul, target);</span><br><span class="line">    if (square &lt; ollis.length - 1) &#123;</span><br><span class="line">        square++;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        square = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for (var i = 0; i &lt; ollis.length; i++) &#123;</span><br><span class="line">        ollis[i].className = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    ollis[square].className = &quot;current&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//封装向左切换的动画函数</span><br><span class="line">function playnextL() &#123;</span><br><span class="line">    if (pic == 0) &#123;</span><br><span class="line">        ul.style.left = -imgWidth * (ullis.length - 1) + &quot;px&quot;; //后面的这个px一定要注意加上去；</span><br><span class="line">        pic = ullis.length - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    pic--;</span><br><span class="line">    var target = -imgWidth * pic;</span><br><span class="line">    animate(ul, target);</span><br><span class="line">    if (square &gt; 0) &#123;</span><br><span class="line">        square--;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        square = ollis.length - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (var i = 0; i &lt; ollis.length; i++) &#123;</span><br><span class="line">        ollis[i].className = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    ollis[square].className = &quot;current&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4.添加自动滚动</span><br><span class="line">//相当于每秒钟按下一次右箭头</span><br><span class="line">timer = setInterval(playnextR, 2000);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github托管自己的网页</title>
    <url>/2015/03/02/150302%E4%BD%BF%E7%94%A8github%E6%89%98%E7%AE%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="一、GIT基本命令操作"><a href="#一、GIT基本命令操作" class="headerlink" title="一、GIT基本命令操作"></a>一、GIT基本命令操作</h1><h2 id="1-初始化一个本地GIT仓储-（仓库）"><a href="#1-初始化一个本地GIT仓储-（仓库）" class="headerlink" title="1. 初始化一个本地GIT仓储 （仓库）"></a>1. 初始化一个本地GIT仓储 （仓库）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 当前项目目录</span><br><span class="line">git init // 初始化一个本地的仓库</span><br></pre></td></tr></table></figure>

<blockquote>
<p>就是在本地文件夹中添加了一个.git的文件夹用于记录所有的项目变更信息</p>
</blockquote>
<h2 id="2-查看本地仓储的变更状态"><a href="#2-查看本地仓储的变更状态" class="headerlink" title="2. 查看本地仓储的变更状态"></a>2. 查看本地仓储的变更状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>用于查看本地仓储的状态<br>第一次查看，显示的是一些没有被跟踪的文件<br><code>git status -s</code> // -s 是输出简要的变更日志</p>
<h2 id="3-添加本地暂存（托管）文件"><a href="#3-添加本地暂存（托管）文件" class="headerlink" title="3. 添加本地暂存（托管）文件"></a>3. 添加本地暂存（托管）文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add (--all)</span><br></pre></td></tr></table></figure>

<p>初始的时候必须这样添加一下，后面是–all或者.(点），这样说明是添加所有文件到暂存区，也可以将一个没有被跟踪的文件添加到跟踪列表</p>
<h2 id="4-添加本地GIT忽略清单文件"><a href="#4-添加本地GIT忽略清单文件" class="headerlink" title="4. 添加本地GIT忽略清单文件"></a>4. 添加本地GIT忽略清单文件</h2><p>在代码库文件夹的根目录添加一个.gitignore文件，此文件用于说明忽略的文件有哪些，例如类似于node_modules这种性质的文件是不应该被跟踪</p>
<h2 id="5-提交被托管的文件变化到本地仓储"><a href="#5-提交被托管的文件变化到本地仓储" class="headerlink" title="5. 提交被托管的文件变化到本地仓储"></a>5. 提交被托管的文件变化到本地仓储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit  (-m) &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>

<p>将本地的变化提交的本地的仓库文件夹归档,一般在有了一个小单元的整体变化后再提交,也就是也没必要有一点点改动就提交，这样徒增自己的版本数量</p>
<h2 id="6-对比差异"><a href="#6-对比差异" class="headerlink" title="6. 对比差异"></a>6. 对比差异</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>可以用于对比当前状态和版本库中状态的变化</p>
<h2 id="7-提交日志"><a href="#7-提交日志" class="headerlink" title="7. 提交日志"></a>7. 提交日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>可以查看提交日志</p>
<h2 id="8-回归到指定版本"><a href="#8-回归到指定版本" class="headerlink" title="8. 回归到指定版本"></a>8. 回归到指定版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<h2 id="9-为仓储添加远端（服务器端）地址"><a href="#9-为仓储添加远端（服务器端）地址" class="headerlink" title="9. 为仓储添加远端（服务器端）地址"></a>9. 为仓储添加远端（服务器端）地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote  add  origin (github仓库地址)//https://github.com/zwxs/github-demo.git</span><br><span class="line">将本地仓储的提交记录推送到远端的master分支</span><br><span class="line">git push -u origin master</span><br><span class="line">拉取远端master分支的更新记录到本地</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<h1 id="二、一般我们也只需像官网那样简单几步"><a href="#二、一般我们也只需像官网那样简单几步" class="headerlink" title="二、一般我们也只需像官网那样简单几步"></a>二、一般我们也只需像官网那样简单几步</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init # 初始化一个git本地仓库</span><br><span class="line">git add README.md # 添加一个README.md文件到缓存区</span><br><span class="line">git commit -m &quot;first commit&quot; # 提交描述信息</span><br><span class="line">git remote add origin https://github.com/lsqy/lsq.git # 为仓储添加远端（服务器端）地址</span><br><span class="line">git push -u origin master # 将本地仓储的提交记录推送到远端的master分支</span><br></pre></td></tr></table></figure>

<h1 id="三、接下来托管自己的网页到github上，也是本次总结的一个重点"><a href="#三、接下来托管自己的网页到github上，也是本次总结的一个重点" class="headerlink" title="三、接下来托管自己的网页到github上，也是本次总结的一个重点"></a>三、接下来托管自己的网页到github上，也是本次总结的一个重点</h1><blockquote>
<p>这也算是引入了GIT分支的概念</p>
</blockquote>
<h2 id="创建一个新的分支"><a href="#创建一个新的分支" class="headerlink" title="- 创建一个新的分支"></a>- 创建一个新的分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch  gh-pages</span><br></pre></td></tr></table></figure>

<h2 id="切换到新的分支"><a href="#切换到新的分支" class="headerlink" title="- 切换到新的分支"></a>- 切换到新的分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout  gh-pages</span><br></pre></td></tr></table></figure>

<h2 id="将本地的分支推送到远端"><a href="#将本地的分支推送到远端" class="headerlink" title="- 将本地的分支推送到远端"></a>- 将本地的分支推送到远端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin  gh-pages</span><br></pre></td></tr></table></figure>

<p>接下来访问下<code>lsqy.github.io/test</code>即可看到托管上的网页了,注意这里的lsqy是我的github用户名，你需要改成自己的<br>这样以后自己的一些示例就可以很方便的进行演示了。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>SublimeText3快捷键总结</title>
    <url>/2015/04/03/150403SublimeText3%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>sublime这款轻便的编辑器，反正我是觉得很好用，下面是一些常用快捷键,愿能帮助你更畅快的coding！</p>
</blockquote>
<h1 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h1><p><code>Ctrl+J</code> 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</p>
<p><code>Ctrl+Shift+D</code> 复制光标所在整行，插入到下一行。</p>
<p><code>Tab</code> 向右缩进。</p>
<p><code>Shift+Tab</code> 向左缩进。</p>
<p><code>Ctrl+K+K</code> 从光标处开始删除代码至行尾。</p>
<p><code>Ctrl+Shift+K</code> 删除整行。</p>
<p><code>Ctrl+/</code> 注释单行。</p>
<p><code>Ctrl+Shift+/</code> 注释多行。</p>
<p><code>Ctrl+K+U</code> 转换大写。</p>
<p><code>Ctrl+K+L</code> 转换小写。</p>
<p><code>Ctrl+Z</code> 撤销。</p>
<p><code>Ctrl+Y</code> 恢复撤销。</p>
<p><code>Ctrl+U</code> 软撤销，感觉和 Gtrl+Z 一样。</p>
<p><code>Ctrl+F2</code> 设置书签</p>
<p><code>Ctrl+T</code> 左右字母互换。</p>
<p><code>F6</code> 单词检测拼写</p>
<h1 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h1><p><code>Ctrl+D</code> 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p>
<p><code>Alt+F3</code> 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</p>
<p><code>Ctrl+L</code> 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</p>
<p><code>Ctrl+Shift+L</code> 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</p>
<p><code>Ctrl+Shift+M</code> 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</p>
<p><code>Ctrl+M</code> 光标移动至括号内结束或开始的位置。</p>
<p><code>Ctrl+Enter</code> 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</p>
<p><code>Ctrl+Shift+Enter</code> 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</p>
<p><code>Ctrl+Shift+[</code> 选中代码，按下快捷键，折叠代码。</p>
<p><code>Ctrl+Shift+]</code> 选中代码，按下快捷键，展开代码。</p>
<p><code>Ctrl+K+0</code> 展开所有折叠代码。</p>
<p><code>Ctrl+←</code> 向左单位性地移动光标，快速移动光标。</p>
<p><code>Ctrl+→</code> 向右单位性地移动光标，快速移动光标。</p>
<p><code>shift+↑</code> 向上选中多行。</p>
<p><code>shift+↓</code> 向下选中多行。</p>
<p><code>Shift+←</code> 向左选中文本。</p>
<p><code>Shift+→</code> 向右选中文本。</p>
<p><code>Ctrl+Shift+←</code> 向左单位性地选中文本。</p>
<p><code>Ctrl+Shift+→</code> 向右单位性地选中文本。</p>
<p><code>Ctrl+Shift+↑</code> 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</p>
<p><code>Ctrl+Shift+↓</code> 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</p>
<p><code>Ctrl+Alt+↑</code> 向上添加多行光标，可同时编辑多行。</p>
<p><code>Ctrl+Alt+↓</code> 向下添加多行光标，可同时编辑多行。</p>
<h1 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h1><p><code>Ctrl+F</code> 打开底部搜索框，查找关键字。</p>
<p><code>Ctrl+shift+F</code> 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</p>
<p><code>Ctrl+P</code> 打开搜索框。例如：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p>
<p><code>Ctrl+G</code> 打开搜索框，自动带：，输入数字跳转到该行代码。例如：在页面代码比较长的文件中快速定位。</p>
<p><code>Ctrl+R</code> 打开搜索框，自动带@，输入关键字，查找文件中的函数名。例如 ：在函数较多的页面快速查找某个函数。</p>
<p><code>Ctrl+：</code> 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</p>
<p><code>Ctrl+Shift+P</code> 打开命令框。应用场景：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p>
<p><code>Esc</code> 退出光标多行选择，退出搜索框，命令框等。</p>
<h1 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h1><p><code>Ctrl+Tab</code> 按文件浏览过的顺序，切换当前窗口的标签页。</p>
<p><code>Ctrl+PageDown</code> 向左切换当前窗口的标签页。</p>
<p><code>Ctrl+PageUp</code> 向右切换当前窗口的标签页。</p>
<p><code>Alt+Shift+1</code> 窗口分屏，恢复默认1屏（非小键盘的数字）</p>
<p><code>Alt+Shift+2</code> 左右分屏-2列</p>
<p><code>Alt+Shift+3</code> 左右分屏-3列</p>
<p><code>Alt+Shift+4</code> 左右分屏-4列</p>
<p><code>Alt+Shift+5</code> 垂直等分4屏</p>
<p><code>Alt+Shift+8</code> 垂直分屏-2屏</p>
<p><code>Alt+Shift+9</code> 垂直分屏-3屏</p>
<p><code>Ctrl+K+B</code> 开启/关闭侧边栏。</p>
<p><code>F11</code> 全屏模式，有的电脑需要加上fn，因为快捷键的冲突</p>
<p><code>Shift+F11</code> 免打扰模式</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>解决自适应的两栏布局方式</title>
    <url>/2015/04/29/150429%E8%A7%A3%E5%86%B3%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>  &nbsp;&nbsp;&nbsp;&nbsp;今天也算是一个小需求吧，需要实现一下这个，自己简单摸索了一下，总结出了两种方法，实现这样的方法会用很多种，在这里自己也是仅仅列出自己构思的这两种记录下来，下面开始<a id="more"></a></p>
</blockquote>
<h2 id="首先是第一种方式-运用了文本环绕的概念"><a href="#首先是第一种方式-运用了文本环绕的概念" class="headerlink" title="首先是第一种方式-运用了文本环绕的概念"></a>首先是第一种方式-运用了文本环绕的概念</h2><pre><code>&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;简单科普一下文本环绕的概念,文字环绕是Microsoft Office Word软件的一种排版方式,主要用于设置Word文档中的图片文本框、自选图形、剪贴画、艺术字等对象与文字之间的位置关系.一般包括四周型、紧密型、衬于文字下方、浮于文字上方、上下型、穿越型等多种文字环绕方式,上面这个文本环绕的概念是节选自百科。
&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;下面列出实现现实需求中的思路：当文本在另一个容器当中，容器是overflow：hidden的时候。那么这个时候这个盒子就变成了一个绝缘的盒子，不去影响任何外部的元素并且内容使用剩余的宽度。下面简单列出，注意下面的代码仅供实例，丝毫不具备优化之类的思想，因为大家主要是了解这个布局思路即可。先附上一个简图
![layout](150429解决自适应的两栏布局方式/layout.png)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    html,body &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sidebar &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 60%;</span><br><span class="line">        float: left;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">    .main &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;sidebar&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  这样一个简单地侧边栏固定，中间宽度自适应的效果就实现了，下面来看第二种实现方式</p>
</blockquote>
<h2 id="方法二-利用绝对定位来实现"><a href="#方法二-利用绝对定位来实现" class="headerlink" title="方法二-利用绝对定位来实现"></a>方法二-利用绝对定位来实现</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;主要是利用设置了绝对定位，也即是设置了position:absolute;这样当前元素就脱离了标准流，就不占位置了，接下来给右边盒子设置100%宽，再设置上padding-left为左边盒子的宽度即可实现；当然当遇到两端都有一个栏的情况下可以让其两端都为绝对定位，中间的盒子设置100%宽，那这样的话就需要左右padding把那两个盒子的宽给设置出来即可。下面列出实现代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    html,</span><br><span class="line">    body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sidebar1 &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .sidebar2 &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        padding-left: 100px;</span><br><span class="line">        padding-right: 100px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt; //这里是列出了三栏的情况，两栏直接去掉一栏，在上面再对main的padding做一下修改即可</span><br><span class="line">    &lt;div class=&quot;sidebar1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;sidebar2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其实这种布局在移动端布局还是比较常见，应用场景：有一栏或两栏宽固定，剩下的一栏宽度自适应;再次重申，这只是自己做的一个小结，也希望能帮助到有需要的人，当然对于大神来说，不喜勿喷，今天这个就到这里了。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript分层概念</title>
    <url>/2015/05/01/150501Javascript%E5%88%86%E5%B1%82%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;一个项目前期的分层设计是很重要的，一个好的分层结构会使我们的代码组织条理更清晰，减少冗余，提髙代码重用率。和 CSS — 样，我 觉得将 JavaScript 也分成三层也是比较合理的，从下往上依次是 base 层、 common 层 和 page 层 。需要 说明的是，如何分层是一件主观的事情，为 的 是 “ 把事情变得更好” ，没有对和错之 分，只有好和坏，我并不是说 “ 只有这样分层才是对的”，下面简单列出这几个层的一个介绍</p>
<h2 id="1-base-层"><a href="#1-base-层" class="headerlink" title="1. base  层"></a>1. base  层</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;位于三层的最底端，这一层有两个职责。职责一是封装不同浏览器下 JavaScript 的差异，提供统一的接口，我们可以依靠它来完成跨浏览器兼容的工作。职责二是扩展JavaScript语言底层提供的接口，让它提供更多更为易用的接口。 base 层的功能是给 common 层 和 page 层提供接口</p>
<h2 id="2-common-层"><a href="#2-common-层" class="headerlink" title="2. common  层"></a>2. common  层</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;位于三层的中间，依赖  base 层提供的接口。 commom 层提供可供复用的组件，它 是典型的 MVC 模式中的 M, 和页面内的具体功能没有直接关系。 common 层的功能是给 page 层提供组件。</p>
<h2 id="3-page-层"><a href="#3-page-层" class="headerlink" title="3. page  层"></a>3. page  层</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;位于三层的最顶端。这一层和页面里的具体功能需求直接相关，相当于 MVC模式中的C, page 层依赖于 base 层 和 common 层。 page 层的功能是完成页面内的功能需求。<br>引申：<br>其实page 层是和页面里的具体功能需求直接相关。如果页面里的功能需求 很简单，页面里可以没有 base 层代码，甚至可以没有 common 层代码，但一定会有 page 层 代码。 可以说base 层 和 common 层都是属于框架级的， page 层是属于应用级的，它可以调用 base 层的接口和 common 层的组件。</p>
<h3 id="下面举例形象化这三者的关系："><a href="#下面举例形象化这三者的关系：" class="headerlink" title="下面举例形象化这三者的关系："></a>下面举例形象化这三者的关系：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们平时绝大部分工作都是在 page 层完成的，有了分层的概念， page 层的工作就非 常轻松了。如 果 base 层 和 common 层足够丰富和稳定，我们就可以将精力全部放在具体 业务逻辑上，跨浏览器兼容和常用组件都可以交给 base 层 和 common 层去完成，一方面 可以极大地提高开发效率，另一方面也可以大大提高代码的重用率，减小网页的大小，下面举一个生动的例子：<br>&nbsp;&nbsp;&nbsp;&nbsp;如果没有 base 层 和 common 层 ，直接用原生 JavaScript 写程序，就像是开着汽车行 驶在一条不平坦的泥路上，一路上有凸起的石块（浏览器兼容带来的阻碍） ，也有凹陷 的 沼 泽 （原生 JavaScript 提 供 的 底 层 接 口 不 足）<br>&nbsp;&nbsp;&nbsp;&nbsp;引 入 base 层之后呢，就像铲平了泥路上凸起的石块（提供跨浏览器兼容的接口） ，填满了 凹陷的沼泽（弥补原生 JavaScript 底层接口的不足） 。在 base 层的基础上写程序，就像 汽车行驶在一条平坦的泥路上。<br>&nbsp;&nbsp;&nbsp;&nbsp;继 base 层之后，再 引 入 common层,就像在平坦的泥路上铺上了一层沥青，路再也不是普通的泥路了，它成了高速公路。在 base 层 和 common 的基础上写Javascript, 就像开着汽车在高速公路上飞驰！</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;其实在平常的工作学习中，一定要学会归类学习，重要的去学习一些思想，就像这次的这个分层理念，其实对于Javascript和CSS都是非常适用的，并且最终都是能做到是自己的代码精炼和具有条理的，重要的是可维护性会很强。<br>&nbsp;&nbsp;&nbsp;&nbsp;每当读书的时候，就会发现自己很渺小，需要去学习的东西还有很多，随时学习的心态必须时刻具备，上面的总结是从Web前端开发修炼之道当中凝练出来的，记录下来，也是提醒下自己的分层意识，随着现在前端越来越成熟和规范的时候，我们每一个前端人都应该时刻要去具备一颗追求卓越的心态，让自己尽快提升一个高度，特在此共勉！</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>形参与实参</title>
    <url>/2015/05/16/150516%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天遇到了一个问题，以前自己以为形参是不占内存的，并且以为形参就是跟实参保持一致，今天经过了一下系统分析后，才发现自己原先的认识真实太浅薄了，下面由一个小demo引出问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">      foo: &apos;bar&apos;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">var obj2 = obj1;</span><br><span class="line">function changeObj(o) &#123;</span><br><span class="line">       o = 1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">changeObj(obj2);</span><br><span class="line"></span><br><span class="line">console.log(obj1); // =&gt; &#123; foo: &apos;bar&apos; &#125;</span><br><span class="line">console.log(obj2); // =&gt; &#123; foo: &apos;bar&apos; &#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;是不是有些人对这个结果很诧异，以为为什么控制台输出的obj2还是原先的{ foo: ‘bar’ }而不是1呢，我刚一开始也认为错了，有些时候认识到错误之后，及时去改正即可，所以接下来我就查阅了下相关资料，但是发现也都是写的不太全面，索性自己记录下来，到时候翻阅起来也方便，好了，下面开始分析过程：<br>&nbsp;&nbsp;&nbsp;&nbsp;其实对于上面的函数调用( changeObj(obj2))来说，首先在函数内部会进行一下这个操作<br> function changeObj(o) {<br>        &nbsp;&nbsp;&nbsp;&nbsp;o = obj2<br>        &nbsp;&nbsp;&nbsp;&nbsp;o = 1;<br>    }<br>也就是只要一进去函数内部，首要进行的是形参等于实参， 在这里obj2是引用类型，所以等于将obj2的引用（这里是也可以用地址做个比喻，就是实际不存储，只是有一个指向而已，其实并不严谨，但是现在大家可以先这样理解）传给了o，此时o也指向了obj2，这时候如果对o进行一些添加属性或方法的操作，都会体现到obj2所指向的对象上面，下面会列上详细代码，先说这个，是直接对o进行了一次赋值操作，这时候等于是切断了o与obj2的联系，所以obj2并未改变；<br>再对上面的demo稍加修改，变式1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">      foo: &apos;bar&apos;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">var obj2 = obj1;</span><br><span class="line">function changeObj(o) &#123;</span><br><span class="line">       o.foo = &apos;baz&apos;;</span><br><span class="line">       o = &#123;&#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">changeObj(obj2);</span><br><span class="line"></span><br><span class="line">console.log(obj1); // =&gt; &#123; foo: &apos;baz&apos; &#125;</span><br><span class="line">console.log(obj2); // =&gt; &#123; foo: &apos;baz&apos; &#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;此时通过o.foo = ‘baz’;的修改对obj1和obj2都得到了体现，这个不难理解，因为对于obj1 = obj2这一步来说，本身变量值存储引用类型的引用，所以经历这一步解析之后，obj1和obj2会指向同一个对象，也可以说是同一块内存，那通过changeObj(obj2)之后，这个函数内部的解析在上面已经提及，在o还未赋值之前，对o进行的属性操作都会体现在obj2上，因为在调用的函数内部，o和obj2指向同一个对象，当然obj1也会跟着改变；<br>再对上面的demo稍加修改，变式2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">      foo: &apos;bar&apos;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">var obj2 = obj1;</span><br><span class="line">function changeObj(o) &#123;</span><br><span class="line">       o = &#123;&#125;;</span><br><span class="line">       o.foo = &apos;baz&apos;;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">changeObj(obj2);</span><br><span class="line"></span><br><span class="line">console.log(obj1); // =&gt; &#123; foo: &apos;bar&apos; &#125;</span><br><span class="line">console.log(obj2); // =&gt; &#123; foo: &apos;bar&apos; &#125;</span><br></pre></td></tr></table></figure>

<p>这次只是让changeobj内部o的赋值操作放到了上面，这次再对o进行的属性操作并未对obj1和obj2产生影响，因为在解析完 o={} 之后o和obj2的引用链就被切断了，也可以说接下来o进行的任何操作都与obj2无关了，所以控制台输出的结果也正印证了；</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;综上所述，总结出以下几点:</p>
<ol>
<li>没有调用函数时，形参是不占内存的。调用函数时，会给形参分配内存单元，在调用结束时，即刻释放所分配的内存单元。也就是说形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。</li>
<li>实参出现在主调函数中，进入被调函数后，无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参。 因此应提前用赋值，输入等办法使实参获得确定值。另外实参占用的内存直到程序结束释放。</li>
<li>使用值传递时，实参和形参是各自独立的。一进入函数进行的 o = obj2 这样是拷贝了obj2的值给o，这时o 与 obj2占用两个不同的内存单元；而使用 引用传递时，一进入函数进行的 o = obj2 这样实际上是拷贝了obj2的引用（地址）给o，这时o 与 obj2指向同一个对象（内存）。</li>
<li>以前我们都没有注意到形参，以为形参不占内存，现在回过头来看，其实我们对于传的形参都是为了使用它而不是为了改变它的，所以没有出现一些错误，当试图改变的时候，就不一样了<br>，这时候只要你一旦对这个形参进行了赋值操作，不管是简单数据类型还是复杂数据类型，都不会对传进去的对象产生作用了，所以以后在使用函数时千万不要在内部对形参进行赋值操作！</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON知识小结</title>
    <url>/2015/06/05/150605JSON%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、JSON-定义"><a href="#一、JSON-定义" class="headerlink" title="一、JSON 定义"></a>一、JSON 定义</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;JSON全称 JavaScript Object Notation，是一种轻量级的文本数据交换格式，它是基于ECMAScript的一个子集，独立于语言，并且在java、C++、Python等其他语言中也有，所以JSON相当于一个中转站，能够达成各种语言间交换数据，也就是说能够实现互相通信，因为各个语言都能识别JSON，所以这些特性使JSON成为理想的数据交换语言,而其实我们大多数的业务逻辑也就是通过通信过来的数据再进行下一步开展的。 <a id="more"></a></p>
<h2 id="二、语法规则-（格式要求）"><a href="#二、语法规则-（格式要求）" class="headerlink" title="二、语法规则 （格式要求）"></a>二、语法规则 （格式要求）</h2><p>1、数据在名称/值对中<br>2、数据由逗号分隔(最后一个键/值对不能带逗号)，这个点一定要注意，有时候容易忽略<br>3、花括号保存对象；方括号保存数组<br>4、<strong>键必须使用双引号</strong>  注意跟js中的对象的区别，json并不属于js，是从js中抽出来的，源自于js独立出来的；</p>
<h2 id="三、JSON解析"><a href="#三、JSON解析" class="headerlink" title="三、JSON解析"></a>三、JSON解析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在工作当中，我们经常会有这样的需求，需要客 户端向服务器端通过地址栏或者post、get提交数据，然后服务器端处理完数据之后，将计算的结果信息回传给客户端，那么这时就存在了一定的难度，特别是数据量较大时。这个时候数据的格式成了关键，所以我们应该能够选择到某种格式可以很方便的进行数据的组装，然后可以很方便的进行 解析那就再好不过了，这时JSON便是在这里的不二选择。那接下来你只需要在客户端向服务器提交信息的时候，先按照JSON的格式拼装好一个字符串，提交给服务器端;服务端在接到请求之后，就可以将从服务端返回的数据按照JSON的格式拼装好一个字符串，响应给客户端。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外需要知道不同的语言各自也都对应有其解析方法，需要解析完成后才能读取，下面在这里只是简要分析一下Javascript和PHP的解析方式；</p>
<h3 id="1、Javascript-解析方法"><a href="#1、Javascript-解析方法" class="headerlink" title="1、Javascript 解析方法"></a>1、Javascript 解析方法</h3><p>主要是这三种<code>eavl()、 JSON.parse()、JSON.stringify()</code>；<br>例如如果Javascript想传递一个复杂的数据类型给PHP等后台语言,就先通过JSON.stringify()将其字符串化(JSON)后传过去,到PHP那边可以通过<code>json_decode()</code>解码成PHP能够使用的数据;<br>那从后端响应回来的数据，Javascript可以通过<code>JSON.parse()</code>或者<code>eavl()</code>来进行解析就可以达到Javascript的对象了，接下来也就可以进行相应的业务逻辑了<br>JSON兼容处理可以引入<code>[json2.js](http://www.JSON.org/json2.js)</code>这个文件</p>
<h3 id="2、PHP解析方法"><a href="#2、PHP解析方法" class="headerlink" title="2、PHP解析方法"></a>2、PHP解析方法</h3><p><code>json_encode(){将PHP数组转成json格式的字符串}</code><br><code>json_decode(){由json格式的字符串转成PHP能用的数据}</code><br>也就是说如果PHP想传递一个复杂的数据类型给Javascript,就先通过<code>json_encode()</code>其字符串化为(JSON)后传过去,到Javascript那边可以通过<code>JSON.parse()</code> 解码成Javascript能够使用的数据;<br>总结：JSON体积小、解析方便且高效，在实际开发成为首选。另外工作当中可能</p>
<h2 id="四、JSON-文件类型"><a href="#四、JSON-文件类型" class="headerlink" title="四、JSON 文件类型"></a>四、JSON 文件类型</h2><p> JSON 文件的文件类型是 “.json”<br> JSON 文本的 MIME 类型是 “application/json”</p>
<h2 id="五、对比XML"><a href="#五、对比XML" class="headerlink" title="五、对比XML"></a>五、对比XML</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;XML是一种标记语言，很类似HTML，其宗旨是用来传输数据，具有自我描述性（固定的格式的数据）。XML可以随意通过自定义标签使数据更加具有可读性；</p>
<h3 id="1、语法规则"><a href="#1、语法规则" class="headerlink" title="1、语法规则"></a>1、语法规则</h3><p>1、必须有一个根元素<br>2、不可有空格、不可以数字或.开头、大小写敏感<br>3、不可交叉嵌套<br>4、属性双引号（浏览器自动修正成双引号了）<br>5、特殊符号要使用实体<br>6、注释和HTML一样</p>
<h3 id="2、对比"><a href="#2、对比" class="headerlink" title="2、对比"></a>2、对比</h3><p>虽然可以描述和传输复杂数据，但是其解析过于复杂并且体积较大，所以实现开发已经很少使用了，所以现在大多数是采用的JSON格式进行传输数据</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>超级实用的markdown-preview使用方法</title>
    <url>/2015/06/04/150604%E8%B6%85%E7%BA%A7%E5%AE%9E%E7%94%A8%E7%9A%84markdown-preview%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>markdown这款编辑软件你绝对值得拥有，特别方便去记录一些自己的日志和博客之类的，下面总结出两个能够实现markdown-preview的方法，也就是能够实现markdown文件的实时预览，并且还可以转换成html格式的文件生成出来，下面看正文吧！</p>
</blockquote>
<h2 id="方法一：Node环境下安装markdown-preview这款命令行工具"><a href="#方法一：Node环境下安装markdown-preview这款命令行工具" class="headerlink" title="方法一：Node环境下安装markdown-preview这款命令行工具"></a>方法一：Node环境下安装markdown-preview这款命令行工具</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;上NodeJS官网下载即可，安装也很简单，一直下一步就可以，安装了NodeJS之后npm也就自动安装了，npm即使NodeJS的包管理系统，顺便说一下，因为markdown-preview的解析机制在这里是基于NodeJS的，所以要有Node环境，即是需要安装Node。</p>
<h3 id="全局安装markdown-preview"><a href="#全局安装markdown-preview" class="headerlink" title="全局安装markdown-preview"></a>全局安装markdown-preview</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g markdown-preview</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意一定要注意加上-g，这样能够确保是全局安装，更重要的是这样就能够直接从命令行直接调用markdown-preview了</p>
</blockquote>
<h3 id="使用markdown-preview"><a href="#使用markdown-preview" class="headerlink" title="使用markdown-preview"></a>使用markdown-preview</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;直接在需要打开的目录下面通过以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">markdown-preview  一个md文件名</span><br></pre></td></tr></table></figure>

<p>接下来就会自动在你的默认浏览器中以html形式解析之后打开这个md文件，实现预览效果</p>
<h2 id="方法二：在sublime中安装其插件"><a href="#方法二：在sublime中安装其插件" class="headerlink" title="方法二：在sublime中安装其插件"></a>方法二：在sublime中安装其插件</h2><h3 id="安装sublime"><a href="#安装sublime" class="headerlink" title="安装sublime"></a>安装sublime</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;网上有很多安装教程，这里就不赘述了。</p>
<h3 id="安装markdown-preview这款插件"><a href="#安装markdown-preview这款插件" class="headerlink" title="安装markdown-preview这款插件"></a>安装markdown-preview这款插件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;通过Ctrl+shift+P调出命令窗口，然后在命令窗口输入<code>pcip（ package Control : install package）</code>,等待一会就会出现一个窗口，也就是sublime中的所有插件，然后输入markdown-preview就可以等待sublime安装这个插件包了</p>
<h3 id="使用markdown-preview-1"><a href="#使用markdown-preview-1" class="headerlink" title="使用markdown-preview"></a>使用markdown-preview</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先在你需要打开的md文件界面当中通过Ctrl+shift+P调出命令窗口，然后输markdown-preview，直接点击，如果还有选择选项，选preview in Browser即可，会出现如图：<br><img src="/2015/06/04/150604超级实用的markdown-preview使用方法/markdown-preview.png" alt="markdown-preview"><br>接下来就会自动在你的默认浏览器中以html形式解析之后打开这个md文件，实现预览效果，另外不得不提下sublime这块编辑器真的很不错，又轻便，而且插件特别齐全，大家可以尝试下，不要以为我是做广告哦，因为我跟sublime半点关系都没有，只是友情提醒，这次的分享就到这里。</p>
]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>markdown-preview</tag>
        <tag>实用小技能</tag>
      </tags>
  </entry>
  <entry>
    <title>While循环的一个实用的应用场景</title>
    <url>/2015/06/01/150601While%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;像while这样的循环相信大家会经常用到它的最基本的用法，但是一些技巧性的用法可能都很少在意，下面分享一下我使用while循环的一个小技巧性用法，也是让自己时刻注意要发散性思维的去coding！</p>
<h2 id="这主要是围绕push和apply方法来说-就是在ie8以下，apply方法的第二个参数如果是伪数组的话会报错"><a href="#这主要是围绕push和apply方法来说-就是在ie8以下，apply方法的第二个参数如果是伪数组的话会报错" class="headerlink" title="这主要是围绕push和apply方法来说,就是在ie8以下，apply方法的第二个参数如果是伪数组的话会报错"></a>这主要是围绕push和apply方法来说,就是在ie8以下，apply方法的第二个参数如果是伪数组的话会报错</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;先来看下面这段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 未使用apply的时候，也就是未启用调用上下文模式 --&gt;</span><br><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.push([4,5,6]);</span><br><span class="line">console.log(&apos;arr&apos;,arr);</span><br><span class="line">&lt;!-- 上面的输出结果为：arr [1, 2, 3, [4,5,6]] --&gt;</span><br><span class="line">var arr1 = [1,2,3];</span><br><span class="line">arr1.push.apply(arr,[4,5,6]);</span><br><span class="line">console.log(&apos;arr1&apos;,arr1);</span><br><span class="line">&lt;!-- 上面的输出结果为：arr1 [1, 2, 3, 4, 5, 6] --&gt;</span><br></pre></td></tr></table></figure>

<p>上面涉及到了apply的用法，其实apply用法并不难，但是它的作用还是不小的，在Javascript中很多优秀的类库当中都能看到它的身影，因为它具有一个强大的作用，就是<strong>“调用上下文”</strong>；<br>用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply(上下文，[arg1, arg2, ...])</span><br><span class="line">fn.apply(a,[1,2]);</span><br></pre></td></tr></table></figure>

<p>解析：apply的参数，第一个参数表示指定的this，第二个参数要求是数组，表示函数的参数,在上面也就是1,2时fn的参数，也就是相当于a.fn(1,2);也就是以a作为上下文调用fn，然后fn里面传入了1和2这两个参数；<br>这是封装了一个push方法来解决apply第二个参数是伪数组的兼容问题；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- context是指的上下文，大家可以先不用在意这个context，只需要知道`context.getElementsByTagName(tag)`获得了一个伪数组。 --&gt;</span><br><span class="line">var getTag = function(tag,context,results) &#123;</span><br><span class="line">  results = results || [];</span><br><span class="line">  try &#123;</span><br><span class="line">    results.push.apply(results,context.getElementsByTagName(tag));</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    myPush(results,context.getElementsByTagName(tag));</span><br><span class="line">  &#125;</span><br><span class="line">  return results;</span><br><span class="line">&#125;;</span><br><span class="line">var myPush = function(target,els) &#123;</span><br><span class="line">      var j = target.length,</span><br><span class="line">          i = 0;</span><br><span class="line">      while((target[j++] = els[i++]))&#123;&#125; //这里的els[i++]总会有取值完的时候，那时候就会变为假，自动跳出while循环，这也                                    算是while循环的一个小技巧 ，</span><br><span class="line">      target.length = j - 1; //因为伪数组的length不会自己增加，所以手动赋值一下，避免出错</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;记录下这个小场景也是为了警醒自己在工作当中解决问题的时候要学会发散思维的去解决一些兼容问题，还有一些应用场景。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>null和undefined的区别</title>
    <url>/2015/06/05/150605null%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="null和undefined的基本特点"><a href="#null和undefined的基本特点" class="headerlink" title="null和undefined的基本特点"></a>null和undefined的基本特点</h2><ul>
<li>null是一个表示”无”的对象，转为数值时为0；</li>
<li>undefined是一个表示”无”的原始值，转为数值时为NaN。</li>
<li>当声明的变量还未被初始化时，变量的默认值为undefined。</li>
<li>null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。</li>
</ul>
<h2 id="undefined主要用法"><a href="#undefined主要用法" class="headerlink" title="undefined主要用法"></a>undefined主要用法</h2><p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>-（1）变量被声明了，但没有赋值时，就等于undefined。<br>-（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>-（3）对象没有赋值的属性，该属性的值为undefined。<br>-（4）函数没有返回值时，默认返回undefined。</p>
<h2 id="null主要用法"><a href="#null主要用法" class="headerlink" title="null主要用法"></a>null主要用法</h2><p>null表示”没有对象”，即该处不应该有值。典型用法是：<br>-（1） 作为函数的参数，表示该函数的参数不是对象。<br>-（2） 作为对象原型链的终点。</p>
<ul>
<li>(3)  可以将在闭包中使用的对象，在不使用的时候可以将其设为null，从而可以通知回收机制回收，从而避免内存泄漏，提高性能。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先暂时总结这写地方，肯定还有没有涉及到的，以后在工作当中会继续完善，学无止境！</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重的几种实现方式</title>
    <url>/2015/07/29/150729%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>下面每种方法都采用普通的函数模式封装和原型模式封装</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h2><h3 id="普通函数模式封装"><a href="#普通函数模式封装" class="headerlink" title="普通函数模式封装"></a>普通函数模式封装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">    function unique(arr) &#123;</span><br><span class="line">        var n = []; //声明一个临时数组</span><br><span class="line">        for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            if (n.indexOf(arr[i]) == -1) n.push(arr[i]);//如果当前数组的第i项已经保存进了临时数组，那么跳过， 否则把当前项push到临时数组里面，运用了indexOf方法的使用</span><br><span class="line">        &#125;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(unique(arr1)); //[1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote>
<p>与函数模式的不同是直接将这个去重方法封装到数组Array的原型属性当中，这样每一个数组都能后通过原型链访问到这个方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">    Array.prototype.unique = function() &#123;</span><br><span class="line">        var n = []; //声明一个临时数组</span><br><span class="line">        for (var i = 0; i &lt; this.length; i++) &#123;</span><br><span class="line">            if (n.indexOf(this[i]) == -1) n.push(this[i]);//如果当前数组的第i项已经保存进了临时数组，那么跳过，否则把当前项push到临时数组里面</span><br><span class="line">        &#125;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(arr1.unique());//[1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h2><h3 id="普通函数模式封装-1"><a href="#普通函数模式封装-1" class="headerlink" title="普通函数模式封装"></a>普通函数模式封装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">     function unique(arr) &#123;</span><br><span class="line">      var n = &#123;&#125;, //n为一个hash对象</span><br><span class="line">          r = []; //r为一个临时数组</span><br><span class="line">      for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">          if (!n[arr[i]])&#123; //如果hash表中没有当前项</span><br><span class="line">              n[arr[i]] = true; //存入hash表</span><br><span class="line">              r.push(arr[i]); //把当前数组的当前项push到临时数组里面</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return r;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(unique(arr1));//[1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原型模式-1"><a href="#原型模式-1" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote>
<p>与函数模式的不同是直接将这个去重方法封装到数组Array的原型属性当中，这样每一个数组都能后通过原型链访问到这个方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">     Array.prototype.unique = function() &#123;</span><br><span class="line">      var n = &#123;&#125;, //n为hash表</span><br><span class="line">          r = []; //r为临时数组</span><br><span class="line">      for (var i = 0; i &lt; this.length; i++) &#123;</span><br><span class="line">          if (!n[this[i]]) &#123; //如果hash表中没有当前项</span><br><span class="line">              n[this[i]] = true; //存入hash表</span><br><span class="line">              r.push(this[i]); //把当前数组的当前项push到临时数组里面</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return r;</span><br><span class="line">   &#125;</span><br><span class="line">    console.log(arr1.unique1()); //[1, 2, 3, 4, 5]</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="普通函数模式封装-2"><a href="#普通函数模式封装-2" class="headerlink" title="普通函数模式封装"></a>普通函数模式封装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">    function unique(arr) &#123;</span><br><span class="line">        var n = [arr[0]]; //结果数组</span><br><span class="line">        for (var i = 1; i &lt; arr.length; i++) &#123; //从第二项开始遍历</span><br><span class="line">            if (arr.indexOf(arr[i]) == i)  n.push(arr[i]);</span><br><span class="line">            //如果当前数组的第i项在当前数组中第一次出现的位置不是i， 那么表示第i项是重复的，忽略掉。否则存入结果数组</span><br><span class="line">        &#125;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(unique(arr1));//[1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原型模式-2"><a href="#原型模式-2" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote>
<p>与函数模式的不同是直接将这个去重方法封装到数组Array的原型属性当中，这样每一个数组都能后通过原型链访问到这个方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;数组去重&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var arr1 = [1, 2, 2, 3, 4, 3, 5, 4];</span><br><span class="line"></span><br><span class="line">    Array.prototype.unique = function() &#123;</span><br><span class="line">        var n = [this[0]]; //结果数组</span><br><span class="line">        for (var i = 1; i &lt; this.length; i++) &#123; //从第二项开始遍历</span><br><span class="line">            if (this.indexOf(this[i]) == i) n.push(this[i]);</span><br><span class="line">            //如果当前数组的第i项在当前数组中第一次出现的位置不是i， 那么表示第i项是重复的，忽略掉。否则存入结果数组</span><br><span class="line">        &#125;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(arr1.unique1()); //[1, 2, 3, 4, 5]</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这里总结这几种方法，也是提醒自己以后遇到问题注意发散思维，并且通过发散思维还能够让自己收获更多相关的知识运用，何乐而不为。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>数组</tag>
        <tag>数组去重</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript进阶之函数的四种调用模式</title>
    <url>/2015/09/01/150901Javascript%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在JavaScript中，函数是一等公民，相信这句话大家多少都有所耳闻吧，其实主要是因为函数在JavaScript中是一个数据类型，而非像C#或其他描述性语言那样仅仅作为一个模块来使用。函数有四种调用模式，分别是：作为函数调用形式、作为对象的方法调用、作为构造函数调用、以及使用call或者apply调用。这里所有的调用模式中，其实最大的区别就是this指向的不同，有一个方便理解this指向的方法就是：“牢记谁调用的函数，函数内部的this就指向谁，<strong>this是动态确定指向谁的</strong>” ;另外要注意this是个关键字，是有特殊含义的，下面分别介绍这几种调用形式。<a id="more"></a></p>
<h3 id="1-作为函数调用"><a href="#1-作为函数调用" class="headerlink" title="1.作为函数调用"></a>1.作为函数调用</h3><p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">    var age = 18;</span><br><span class="line">    console.log(this.age);// undefined</span><br><span class="line">    console.log(this);//window</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">    var age = 18;</span><br><span class="line">    console.log(this.age);// undefined</span><br><span class="line">    console.log(this);//window</span><br><span class="line">&#125;</span><br><span class="line">window.func();</span><br></pre></td></tr></table></figure>

<p>对于初学者来说是不是觉得跟自己想象的有出入，但其实一分析就知道这刚好印证了我们上面的this就是指向调用它的对象,而这里上述两个直接func()和window.func()结果是一样的，你可以暂时这样记住在函数调用模式中，函数里的 this 关键字指全局对象，如果在浏览器中就是 window 对象。这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，想了解的可以自行上网查找。</p>
<h2 id="2-作为对象方法调用，this就是当前调用方法的对象"><a href="#2-作为对象方法调用，this就是当前调用方法的对象" class="headerlink" title="2.作为对象方法调用，this就是当前调用方法的对象"></a>2.作为对象方法调用，this就是当前调用方法的对象</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;函数调用模式很简单，是最基本的调用方式。可以这么理解：同样的是函数，将其赋值给一个对象的成员以后，就不一样了。将函数赋值给对象的成员后，那么这个就不在称为函数，而应该叫做方法，这是业内的一贯称谓；<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;functionName&quot;,</span><br><span class="line">    age: 19,</span><br><span class="line">    getName: function() &#123;</span><br><span class="line">        console.log(this.name);// this指向obj（当前调用方法的对象）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getName();</span><br></pre></td></tr></table></figure>

<p>对比下函数调用与方法调用的区别，函数调用中，this专指全局对象window,而在方法中this专指当前对象即o.fn中的 this指的就是对象o。</p>
<h2 id="3-作为构造函数调用"><a href="#3-作为构造函数调用" class="headerlink" title="3.作为构造函数调用"></a>3.作为构造函数调用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在单纯的函数模式下，this 表示 window；在对象方法模式下，this 指的是当前对象。除了这两种情况，JavaScript 中函数还可以作为构造函数来调用,这时候是在函数调用前面加上一个 new 关键字,另外要注意构造函数最大作用是为了初始化一个实例对象，真正创建对象的是new，很多人不了解的以为就是构造函数创建了对象，这一点以后要注意。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">    this.name = name;// this 指向新创建出来的对象p，这种方法可以很方便的让任何对象来使用构造函数里的属性</span><br><span class="line">&#125;</span><br><span class="line">var p = new Person(&quot;小明&quot;);</span><br><span class="line">console.log(p.name);//小明</span><br></pre></td></tr></table></figure>

<p>其实在构造函数内部会进行下面这段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">    var this;</span><br><span class="line">    this.name = name;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">var p = new Person(&quot;小明&quot;);</span><br><span class="line">console.log(p.name);//小明</span><br></pre></td></tr></table></figure>

<p>其实上面的可以描述为：创建Person的新实例，必须通过new操作符，以这种方式调用构造函数会经历以下四个步骤：</p>
<ul>
<li>①、创建一个新对象；</li>
<li>②、将构造函数的作用域赋给新对象（因此this就指向了这个新对象）；</li>
<li>③、执行构造函数中的代码（初始化对象）；</li>
<li>④、返回新对象</li>
</ul>
<h3 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h3><ul>
<li>构造函数当中没有return，则默认就是返回当前对象，即this；</li>
<li>如果有return，后面是基本数据类型，忽略，和没写一样</li>
<li>但是如果后面是一个有效的引用类型的话，无论构造函数中写什么内容，都会返回这个引用类型，也就是不会返回this，而是返回这个引用类型（对象）了<br>看如下代码:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    return &#123;</span><br><span class="line">    name : &quot;小王&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p = new Person(&quot;小明&quot;);</span><br><span class="line">console.log(p.name);//小王</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>其实这是一种寄生模式的形式创建的对象，在这里先不详细介绍，大家暂时只需先知道不要在构造函数内部再重新return，除非真的有特殊情况再行分析；</p>
<h2 id="4-使用call或者apply调用（上下文调用），this由上下文决定"><a href="#4-使用call或者apply调用（上下文调用），this由上下文决定" class="headerlink" title="4.使用call或者apply调用（上下文调用），this由上下文决定"></a>4.使用call或者apply调用（上下文调用），this由上下文决定</h2><p>使用apply模式和call模式,可以任意的操作控制 this 的意义，所以在函数 js 的设 计模式中使用还是很广泛的，现在你也可以在Javascript中很多优秀的类库当中都能看到它的身影，因为它具有一个强大的作用，就是<strong>“调用上下文”</strong>；<br>首先看它的语法：<br>// call和apply的区别：就是参数不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// call(上下文, arg1, arg2, ...) call后面的参数不是数组形式；</span><br><span class="line">// apply(上下文，[arg1, arg2, ...]) apply后面的参数必须是数组形式；</span><br><span class="line">例：func.call(obj); // this 指向传入的参数：obj（第一个参数）</span><br></pre></td></tr></table></figure>

<p>拿数组的push方法来举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">&lt;!-- 使用apply --&gt;</span><br><span class="line">[].push.apply(arr,[4,5,6]);</span><br><span class="line">cosole.log(arr);//[1,2,3,4,5,6];</span><br><span class="line">这时我们就将push作为一个方法，通过arr调用，也就是说apply会自动将它后面传入的参数数组按每一个传入push这个函数当中，其实等同于arr.push(4,5,6);</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用call --&gt;</span><br><span class="line">[].push.call(arr,4,5,6);</span><br><span class="line">cosole.log(arr);//[1,2,3,4,5,6];</span><br></pre></td></tr></table></figure>

<h3 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h3><p>apply的参数，第一个参数表示指定的this，第二个参数要求是数组，表示函数的参数<br>call的参数，第一个参数也是表示指定的this，第二个参数不是数组，表示函数的参数；</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;其实在Javascript中的很多重要的概念和应用场景都是围绕着这四种调用模式来进行的，只不过很多时候大家都只是了解的不系统，在一些容易混淆的点上出了问题，所以也希望大家能够认真分析，更上一层楼吧！</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>说说DOCTYPE的作用以及标准模式与混杂模式的区别</title>
    <url>/2015/09/16/150916%E8%AF%B4%E8%AF%B4DOCTYPE%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="lt-DOCTYPE-gt-定义和用法："><a href="#lt-DOCTYPE-gt-定义和用法：" class="headerlink" title="&lt;!DOCTYPE&gt;定义和用法："></a>&lt;!DOCTYPE&gt;定义和用法：</h2><ul>
<li><!DOCTYPE> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</html></li>
<li><!DOCTYPE> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</li>
<li>在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</li>
<li>HTML5 不基于 SGML，所以不需要引用 DTD。<blockquote>
<p>提示：请始终向 HTML 文档添加 &lt;!DOCTYPE&gt; 声明，这样浏览器才能获知文档类型。</p>
</blockquote>
</li>
</ul>
<h2 id="lt-DOCTYPE-gt-作用："><a href="#lt-DOCTYPE-gt-作用：" class="headerlink" title="&lt;!DOCTYPE&gt;作用："></a>&lt;!DOCTYPE&gt;作用：</h2><p><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面，处于 <code>&lt;html&gt;</code>标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p>
<h2 id="标准模式与与混杂模式的区别"><a href="#标准模式与与混杂模式的区别" class="headerlink" title="标准模式与与混杂模式的区别"></a>标准模式与与混杂模式的区别</h2><p>其实所谓的标准模式是指，浏览器按 W3C 标准解析执行代码；混杂模式（怪异模式）则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。<br>浏览器解析时到底使用标准模式还是怪异模式，与你网页中的 DTD 声明直接相关， DTD 声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略 DTD 声明 , 将使网页进入怪异模式。</p>
<p>严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行<br>混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容</p>
<blockquote>
<p>DTD即文档类型定义（Document Type Definition）</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WampServer搭建自己的HTTP服务器</title>
    <url>/2015/10/05/151005%E4%BD%BF%E7%94%A8WampServer%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、WampServer简介"><a href="#一、WampServer简介" class="headerlink" title="一、WampServer简介"></a>一、WampServer简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;WampServer全称是Windows (Linux) + Apache + Mysql + PHP，也就是刚好是每个首字母的组合起来的，它其实是一个集成安装环境，也就是里面包含了Apache 、 Mysql 、 PHP这三款的运行环境，对于初做前端的新手来说，有些时候可能要模仿一下后台数据，那就需要用到一下服务器，但搭建环境也不是件容易的事情，特别是对于新手同学来说！因此在这里跟大家介绍一款作为一名新手在使用的方便好用的PHP服务器架设软件，那就是wampserver。<a id="more"></a></p>
<h2 id="二、WampServer下载安装"><a href="#二、WampServer下载安装" class="headerlink" title="二、WampServer下载安装"></a>二、WampServer下载安装</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;自行百度即可，没有什么特别可说的，直接一直下一步即可；</p>
<h2 id="三、管理HTTP服务"><a href="#三、管理HTTP服务" class="headerlink" title="三、管理HTTP服务"></a>三、管理HTTP服务</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;任务图标绿色为正常启动状态说明正确安装了，<br>通过图形控制台可以启动、重启、停止所有服务<br><img src="/2015/10/05/151005使用WampServer搭建自己的HTTP服务器/%E4%BB%BB%E5%8A%A1%E5%9B%BE%E6%A0%87.png" alt="任务图标">;<br>或者单独启动、重启、停止特定服务<br><img src="/2015/10/05/151005使用WampServer搭建自己的HTTP服务器/%E4%BB%BB%E5%8A%A1%E5%9B%BE%E6%A0%872.png" alt="任务图标2">;</p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1、检查访问权限 Allow from all<br>1、理解默认索引<br>3、确保端口没有被其它程序占用<br>4、“#”表示注释<br>5、修改配置要格外小心，禁止无意修改其它内容</p>
<h2 id="四、配置根目录"><a href="#四、配置根目录" class="headerlink" title="四、配置根目录"></a>四、配置根目录</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;网站根目录是Web服务器上存放网站程序的空间，可通过修改配置文件自定义，如E:/www<br>具体步骤如下<br>1、打开配置文件，控制台选择<br><img src="/2015/10/05/151005使用WampServer搭建自己的HTTP服务器/%E4%BB%BB%E5%8A%A1%E5%9B%BE%E6%A0%873.png" alt="任务图标3">;<br>或者 wampserver安装目录的<code>bin\apache\Apache2.2.21\conf\httpd.conf</code>下<br>2、设定根目录，查找并修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;D:/wamp/www&quot;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;E:/www/&quot;</span><br></pre></td></tr></table></figure>

<p>这样就指定了 “E:/www/“为存放网站的根目录。<br>3、配置根目录，查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;D:/wamp/www/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>修改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;E:/www/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>4、<strong>修改完后，并不能立即生效，注意需要重启Apache</strong><br>注：<strong>可以指定任意目录为根目录</strong></p>
<h2 id="五、网站部署"><a href="#五、网站部署" class="headerlink" title="五、网站部署"></a>五、网站部署</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将我们制作好的网页拷贝到配置好的根目录下，浏览器访问127.0.0.1即可。</p>
<h2 id="六、配置虚拟主机"><a href="#六、配置虚拟主机" class="headerlink" title="六、配置虚拟主机"></a>六、配置虚拟主机</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在一台Web服务器上，我们可以通过配置虚拟主机，然后分别设定根目录，实现对多个网站的管理。</p>
<h3 id="具体步骤如下："><a href="#具体步骤如下：" class="headerlink" title="具体步骤如下："></a>具体步骤如下：</h3><p>1、开启虚拟主机辅配置，在httpd.conf 中找到<br>去掉前面的#号注释，开启虚拟主机配置，注意http.conf是在<code>D:\wamp\bin\apache\Apache2.2.21\conf</code>,也就是你安装目录下的按我上面的路径查找即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line"># Include conf/extra/httpd-vhosts.conf //只需将这一行的#号去掉即可，上面的Virtual hosts前面的#不用去</span><br></pre></td></tr></table></figure>

<p>2、配置虚拟主机，打开D:\wamp\bin\apache\Apache2.2.21conf/extra/httpd-vhosts.conf</p>
<p>&lt; 我的wamp是安装在D盘的，所以是这个路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class="line">    DocumentRoot &quot;c:/Apache2/docs/dummy-host2.example.com&quot;</span><br><span class="line">    ServerName dummy-host2.example.com</span><br><span class="line">    ErrorLog &quot;logs/dummy-host2.example.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/dummy-host2.example.com-access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>分别修改以下三项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;E:/www/example&quot;</span><br><span class="line">ServerName &quot;example.com &quot;</span><br><span class="line">ServerAlias &quot;www.example.com&quot;</span><br></pre></td></tr></table></figure>

<p>其它项无需指定。<br>3、修改DNS（hosts）文件</p>
<blockquote>
<p>DNS想了解了可以百度搜索即可，就是一个域名系统，这里可以配置多个DNS，按自己需求来设置，相应的上面对应多个根目录</p>
</blockquote>
<p>打开<code>C:\Windows\System32\drivers\etc\hosts</code><br><strong>目录是固定的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1            example.com</span><br><span class="line">127.0.0.1            www.example.com</span><br></pre></td></tr></table></figure>

<p>注：修改hosts文件权限,以管理员身份运行<br>4、<strong>重启Apache，这一步一定要注意，很多人容易疏忽</strong><br>5、浏览器访问<a href="http://www.example.com，你就会看到你存到这个根目录里的项目应该就能看到了" target="_blank" rel="noopener">www.example.com，你就会看到你存到这个根目录里的项目应该就能看到了</a>,<br>注意这里还可以再配置其他的，例如我还配置了一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1       study.com</span><br><span class="line">127.0.0.1       www.study.com</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;到这里就结束了，接下来前端小伙伴们就可以按照自己需求实现一些简单的动态网站开始体验下了。</p>
]]></content>
      <categories>
        <category>后端知识</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>WampServer</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ie低版本不支持HTML5新增标签</title>
    <url>/2015/10/16/151016%E8%A7%A3%E5%86%B3ie%E4%BD%8E%E7%89%88%E6%9C%AC%E4%B8%8D%E6%94%AF%E6%8C%81HTML5%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="html5shiv的作用"><a href="#html5shiv的作用" class="headerlink" title="html5shiv的作用"></a>html5shiv的作用</h2><p>用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。</p>
<h2 id="为了ie678"><a href="#为了ie678" class="headerlink" title="为了ie678"></a>为了ie678</h2><p>由于IE6/IE7/IE8还有很大一部分用户，为了让网站浏览者都能正常的访问HTML5网站，解决方案就有下面两个：</p>
<ul>
<li>1、为网站创建多套模板，通过程序对User-Agent的判断给不同的浏览器用户显示不同的页面，这样的维护成本比较高，也失去响应式设计的意义。</li>
<li>2、使用Javascript来使不支持HTML5的浏览器支持HTML标签。目前大多网站采用的这种方式（Bootstrap官方例子也是如此）。</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实还是利用了原生js通过<code>document.createElement(&quot;&quot;)</code>创建对应的标签，CSS选择器便可正确应用到该标签。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用也是相当方便的，考虑到IE9是支持html5的，所以直接在HTML页面的head标签中添加脚本引用即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`&lt;!--[if lt IE 9]&gt;`</span><br><span class="line">      &lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]—&gt;</span><br></pre></td></tr></table></figure>

<p>官方地址：<code>http://code.google.com/p/html5shiv/</code><br>GitHub项目地址：<code>https://github.com/aFarkas/html5shiv</code></p>
]]></content>
      <categories>
        <category>兼容处理</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>html5shiv</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>让ie低版本支持CSS3 Media Query</title>
    <url>/2015/10/26/151026%E8%AE%A9ie%E4%BD%8E%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81CSS3%20Media%20Query/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在响应式开发无疑是在工作当中很必要的，但是众从周知IE系列的兼容性是不敢恭维的，下面大家就来认识一下Respond.js来解决你的苦恼吧。<br>Bootstrap里面就引入了这个js文件，从名字很显然可以看出来是自适应的兼容。打开IE看了一下，效果挺好的，自适应的效果挺好的。Respond.js让不支持CSS3 Media Query的浏览器包括IE6-IE8等其他浏览器支持查询。<a id="more"></a></p>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><ul>
<li>1.把head中所有的<link rel="“sheetstyle”" href="“xx”/">的css路径取出来放入数组</li>
<li>2.然后遍历数组一个个发ajax请求</li>
<li>3.ajax回调后仅分析response中的media query的min-width和max- width语法，分析出viewport变化区间对应相应的css块</li>
<li>4.页面初始化时和window.resize时，根据当前viewport使用相应的css块。<br>使用：考虑到IE9是支持CSS3的，所以直接在HTML页面的head标签中添加脚本引用即可：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`&lt;!--[if lt IE 9]&gt;`</span><br><span class="line">      &lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]—&gt;</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li>官方demo地址：<code>http://scottjehl.github.com/Respond/test/test.html</code></li>
<li>1.在css中正常用 min/max-width media queries</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media screen and (min-width: 480px)&#123;</span><br><span class="line">    ...styles for 480px and up go here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.引入respond.min.js，但要在css的后面（越早引入越好，在ie下面看到页面闪屏的概率就越低，因为最初css会先渲染出来，如果respond.js加载得很后面，这时重新根据media query解析出来的css会再改变一次页面的布局等，所以看起来有闪屏的现象）</li>
</ul>
<blockquote>
<p> 更多了解可以参考<a href="http://caibaojian.com/respondjs.html" target="_blank" rel="noopener">http://caibaojian.com/respondjs.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>兼容处理</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>解析Bootstrap基础模板</title>
    <url>/2015/11/10/151110%E8%A7%A3%E6%9E%90Bootstrap%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<blockquote>
<p>简要分析Bootstrap基础模板中meta标签以及引包依赖关系<img src="/2015/11/10/151110解析Bootstrap基础模板/bootstrap.jpg" alt="bootstrap"><a id="more"></a></p>
</blockquote>
<h2 id="Bootstrap的优势"><a href="#Bootstrap的优势" class="headerlink" title="Bootstrap的优势"></a>Bootstrap的优势</h2><ul>
<li>流媒体网格布局</li>
<li>响应式设计</li>
<li>自定义表单元素</li>
<li>页面排版</li>
<li>JavaScript交互性</li>
<li>跨浏览器兼容性</li>
</ul>
<h2 id="先来看一下官方给出的一个基础模板"><a href="#先来看一下官方给出的一个基础模板" class="headerlink" title="先来看一下官方给出的一个基础模板"></a>先来看一下官方给出的一个基础模板</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</span><br><span class="line">    `&lt;!-- Bootstrap --&gt;`</span><br><span class="line">    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>下面列出其中几个关键点</p>
<h2 id="关于IE"><a href="#关于IE" class="headerlink" title="关于IE"></a>关于IE</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此属性为文档兼容模式声明，表示如果在IE浏览器下则使用最新的标准渲染当前文档</li>
</ul>
<h2 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>视口的作用：在移动浏览器中，当页面宽度超出设备，浏览器内部虚拟的一个页面容器，将页面容器缩放到设备这么大，然后展示</li>
<li>目前大多数手机浏览器的视口（承载页面的容器）宽度都是980；</li>
<li>视口的宽度可以通过meta标签设置</li>
<li>此属性为移动端页面视口设置，当前值表示在移动端页面的宽度为设备的宽度，并且不缩放（缩放级别为1）<ul>
<li>width:视口的宽度</li>
<li>initial-scale：初始化缩放</li>
<li>user-scalable:是否允许用户自行缩放（值：yes/no; 1/0）</li>
<li>minimum-scale:最小缩放，一般设置了用户不允许缩放，就没必要设置最小和最大缩放</li>
<li>maximum-scale:最大缩放</li>
</ul>
</li>
</ul>
<h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>条件注释的作用就是当判断条件满足时，就会执行注释中的HTML代码，不满足时会当做注释忽略掉</li>
</ul>
<h3 id="第三方依赖"><a href="#第三方依赖" class="headerlink" title="第三方依赖"></a>第三方依赖</h3><ul>
<li><p><a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jQuery</a></p>
<blockquote>
<p>Bootstrap框架中的所有JS组件都依赖于jQuery实现</p>
</blockquote>
</li>
<li><p><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">html5shiv</a></p>
<blockquote>
<p>让低版本浏览器可以识别HTML5的新标签，如header、footer、section等</p>
</blockquote>
</li>
<li><p><a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">respond</a></p>
<blockquote>
<p>让低版本浏览器可以支持CSS媒体查询功能</p>
</blockquote>
</li>
</ul>
<h2 id="mediaquery"><a href="#mediaquery" class="headerlink" title="mediaquery"></a>mediaquery</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (判断条件（针对于当前窗口的判断）)&#123;</span><br><span class="line">    <span class="comment">/*这里的代码只有当判断条件满足时才会执行*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="comment">/*这里的代码只有当(min-width: 1280px)满足时才会执行*/</span></span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当使用min-width作为判断条件一定要从小到大，其原因是CSS从上往下执行</li>
</ul>
<h2 id="基础CSS样式"><a href="#基础CSS样式" class="headerlink" title="基础CSS样式"></a>基础CSS样式</h2><ul>
<li><a href="http://v3.bootcss.com/css/#overview" target="_blank" rel="noopener">概要</a></li>
<li><a href="http://v3.bootcss.com/css/#type" target="_blank" rel="noopener">预置排版样式</a><ul>
<li>统一预制标签样式</li>
</ul>
</li>
<li><a href="http://v3.bootcss.com/css/#buttons" target="_blank" rel="noopener">按钮样式</a></li>
<li><a href="http://v3.bootcss.com/css/#tables" target="_blank" rel="noopener">表格样式</a></li>
<li><a href="http://v3.bootcss.com/css/#forms" target="_blank" rel="noopener">表单样式</a></li>
<li><a href="http://v3.bootcss.com/css/#images" target="_blank" rel="noopener">图片样式</a></li>
<li><a href="http://v3.bootcss.com/css/#helper-classes" target="_blank" rel="noopener">辅助工具类</a></li>
<li><a href="http://v3.bootcss.com/css/#code" target="_blank" rel="noopener">代码样式</a></li>
<li><a href="http://v3.bootcss.com/css/#grid" target="_blank" rel="noopener">栅格系统</a><ul>
<li><strong>xs</strong> : 超小屏幕 手机 (&lt;768px)</li>
<li><strong>sm</strong> : 小屏幕 平板 (≥768px)</li>
<li><strong>md</strong> : 中等屏幕 桌面显示器 (≥992px)</li>
<li><strong>lg</strong> : 大屏幕 大桌面显示器 (≥1200px)</li>
</ul>
</li>
<li><a href="http://v3.bootcss.com/css/#responsive-utilities" target="_blank" rel="noopener">响应式工具类</a><ul>
<li><strong>hidden-xx</strong> : 在某种屏幕下隐藏</li>
<li><strong>visible-xx</strong> : 在某种屏幕尺寸下显示</li>
</ul>
</li>
</ul>
<h2 id="预置界面组件"><a href="#预置界面组件" class="headerlink" title="预置界面组件"></a>预置界面组件</h2><ul>
<li><a href="http://v3.bootcss.com/components/#nav" target="_blank" rel="noopener">导航</a></li>
<li><a href="http://v3.bootcss.com/components/#navbar" target="_blank" rel="noopener">导航条</a></li>
<li><a href="http://v3.bootcss.com/components/#breadcrumbs" target="_blank" rel="noopener">面包屑导航</a></li>
<li><a href="http://v3.bootcss.com/components/#dropdowns" target="_blank" rel="noopener">下拉菜单</a></li>
<li><a href="http://v3.bootcss.com/components/#btn-dropdowns" target="_blank" rel="noopener">按钮式下拉菜单</a></li>
<li><a href="http://v3.bootcss.com/components/#btn-groups" target="_blank" rel="noopener">按钮组</a></li>
<li><a href="http://v3.bootcss.com/components/#input-groups" target="_blank" rel="noopener">输入框组</a></li>
<li><a href="http://v3.bootcss.com/components/#alerts" target="_blank" rel="noopener">警告框</a></li>
<li><a href="http://v3.bootcss.com/components/#page-header" target="_blank" rel="noopener">页头</a></li>
<li><a href="http://v3.bootcss.com/components/#pagination" target="_blank" rel="noopener">分页</a></li>
<li><a href="http://v3.bootcss.com/components/#list-group" target="_blank" rel="noopener">列表组</a></li>
<li><a href="http://v3.bootcss.com/components/#panels" target="_blank" rel="noopener">面板</a></li>
<li><a href="http://v3.bootcss.com/components/#media" target="_blank" rel="noopener">媒体对象</a></li>
<li><a href="http://v3.bootcss.com/components/#progress" target="_blank" rel="noopener">进度条</a></li>
<li><a href="http://v3.bootcss.com/components/#glyphicons" target="_blank" rel="noopener">Glyphicons</a></li>
<li><a href="http://v3.bootcss.com/components/#labels" target="_blank" rel="noopener">标签</a></li>
<li><a href="http://v3.bootcss.com/components/#badges" target="_blank" rel="noopener">徽章</a></li>
<li><a href="http://v3.bootcss.com/components/#thumbnails" target="_blank" rel="noopener">缩略图</a></li>
<li><a href="http://v3.bootcss.com/components/#jumbotron" target="_blank" rel="noopener">大屏幕</a></li>
<li><a href="http://v3.bootcss.com/components/#responsive-embed" target="_blank" rel="noopener">嵌入内容</a></li>
<li><a href="http://v3.bootcss.com/components/#wells" target="_blank" rel="noopener">内嵌</a></li>
</ul>
<h2 id="JavaScript插件"><a href="#JavaScript插件" class="headerlink" title="JavaScript插件"></a>JavaScript插件</h2><h3 id="JavaScript插件的依赖情况"><a href="#JavaScript插件的依赖情况" class="headerlink" title="JavaScript插件的依赖情况"></a>JavaScript插件的依赖情况</h3><h3 id="如何使用Javascript插件"><a href="#如何使用Javascript插件" class="headerlink" title="如何使用Javascript插件"></a>如何使用Javascript插件</h3><h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><ul>
<li><a href="http://v3.bootcss.com/javascript/#modals" target="_blank" rel="noopener">模态对话框</a></li>
<li><a href="http://v3.bootcss.com/javascript/#dropdowns" target="_blank" rel="noopener">下拉菜单</a></li>
<li><a href="http://v3.bootcss.com/javascript/#scrollspy" target="_blank" rel="noopener">滚动监听</a></li>
<li><a href="http://v3.bootcss.com/javascript/#tabs" target="_blank" rel="noopener">标签页</a></li>
<li><a href="http://v3.bootcss.com/javascript/#tooltips" target="_blank" rel="noopener">工具提示</a></li>
<li><a href="http://v3.bootcss.com/javascript/#popovers" target="_blank" rel="noopener">弹出框</a></li>
<li><a href="http://v3.bootcss.com/javascript/#alerts" target="_blank" rel="noopener">警告框</a></li>
<li><a href="http://v3.bootcss.com/javascript/#buttons" target="_blank" rel="noopener">按钮</a></li>
<li><a href="http://v3.bootcss.com/javascript/#collapse" target="_blank" rel="noopener">折叠面板</a></li>
<li><a href="http://v3.bootcss.com/javascript/#carousel" target="_blank" rel="noopener">轮播图</a></li>
<li><a href="http://v3.bootcss.com/javascript/#affix" target="_blank" rel="noopener">吸顶效果</a><ul>
<li>data-spy=”affix”</li>
<li>data-offset-top=”什么位置出现”</li>
<li>data-offset-bottom=”什么位置消失”</li>
</ul>
</li>
</ul>
<h2 id="深度自定义-Bootstrap"><a href="#深度自定义-Bootstrap" class="headerlink" title="深度自定义 Bootstrap"></a>深度自定义 Bootstrap</h2><h3 id="在线自定义"><a href="#在线自定义" class="headerlink" title="在线自定义"></a>在线自定义</h3><ul>
<li><a href="http://getbootstrap.com/customize/" target="_blank" rel="noopener">官网在线</a></li>
<li><a href="http://v3.bootcss.com/customize/" target="_blank" rel="noopener">中文网在线</a></li>
</ul>
<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><h3 id="LESS语言"><a href="#LESS语言" class="headerlink" title="LESS语言"></a>LESS语言</h3><ul>
<li><a href="http://lesscss.org/" target="_blank" rel="noopener">官方文档</a></li>
<li><a href="http://lesscss.cn/" target="_blank" rel="noopener">中文文档</a></li>
</ul>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>windows查看端口占用以及关闭相应的进程</title>
    <url>/2015/11/08/151108windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%85%B3%E9%97%AD%E7%9B%B8%E5%BA%94%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在开发的时候，难免有时候我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，很多人都比较头疼，下面就介绍一种非常简单的方法，就拿最常见的一个8080端口占用来说： <a id="more"></a></p>
<h2 id="1-Windows平台"><a href="#1-Windows平台" class="headerlink" title="1.Windows平台"></a>1.Windows平台</h2><h3 id="打开命令行"><a href="#打开命令行" class="headerlink" title="打开命令行"></a>打开命令行</h3><ol>
<li>直接按上<code>shift</code>再加上鼠标右键</li>
<li>开始–运行–<code>cmd</code> 进入命令提示符</li>
</ol>
<h3 id="查看所有端口占用情况"><a href="#查看所有端口占用情况" class="headerlink" title="查看所有端口占用情况"></a>查看所有端口占用情况</h3><p>在命令行输入<code>netstat -ano</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C:\Users\lsqy\Desktop&gt;netstat -ano</span><br><span class="line"></span><br><span class="line">活动连接</span><br><span class="line"></span><br><span class="line">  协议    本地地址                外部地址              状态           PID</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       84</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:623            0.0.0.0:0              LISTENING       10264</span><br><span class="line">  TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:5366           0.0.0.0:0              LISTENING       2756</span><br><span class="line">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       5868</span><br><span class="line">  TCP    0.0.0.0:16992          0.0.0.0:0              LISTENING       10264</span><br><span class="line">  TCP    0.0.0.0:27017          0.0.0.0:0              LISTENING       3964</span><br><span class="line">  TCP    172.21.10.135:65448    182.254.78.139:80      ESTABLISHED     19524</span><br><span class="line">  TCP    [::]:135               [::]:0                 LISTENING       84</span><br><span class="line">  TCP    [::]:445               [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:623               [::]:0                 LISTENING       10264</span><br><span class="line">  TCP    [::]:5357              [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:8080              [::]:0                 LISTENING       5868</span><br><span class="line">  TCP    [::]:16992             [::]:0                 LISTENING       10264</span><br><span class="line">  TCP    [::]:49664             [::]:0                 LISTENING       708</span><br><span class="line">  TCP    [::]:49665             [::]:0                 LISTENING       1064</span><br><span class="line">  TCP    [::]:49673             [::]:0                 LISTENING       2840</span><br><span class="line">  TCP    [::]:49674             [::]:0                 LISTENING       876</span><br><span class="line">  TCP    [::]:49677             [::]:0                 LISTENING       952</span><br><span class="line">  TCP    [::]:49712             [::]:0                 LISTENING       856</span><br><span class="line">  TCP    [::1]:50170            [::]:0                 LISTENING       10312</span><br><span class="line">  TCP    [::1]:59262            [::1]:59264            ESTABLISHED     10264</span><br><span class="line">  TCP    [::1]:59264            [::1]:59262            ESTABLISHED     10264</span><br><span class="line">  UDP    0.0.0.0:123            *:*                                    520</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    520</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    2464</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    1628</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    520</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    2464</span><br><span class="line">  UDP    0.0.0.0:3702           *:*                                    1628</span><br><span class="line">  UDP    0.0.0.0:4003           *:*                                    14804</span><br><span class="line">  UDP    [fe80::b1ec:1ffd:410:3856%15]:1900  *:*                                    2464</span><br><span class="line">  UDP    [fe80::b1ec:1ffd:410:3856%15]:2177  *:*                                    2464</span><br><span class="line">  UDP    [fe80::b1ec:1ffd:410:3856%15]:52081  *:*                                    2464</span><br></pre></td></tr></table></figure>

<h2 id="2-查看指定端口占用情况"><a href="#2-查看指定端口占用情况" class="headerlink" title="2.查看指定端口占用情况"></a>2.查看指定端口占用情况</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\lsqy\Desktop&gt;netstat -ano|findstr &quot;8080&quot;</span><br><span class="line">  协议    本地地址                外部地址              状态           PID</span><br><span class="line">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       5868</span><br><span class="line">  TCP    [::]:8080              [::]:0                 LISTENING       5868</span><br></pre></td></tr></table></figure>

<p>可以很显然的看到这个端口是被5868的进程占用</p>
<h3 id="3-查看pid对应的进程"><a href="#3-查看pid对应的进程" class="headerlink" title="3.查看pid对应的进程"></a>3.查看pid对应的进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\lsqy\Desktop&gt;tasklist|findstr &quot;5868&quot;</span><br><span class="line">node.exe                      5868 Console                   13     12,600 K</span><br></pre></td></tr></table></figure>

<p>这样可以知道是node占用了端口</p>
<h3 id="4-结束该进程"><a href="#4-结束该进程" class="headerlink" title="4.结束该进程"></a>4.结束该进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\lsqy\Desktop&gt;taskkill /f /t /im node.exe</span><br><span class="line">成功: 已终止 PID 7280 (属于 PID 2068 子进程)的进程。</span><br><span class="line">成功: 已终止 PID 2068 (属于 PID 20712 子进程)的进程。</span><br><span class="line">成功: 已终止 PID 5868 (属于 PID 9144 子进程)的进程。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>bash常见命令</title>
    <url>/2015/12/05/151205bash%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="bash命令格式"><a href="#bash命令格式" class="headerlink" title="bash命令格式"></a>bash命令格式</h2><p><code>命令 [-options] [参数]</code>，如：<code>tar  zxvf  demo.tar.gz</code><br>查看帮助：<code>命令 --help</code></p>
<h2 id="bash常见命令"><a href="#bash常见命令" class="headerlink" title="bash常见命令"></a>bash常见命令</h2><ul>
<li><code>pwd (Print Working Directory)</code> 查看当前目录</li>
<li><code>cd (Change Directory)`` 切换目录，如</code>cd /etc`</li>
<li><code>ls (List)`` 查看当前目录下内容，如</code>ls -al`</li>
<li><code>mkdir (Make Directory)`` 创建目录，如</code>mkdir blog`</li>
<li><code>touch</code> 创建文件，如 <code>touch index.html</code></li>
<li><code>cat</code> 查看文件全部内容，如 <code>cat index.html</code></li>
<li><code>more less</code> 查看文件，如<code>more /etc/passwd</code>、<code>less /etc/passwd</code></li>
<li><code>rm (remove)`` 删除文件，如</code>rm index.html<code>、</code>rm -rf  blog`</li>
<li><code>rmdir (Remove Directory)`` 删除文件夹，只能删除空文件夹，不常用</code>（rm –r  temp/ <code>递归删除  - `rm –rf  temp/</code> 强行递归直接删除很危险）</li>
<li><code>mv (move)`` 移动文件或重命名，如</code>mv index.html<code></code>./demo/index.html`</li>
<li><code>cp (copy)`` 复制文件，</code>cp index.html<code></code>./demo/index.html`</li>
<li><code>head</code> 查看文件前几行，如 <code>head -5 index.html</code></li>
<li><code>tail</code> 查看文件后几行 –n –f，如 <code>tail index.html</code>、<code>tail -f -n 5 index.html</code> （实时，错误日志）</li>
<li><code>tab</code> 自动补全，连按两次会将所有匹配内容显示出来（筛选）</li>
<li><code>history</code> 查看操作历史</li>
<li><code>ssh</code> 远程登录，如<code>ssh root@gitlab.study.com</code></li>
<li><code>&gt;</code> 和 <code>&gt;&gt;</code>重定向，如<code>echo hello world! &gt; README.md</code>，<code>&gt;</code>表示覆盖 <code>&gt;&gt;</code>表示追加</li>
<li><code>wget</code> 下载，如<code>wget https://nodejs.org/dist/v4.4.0/node-v4.4.0.tar.gz</code></li>
<li><code>tar</code> 解压缩，如<code>tar zxvf node-v4.4.0.tar.gz</code></li>
<li><code>curl</code> 网络请求，如<code>curl http://www.baidu.com</code></li>
<li><code>whoami</code> 查看当前用户</li>
<li>`|`` 管道符</li>
<li><code>grep</code> 匹配内容，一般结合管道符使用</li>
</ul>
]]></content>
      <categories>
        <category>后端知识</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装nvm来管理Node</title>
    <url>/2016/01/20/160120CentOS%E5%AE%89%E8%A3%85nvm%E6%9D%A5%E7%AE%A1%E7%90%86Node/</url>
    <content><![CDATA[<p><strong>NVM（Node version manager）</strong>顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码在GitHub；如果你想长期做 node 开发, 或者想快速更新 node 版本, 或者想快速切换 node 版本,那么在非 Windows(如 osx, linux) 环境下, 请使用 nvm 来安装你的 node 开发环境, 保持系统的干净.如果你使用 Windows 做开发, 那么你可以使用 <strong>nvmw</strong> 来替代 <strong>nvm</strong>. <a id="more"></a></p>
<h2 id="获取nvm源码"><a href="#获取nvm源码" class="headerlink" title="获取nvm源码"></a>获取nvm源码</h2><p>1、直接从 github 找到最新版本通过wget下载到本地wget <code>https://github.com/cnpm/nvm/archive/v0.23.0.tar.gz</code>;<br>2、或者直接克隆到本地通过<code>git clone https://github.com/cnpm/nvm.git</code>;</p>
<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>1、安装nvm非常简单，只要解压后进入目录然后执行<code>./install.sh</code>然后<code>source ~/.bash_profile</code>。<br>2、也可以手动配置终端启动时自动执行 <code>source /opt/wget/nvm-0.23.0/nvm.sh</code>,在 <code>~/.bashrc``, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc</code>文件添加命令:<br>重新打开你的终端, 输入 <code>nvm</code>。</p>
<h2 id="通过nvm安装管理nodejs"><a href="#通过nvm安装管理nodejs" class="headerlink" title="通过nvm安装管理nodejs"></a>通过nvm安装管理nodejs</h2><p>1、列出所有可安装的版本<code>nvm list-remote</code>;<br>2、安装相应的版本使用<code>nvm install v4.6.0</code>；还可以直接安装 iojs 各个版本;<br>3、查看一下你当前已经安装的版本:<code>nvm ls</code>;<br>4、切换版本；<code>nvm use v4.6.0</code>;<br>5、设置默认版本 <code>nvm alias default v4.6.0</code>;<br>注意：具体操作很简单，使用帮助通过<code>nvm help</code>;</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>NodeJS</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>前端组件库大合集</title>
    <url>/2015/12/13/151213%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93%E5%A4%A7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这是一个较为全面的组件库，里面罗列了很多不错的框架以及组件，很值得参考和学习，跟大家一起分享学习!<br>里面共有以下分类：</p>
<ul>
<li>前端自动化</li>
<li>前端框架</li>
<li>JavaScript 框架汇总</li>
<li>UI组件库</li>
<li>基础模板</li>
<li>排版</li>
<li>网格系统</li>
<li>H5 API应用</li>
<li>UA识别</li>
<li>表单处理</li>
<li>图表绘制</li>
<li>日期格式化</li>
<li>页面交互</li>
<li>代码高亮插件</li>
<li>UI Icon组件</li>
<li>动画</li>
<li>本地存储</li>
<li>模板引擎</li>
<li>通知组件、弹框组件</li>
<li>提示控件</li>
<li>对话框、弹出层</li>
<li>文档、表格</li>
<li>目录树插件</li>
<li>Ajax模块</li>
<li>音频、视频</li>
<li>按钮</li>
<li>富文本编辑器</li>
<li>内容提取</li>
<li>颜色（CSS Colors）/SVG</li>
<li>实用工具/其他插件</li>
</ul>
<p>想看这些内容戳这里就可以了<a href="http://www.xuanfengge.com/he-sets-the-front-end-component-library-the-essential-collection.html" target="_blank" rel="noopener">大合集</a></p>
]]></content>
      <categories>
        <category>前端组件</category>
      </categories>
      <tags>
        <tag>前端组件</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs监控工具-nodemon</title>
    <url>/2016/01/28/160128NodeJs%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-nodemon/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;相信大家在开发Node.js应用的的时候，都遇到了一个挺让人烦恼的事情，就是每次即使只是小小的修改了一下子代码，那么也得再重新<code>Crtl+c</code>退出来重启，不像在开发php，java等web项目的时候，修改了项目代码，服务器都会自动重启，让我们的改动生效，好在有大神开发了自动重启的工具——nodemon！推荐给大家</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Nodemon 是一款非常实用的工具，用来监控你 node.js 源代码的任何变化和自动重启你的服务器。 Nodemon 是一款完美的开发工具，可以使用 npm 安装。</p>
<h2 id="安装也是非常简单，只需下面一步即可"><a href="#安装也是非常简单，只需下面一步即可" class="headerlink" title="安装也是非常简单，只需下面一步即可"></a>安装也是非常简单，只需下面一步即可</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nodemon 文件名.js</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop&gt;nodemon 04_staticServer.js</span><br><span class="line">[nodemon] 1.9.2</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting `node 04_staticServer.js`</span><br><span class="line">server is runnig at port 3000</span><br></pre></td></tr></table></figure>

<p>如果想获得帮助信息，只需<code>nodemon -h</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop&gt;nodemon -h</span><br><span class="line">  Usage: nodemon [options] [script.js] [args]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">  -e, --ext ................ extensions to look for, ie. js,jade,hbs.</span><br><span class="line">  -x, --exec app ........... execute script with &quot;app&quot;, ie. -x &quot;python -v&quot;.</span><br><span class="line">  -w, --watch dir........... watch directory &quot;dir&quot; or files. use once for</span><br><span class="line">                             each directory or file to watch.</span><br><span class="line">  -i, --ignore ............. ignore specific files or directories.</span><br><span class="line">  -q, --quiet .............. minimise nodemon messages to start/stop only.</span><br><span class="line">  -V, --verbose ............ show detail on what is causing restarts.</span><br><span class="line">  -I, --no-stdin ........... don&apos;t try to read from stdin.</span><br><span class="line">  -C, --on-change-only ..... execute script on change only, not startup</span><br><span class="line">  --no-colors .............. disable color output</span><br><span class="line">  -d, --delay n ............ debounce restart for &quot;n&quot; seconds.</span><br><span class="line">  --exitcrash .............. exit on crash, allows use of nodemon with daemon</span><br><span class="line">                             tools like forever.js.</span><br><span class="line">  -v, --version ............ current nodemon version.</span><br><span class="line">  -h, --help ............... you&apos;re looking at it.</span><br><span class="line">  --help &lt;topic&gt; ........... help on a specific feature. Try &quot;--help topics&quot;.</span><br><span class="line">  -- &lt;your args&gt; ........... to tell nodemon stop slurping arguments.</span><br><span class="line"></span><br><span class="line">  Note: if the script is omitted, nodemon will try to read &quot;main&quot; from</span><br><span class="line">  package.json and without a nodemon.json, nodemon will monitor .js, .coffee,</span><br><span class="line">  and .litcoffee by default.</span><br><span class="line"></span><br><span class="line">  To learn more about nodemon.json config: nodemon --help config</span><br><span class="line">  See also the sample: https://github.com/remy/nodemon/wiki/Sample-nodemon.json</span><br><span class="line"></span><br><span class="line">  Examples:</span><br><span class="line"></span><br><span class="line">  $ nodemon server.js</span><br><span class="line">  $ nodemon -w ../foo server.js apparg1 apparg2</span><br><span class="line">  $ PORT=8000 nodemon --debug-brk server.js</span><br><span class="line">  $ nodemon --exec python app.py</span><br><span class="line">  $ nodemon --exec &quot;make build&quot; -e &quot;styl hbs&quot;</span><br><span class="line">  $ nodemon app.js -- -v</span><br><span class="line"></span><br><span class="line">  For more details see http://github.com/remy/nodemon/</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;有了这个自动监控重启无疑会提高自己的开发效率,让我们更方便的programming，如果想了解更多，可以访问其<a href="http://nodemon.io/" target="_blank" rel="noopener">官网</a>;</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>在本地模拟一个git远程仓库</title>
    <url>/2016/02/10/160210%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E4%B8%80%E4%B8%AAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%82%A8/</url>
    <content><![CDATA[<blockquote>
<p>在本地搭建一个仓库来模拟git的远程仓库，主要是帮助理解一下git作为一个版本控制器的实现过程<a id="more"></a></p>
</blockquote>
<h3 id="创建一个本地共享仓库"><a href="#创建一个本地共享仓库" class="headerlink" title="创建一个本地共享仓库"></a>创建一个本地共享仓库</h3><p>首先我们要知道一下git要求共享仓库是一个以.git结尾的目录。<br>所以我们第一步先新建一个这样的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ mkdir repo.git # 创建以.git结尾目录</span><br><span class="line"></span><br><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ cd repo.git # 进入这个目录</span><br><span class="line"></span><br><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/repo.git</span><br><span class="line">$ git init --bare # 初始化一个共享仓库，也叫裸仓库 注意选项--bare</span><br><span class="line">Initialized empty Git repository in C:/Users/92816/Desktop/在本地模拟远程仓库/repo.git/</span><br></pre></td></tr></table></figure>

<p>这样就建好了一个共享的仓库，但这时这个仓库是一个空的仓库;其实在远端的也是这个原理，比如我们在github上初始化了一个仓库，也相当于这里的<code>repo.git</code>,这样接下来就可以把它当成一个远端来进行了</p>
<h3 id="创建一个本地的测试仓库"><a href="#创建一个本地的测试仓库" class="headerlink" title="创建一个本地的测试仓库"></a>创建一个本地的测试仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/repo.git (BARE:master)</span><br><span class="line">$ cd ../</span><br></pre></td></tr></table></figure>

<h3 id="创建一个test1测试目录"><a href="#创建一个test1测试目录" class="headerlink" title="创建一个test1测试目录"></a>创建一个test1测试目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ mkdir test1</span><br></pre></td></tr></table></figure>

<h3 id="创建一个test1测试目录-1"><a href="#创建一个test1测试目录-1" class="headerlink" title="创建一个test1测试目录"></a>创建一个test1测试目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ cd ./test1/</span><br></pre></td></tr></table></figure>

<h3 id="创建一个demo01-js文件，touch是bash操作命令-可以创建一个文件"><a href="#创建一个demo01-js文件，touch是bash操作命令-可以创建一个文件" class="headerlink" title="创建一个demo01.js文件，touch是bash操作命令,可以创建一个文件"></a>创建一个demo01.js文件，<code>touch</code>是<code>bash</code>操作命令,可以创建一个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1</span><br><span class="line">$ touch demo01.js</span><br></pre></td></tr></table></figure>

<h3 id="通过vi编辑器简单编辑了一下，当然你也可以拿一个现成的文件"><a href="#通过vi编辑器简单编辑了一下，当然你也可以拿一个现成的文件" class="headerlink" title="通过vi编辑器简单编辑了一下，当然你也可以拿一个现成的文件"></a>通过vi编辑器简单编辑了一下，当然你也可以拿一个现成的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1</span><br><span class="line">$ vi demo01.js</span><br></pre></td></tr></table></figure>

<h3 id="通过cat查看文件里的内容"><a href="#通过cat查看文件里的内容" class="headerlink" title="通过cat查看文件里的内容"></a>通过cat查看文件里的内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1</span><br><span class="line">$ cat demo01.js </span><br><span class="line">这是第一次创建的demo # 这是demo01.js里的内容</span><br></pre></td></tr></table></figure>

<h3 id="将test1这个测试目录初始化一下，以便进行git相关操作"><a href="#将test1这个测试目录初始化一下，以便进行git相关操作" class="headerlink" title="将test1这个测试目录初始化一下，以便进行git相关操作"></a>将test1这个测试目录初始化一下，以便进行git相关操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in C:/Users/92816/Desktop/在本地模拟远程仓库/test1/.git/</span><br></pre></td></tr></table></figure>

<h3 id="将test1中的文件提交到缓存区"><a href="#将test1中的文件提交到缓存区" class="headerlink" title="将test1中的文件提交到缓存区"></a>将test1中的文件提交到缓存区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ git add .</span><br><span class="line">warning: LF will be replaced by CRLF in demo01.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure>

<h3 id="提交一下描述信息"><a href="#提交一下描述信息" class="headerlink" title="提交一下描述信息"></a>提交一下描述信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ git commit -m &quot;test&quot;</span><br><span class="line">[master (root-commit) 891fe92] test</span><br><span class="line">warning: LF will be replaced by CRLF in demo01.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 demo01.js</span><br></pre></td></tr></table></figure>

<h3 id="推送到本地模拟的共享仓库-repo-git的master分支当中"><a href="#推送到本地模拟的共享仓库-repo-git的master分支当中" class="headerlink" title="推送到本地模拟的共享仓库  repo. git的master分支当中"></a>推送到本地模拟的共享仓库  <code>repo. git</code>的<code>master</code>分支当中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ git push ../repo.git/ master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 234 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To ../repo.git/</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">git push ../repo.git master</span><br></pre></td></tr></table></figure>

<h3 id="回退到上一级"><a href="#回退到上一级" class="headerlink" title="回退到上一级"></a>回退到上一级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ cd ../</span><br></pre></td></tr></table></figure>

<h3 id="将repo-git-克隆到test2当中，因为目录当中没有test2这个目录，会直接新建一个test2目录"><a href="#将repo-git-克隆到test2当中，因为目录当中没有test2这个目录，会直接新建一个test2目录" class="headerlink" title="将repo. git 克隆到test2当中，因为目录当中没有test2这个目录，会直接新建一个test2目录"></a>将repo. git 克隆到test2当中，因为目录当中没有test2这个目录，会直接新建一个test2目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ git clone ./repo.git/ test2</span><br><span class="line">Cloning into &apos;test2&apos;...</span><br><span class="line">done.</span><br></pre></td></tr></table></figure>

<h3 id="进入到test2目录当中"><a href="#进入到test2目录当中" class="headerlink" title="进入到test2目录当中"></a>进入到test2目录当中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ cd ./test2</span><br></pre></td></tr></table></figure>

<h3 id="通过ls命令列出test2目录，可以看出里面已经有d-emo01-js这个文件了，也就是已经复制过来了"><a href="#通过ls命令列出test2目录，可以看出里面已经有d-emo01-js这个文件了，也就是已经复制过来了" class="headerlink" title="通过ls命令列出test2目录，可以看出里面已经有d  emo01.js这个文件了，也就是已经复制过来了"></a>通过<code>ls</code>命令列出test2目录，可以看出里面已经有d  emo01.js这个文件了，也就是已经复制过来了</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ ls</span><br><span class="line">demo01.js</span><br></pre></td></tr></table></figure>

<h3 id="通过vi编辑器打开-demo01-js文件，进行了一下修改，添加了“在test2中进行了内容修改”这样一段话"><a href="#通过vi编辑器打开-demo01-js文件，进行了一下修改，添加了“在test2中进行了内容修改”这样一段话" class="headerlink" title="通过vi编辑器打开  demo01.js文件，进行了一下修改，添加了“在test2中进行了内容修改”这样一段话"></a>通过vi编辑器打开  demo01.js文件，进行了一下修改，添加了“在test2中进行了内容修改”这样一段话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ vi demo01.js</span><br><span class="line"></span><br><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ cat demo01.js</span><br><span class="line">这是第一次创建的demo</span><br><span class="line">在test2中进行了内容修改</span><br></pre></td></tr></table></figure>

<h3 id="可以通过git-status来查看一下当前的文件状态"><a href="#可以通过git-status来查看一下当前的文件状态" class="headerlink" title="可以通过git status来查看一下当前的文件状态"></a>可以通过<code>git status</code>来查看一下当前的文件状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   demo01.js # 提示文件已经更改了</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="将更改的demo01-js文件添加到缓存区"><a href="#将更改的demo01-js文件添加到缓存区" class="headerlink" title="将更改的demo01. js文件添加到缓存区"></a>将更改的demo01. js文件添加到缓存区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ git add demo01.js</span><br></pre></td></tr></table></figure>

<h3 id="提交一下描述信息-1"><a href="#提交一下描述信息-1" class="headerlink" title="提交一下描述信息"></a>提交一下描述信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ git commit -m &quot;test&quot;</span><br><span class="line">[master 205e461] test</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<h3 id="将其推送到-repo-git的master分支当中"><a href="#将其推送到-repo-git的master分支当中" class="headerlink" title="将其推送到 repo. git的master分支当中"></a>将其推送到 <code>repo. git</code>的<code>master</code>分支当中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test2 (master)</span><br><span class="line">$ git push ../repo.git/ master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 295 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To ../repo.git/</span><br><span class="line">   891fe92..205e461  master -&gt; master</span><br></pre></td></tr></table></figure>

<h3 id="进入到test1目录"><a href="#进入到test1目录" class="headerlink" title="进入到test1目录"></a>进入到test1目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库</span><br><span class="line">$ cd ./test1</span><br></pre></td></tr></table></figure>

<h3 id="从共享仓库中将内容拉回来"><a href="#从共享仓库中将内容拉回来" class="headerlink" title="从共享仓库中将内容拉回来"></a>从共享仓库中将内容拉回来</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ git pull ../repo.git/ master</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From ../repo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Updating 891fe92..205e461</span><br><span class="line">Fast-forward</span><br><span class="line"> demo01.js | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<h3 id="再次查看现在的demo01-js，你会发现在test2中修改的内容已经在test1中了"><a href="#再次查看现在的demo01-js，你会发现在test2中修改的内容已经在test1中了" class="headerlink" title="再次查看现在的demo01. js，你会发现在test2中修改的内容已经在test1中了"></a>再次查看现在的demo01. js，你会发现在test2中修改的内容已经在test1中了</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">92816@MrLiu MINGW64 ~/Desktop/在本地模拟远程仓库/test1 (master)</span><br><span class="line">$ cat demo01.js</span><br><span class="line">这是第一次创建的demo</span><br><span class="line">在test2中进行了内容修改</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这样就实现了test2中的修改能够在test1中体现出来了，也就是达到了同步的效用，其实在项目当中，这里模拟的共享仓库就是服务器上部署的仓库，步骤也都差不多，就是不管你哪一个人在自己的本地仓库中进行的修改，你通过<code>git add .或者文件名</code>现将其到缓存区，然后在<code>git commit -m 描述信息</code>，然后再<code>git push ../repo.git/ master</code>就能推送到远端了，这样另一个同事只需要<code>git pull ../repo.git/ master</code>就可以将这个共享仓库中改变的部分拉下来，实现同步功能,总归来说，一般我们用的远端仓库只不过是放在服务器上，可以从外网访问而已。</p>
<blockquote>
<p>注意点：我们如果想要利用git进行版本控制，就一定注意需要将现有项目初始化为一个仓库，也就是通过<code>git init</code>或者将一个已有的使用git进行版本控制的仓库克隆到本地<code>git clone 仓库地址</code>，其实这个也不难理解，只有这样git才能知道它要操作的文件，以后就直接可以使用git的相关命令了</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>原生数组方法</title>
    <url>/2016/02/15/160215%E5%8E%9F%E7%94%9F%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Mutator-方法"><a href="#Mutator-方法" class="headerlink" title="Mutator 方法"></a>Mutator 方法</h2><p>即下面的这些方法会改变调用它们的对象自身的值：</p>
<ul>
<li>Array.prototype.copyWithin() <strong>ES6</strong><br>在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。</li>
<li>Array.prototype.fill() <strong>ES6</strong><br>将数组中指定区间的所有元素的值，都替换成某个固定的值。</li>
<li>Array.prototype.pop()<br>删除数组的最后一个元素，并返回这个元素。</li>
<li>Array.prototype.push()<br>在数组的末尾增加一个或多个元素，并返回数组的新长度。</li>
<li>Array.prototype.reverse()<br>颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</li>
<li>Array.prototype.shift()<br>删除数组的第一个元素，并返回这个元素。</li>
<li>Array.prototype.sort()<br>对数组元素进行排序，并返回当前数组。</li>
<li>Array.prototype.splice()<br>在任意的位置给数组添加或删除任意个元素。</li>
<li>Array.prototype.unshift()<br>在数组的开头增加一个或多个元素，并返回数组的新长度。</li>
</ul>
<h2 id="Accessor-方法"><a href="#Accessor-方法" class="headerlink" title="Accessor 方法"></a>Accessor 方法</h2><p>下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。</p>
<ul>
<li>Array.prototype.concat()<br>返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。</li>
<li>Array.prototype.includes() <strong>ES6</strong><br>判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</li>
<li>Array.prototype.join()<br>连接所有数组元素组成一个字符串。</li>
<li>Array.prototype.slice()<br>抽取当前数组中的一段元素组合成一个新数组。</li>
<li>Array.prototype.toSource()<br>返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 Object.prototype.toSource() 方法。</li>
<li>Array.prototype.toString()<br>返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。</li>
<li>Array.prototype.toLocaleString()<br>返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。</li>
<li>Array.prototype.indexOf()<br>返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>
<li>Array.prototype.lastIndexOf()<br>返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>
</ul>
<h2 id="Iteration-方法"><a href="#Iteration-方法" class="headerlink" title="Iteration 方法"></a>Iteration 方法</h2><p>在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在回调函数执行之前，数组的长度会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。</p>
<ul>
<li>Array.prototype.forEach()<br>为数组中的每个元素执行一次回调函数。</li>
<li>Array.prototype.entries()  <strong>ES6</strong><br>返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。</li>
<li>Array.prototype.every()<br>如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。</li>
<li>Array.prototype.some()<br>如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</li>
<li>Array.prototype.filter()<br>将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</li>
<li>Array.prototype.find() <strong>ES6</strong><br>找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。</li>
<li>Array.prototype.findIndex()  <strong>ES6</strong><br>找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</li>
<li>Array.prototype.keys() <strong>ES6</strong><br>返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。</li>
<li>Array.prototype.map()<br>返回一个由回调函数的返回值组成的新数组。</li>
<li>Array.prototype.reduce()<br>从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</li>
<li>Array.prototype.reduceRight()<br>从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</li>
<li>Array.prototype.values() <strong>ES6</strong><br>返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。</li>
<li>Array.prototype<a href>@@iterator</a> <strong>ES6</strong><br>和上面的 values() 方法是同一个函数。</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS入门系列一之先从Javascript说起</title>
    <url>/2016/02/28/160228NodeJS%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%80/</url>
    <content><![CDATA[<h2 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h2><ul>
<li>Javascript是一种动态类型、弱类型、基于原型的语言。</li>
<li>Javascript是一种脚本语言<ul>
<li>脚本语言是不需要提前编译的语言</li>
<li>是在运行时动态的编译和解析执行的，所以也叫做动态语言</li>
<li>还有一种语言叫作：静态语言（静态语言是需要经过编译之后才能执行），这也是它们两者的区别</li>
</ul>
</li>
<li>Javascript运行在浏览器（这里暂时这样写，后面介绍了NodeJS后就知道Javascript不仅仅能运行在浏览器上</li>
<li>暂时可以说Javascript是一种运行在浏览器中的脚本语言</li>
</ul>
<h2 id="JavaScript-的运行环境"><a href="#JavaScript-的运行环境" class="headerlink" title="JavaScript 的运行环境"></a>JavaScript 的运行环境</h2><ul>
<li>对于初学者可能想当然说是浏览器</li>
<li>其实理论意义上，JavaScript是运行在浏览器中的Javascript解析引擎中，这也是后面NodeJS可以运行Javascript的原因，下面再进行详细介绍</li>
</ul>
<h2 id="浏览器中的-JavaScript-可以做什么"><a href="#浏览器中的-JavaScript-可以做什么" class="headerlink" title="浏览器中的 JavaScript 可以做什么"></a>浏览器中的 JavaScript 可以做什么</h2><ul>
<li>从 JavaScript 语言角度来说：其实是ECMAScript 规定了 JavaScript 脚本的核心语法，如 数据类型、关键字、保留字、运算符、对象和语句等，它不属于任何浏览器。<ul>
<li>ECMAScript 3（当前使用较多的其实还在这个层面，因为涉及到兼容性的问题）</li>
<li>ECMAScript 5（现在用户也逐步在慢慢增多）</li>
<li>ECMAScript 6（2015年发布，添加了很多更加方便的规范，使Jascript更加强大了）</li>
</ul>
</li>
<li>DOM操作<ul>
<li>DOM 是“ Document Object Model ”的缩写，简称“ 文件对象模型 ”，由W3C制定规范</li>
<li>DOM 定义了 JavaScript 操作 HTML 文档的接口，提供了访问 HTML 文档（如body、form、div、textarea等）的途径以及操作方法，浏览器载入 HTML 文档后，将整个文档规划成由节点构成的节点树，文档中每个部分都是一个节点</li>
<li>这也是Javascript使用最为广泛的，通过DOM操作能够让浏览器渲染出各种炫酷的界面，并能完成很多业务逻辑</li>
</ul>
</li>
<li>BOM操作<ul>
<li>BOM 是”Browser Object Model“的缩写，简称“浏览器对象模型”</li>
<li>BOM 定义了 JavaScript 操作浏览器的接口，提供了访问某些功能（如浏览器窗口大小、版本信息、浏览历史记录等）的途径以及操作方法，其实这些接口都是通过中间层通过硬件层面开放给程序员的接口，也是得益于这些接口我们可以高效的进行开发</li>
<li>遗憾的是，BOM 只是 ECMAScript 的一个扩展，没有任何相关标准，W3C也没有对该部分作出规范，每个浏览器厂商都有自己的 BOM 实现，这可以说是 BOM 的软肋所在，也是令很多程序要感到很烦恼的一个地方–兼容性；</li>
</ul>
</li>
<li>AJAX<ul>
<li>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术</li>
<li>通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</li>
<li>说到这里，也算是AJAX拯救了Javascript，因为在2005年之前Javscript经常被认为是一个很低级的脚本语言，最重要的是很多开发者都用它开发了一些烦人的广告之类的，最终导致Javascript在好几个主流浏览器上都经常被禁用，相信现在有些开发者也知道每个浏览器都有一个禁用Javascript的选项，不过这时的我们并不是真的禁用它，最多是处于调试的目的，但那时候可是真的禁用，好了，野史就先说到这….2005年对于AJAX可以说是一个重要的元年，很多重大的事件让大众对它真的是刮目相看，Google在它著名的交互应用程序中使用了异步通讯，如Google、Google地图、Google搜索等。而AJAX又是基于Javascript，所以就此Javascript又重新发展了起来。</li>
</ul>
</li>
<li>事件驱动编程<ul>
<li>Javascript中的事件驱动是通过鼠标或热键的动作引发的，比如我们常见的onclick（点击）、onchange（内容改变）、onFocus（获得焦点）、onblur(失去焦点)、onload（文档加载完毕）、onselect(当text或textarea的内容被高亮显示后触发该事件)….<br>还有很多事件在这里就不一一赘述了，大家只需要先知道是这样一个事件驱动原理，使我们能够实现很多交互，因为我们可以知道，每一个用户的行为很多时候是很难预测的，所以计算机不可能提前都预制好要去做些什么。计算机内部是只能识别二进制的，也就是我们所有的操作最终都会以二进制（0101）的形式返回给计算机，然后计算机再去根据指令去执行。早期则存在许多非事件驱动的程序，这样的程序，在需要等待某个条件触发时，会不断地检查这个条件，直到条件满足，这是很浪费cpu时间的。而事件驱动的程序，则有机会释放cpu从而进入睡眠态（注意是有机会，当然程序也可自行决定不释放cpu），当事件触发时被操作系统唤醒，这样就能更加有效地使用cpu了</li>
</ul>
</li>
</ul>
<h2 id="浏览器中的-JavaScript-不可以做什么"><a href="#浏览器中的-JavaScript-不可以做什么" class="headerlink" title="浏览器中的 JavaScript 不可以做什么"></a>浏览器中的 JavaScript 不可以做什么</h2><ul>
<li>相对于 传统的 c、Java、c#、c++ 等等这些语言来说<ul>
<li>文件操作<ul>
<li>注意：JavaScript 本身不是不可以操作文件</li>
<li>为了 安全性</li>
</ul>
</li>
<li>客户端的 JavaScript 可以向服务器发送请求，但是不能接收请求</li>
</ul>
</li>
</ul>
<h2 id="那在开发人员能力相同的情况下编程语言的能力取决于什么"><a href="#那在开发人员能力相同的情况下编程语言的能力取决于什么" class="headerlink" title="那在开发人员能力相同的情况下编程语言的能力取决于什么"></a>那在开发人员能力相同的情况下编程语言的能力取决于什么</h2><ul>
<li>最重要的区别 取决于 你的 执行环境</li>
<li>对比一些后台语言：Java、PHP、C#、C++ 运行环境不一样</li>
<li>编程语言的能力 真正 取决于 这个语言在哪儿运行（运行环境）</li>
</ul>
<h2 id="JavaScript-只可以运行在浏览器中吗"><a href="#JavaScript-只可以运行在浏览器中吗" class="headerlink" title="JavaScript 只可以运行在浏览器中吗"></a>JavaScript 只可以运行在浏览器中吗</h2><ul>
<li>这里就可以引申出上面的问题了，Javascript不仅仅只能运行在浏览器上，其实决定Javascript的关键也是它的运行环境，比如chrome中的V8引擎、Firefox中的SpideMonkey、IE的JScript、Safari的JavaScriptCore、MicrosoftEdge的 ChakraCore</li>
<li>上面这些其实都是引擎，大家可以想象一下显示生活中的引擎，比如汽车中的发动机，也可以说是汽车的引擎，相信知道汽车的人知道发动机其实是可以更换的，也就是可移植，而这一点也是引擎最重要的特性；</li>
<li>而NodeJS作者正是通过移植了chrome的V8引擎，使javascript可以跨平台运行了，也算是开创了Javascript的一个新纪元，让Javascript又提升了一个新的高度,接下来我们也就要进入神奇的Node世界了。</li>
</ul>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>数组中栈与队列的实现</title>
    <url>/2016/03/15/160315%E6%95%B0%E7%BB%84%E4%B8%AD%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;数组是应用最广泛的数据存储结构。它被植入到大部分编程语言中。由于数组十分容易懂，所以它被用来作为介绍数据结构的起点非常合适。<br>下面来看一下栈和队列的在数组当中的实现：.pop, .push, .shift和 .unshift<a id="more"></a></p>
<h2 id="先来看栈的实现"><a href="#先来看栈的实现" class="headerlink" title="先来看栈的实现"></a>先来看栈的实现</h2><p>每个人都知道.push可以再数组末尾添加元素，但是你知道可以使用[].push(‘a’, ‘b’, ‘c’, ‘d’, ‘z’)一次性添加多个元素吗？</p>
<p>.pop 方法是.push 的反操作，它返回被删除的数组末尾元素。如果数组为空，将返回void 0 即是(undefined),使用.pop和.push可以创建LIFO <code>(last in first out)</code>栈。</p>
<blockquote>
<p><code>(last in first out)</code>栈的特性是后进先出，正向前面的<code>last in first out</code>的翻译<br>push()从尾部添加,返回添加后数组的长度<br>pop()从尾部删除,返回被删除的元素</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Stack () &#123; //声明一个Stack构造函数</span><br><span class="line">    this._stack = [];  //在其实例对象上动态添加一个_stack = [],方便下面借用其方法，一般`_`表示私有</span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype.next = function () &#123; //再其原型属性添加一个next方法，其实就是借用了数组的pop方法；</span><br><span class="line">    return this._stack.pop(); </span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype.add = function () &#123; //下面的实现其实·就是借用了数组的push方法</span><br><span class="line">    return this._stack.push.apply(this._stack, arguments); //这里使用了apply借用上下文模式，主要是想利用它第二个参数是数组的作用，虽然arguments是伪数组，也可以实现让其里面的参数逐个的添加到this._stack中，这种借用上下文调用的小技巧用的地方还是挺多的</span><br><span class="line">&#125;</span><br><span class="line">stack = new Stack(); //实例化一个栈对象stack</span><br><span class="line">stack.add(1,2,3); //从后面依次添加3个元素</span><br><span class="line">stack.next(); //弹出最后一个元素，</span><br><span class="line">// &lt;- 3</span><br></pre></td></tr></table></figure>

<h2 id="接下来是队列的实现"><a href="#接下来是队列的实现" class="headerlink" title="接下来是队列的实现"></a>接下来是队列的实现</h2><p>使用.shift和 .unshift即可创建FIFO (first in first out)队列。</p>
<blockquote>
<p><code>(first in first out)</code>栈的特性是先进先出，正向前面的<code>first in first out</code>的翻译<br>unshift()从头部添加,返回添加后数组的长度<br>shift()从头部删除,返回被删除的元素</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Queue () &#123; //声明一个Queue构造函数</span><br><span class="line">    this._queue = []; //同样在实例对象自定义一个_queue私有属性方便下面借用其方法，一般`_`表示私有</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.next = function () &#123; //再其原型属性添加一个next方法，其实就是借用了数组的shift方法，也就是从前面删除元素</span><br><span class="line">    return this._queue.shift();</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.add = function () &#123; //借用其unshift方法，也就是从前面添加元素</span><br><span class="line">    return this._queue.unshift.apply(this._queue, arguments);</span><br><span class="line">&#125;</span><br><span class="line">queue = new Queue();//实例化一个队列对象queue；</span><br><span class="line">queue.add(1,2,3); //从前面依次添加三个元素</span><br><span class="line">queue.next(); //弹出第一个元素</span><br><span class="line">// &lt;- 1</span><br></pre></td></tr></table></figure>

<p>//使用<code>shift</code>或者<code>pop</code>能够很方便的遍历一个数组元素<br>list = [1,2,3,4,5,6,7,8,9,10]<br>while (item = list.shift()) {<br>    console.log(item)<br>}<br>list<br>// &lt;- [] //遍历完成</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快，而且容易实现。栈的使用遍布程序语言实现的方方面面，从表达式求值到处理函数调用；栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。咖啡厅内的一摞盘子是现实世界中常见的栈的例子。只能从最上面取盘子，盘子洗净后，也只能摞在这一摞盘子的最上面。结合前面的比喻，再记住后进先出对队列的理解就差不多了；<br>&nbsp;&nbsp;&nbsp;&nbsp;队列是一种列表，不同的是队列只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的数据，先进先出，这点和栈不一样，在栈中，最后入栈的元素反而被优先处理。可以将队列想象成在银行前排队的人群，排在最前面的人第一个办理业务，新来的人只能在后面排队，直到轮到他们为止。队列被用在很多地方，比如提交操作系统执行的一系列进程、打印任务池等，一些仿真系统用队列来模拟银行或杂货店里排队的顾客；结合前面的比喻，再记住先进先出对队列的理解就差不多了；</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>栈与队列</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>一个页面从输入URL到页面加载显示完成的详细过程</title>
    <url>/2016/03/19/160319%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E5%AE%8C%E6%88%90%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>这一道经典的面试题，相信都不陌生，并且它的这个过程其实能够囊括前后端的通信流程，可以将动态网站实现简单的呈现一下，下面也是简要总结一下，具体还需要自己真正将图解HTTP这本书好好看完之后能够认识的更加完善，等到以后再慢慢完善<a id="more"></a></p>
<p>下面以访问baidu页面来做一个过程分析</p>
<ul>
<li><p>输入 URL：<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p>
</li>
<li><p>DNS 域名解析</p>
</li>
<li><p>计算机无法识别域名，计算机与计算机之间要想进行通信，必须通过ip地址用来定位该计算机所在的位置</p>
</li>
<li><p>在浏览器中，输入的ip地址或者域名，默认给你加了一个80端口号（对方的服务器监听的就是80端口）</p>
</li>
<li><p>158.12.25.652 域名就是为了好记</p>
</li>
<li><p>为了好记，所以我们的万维网提供了 一个 域名这样的概念</p>
</li>
<li><p>当你输入了 ip 地址后，浏览器会自动去 找DNS域名解析服务器，</p>
</li>
<li><p>建立 TCP 连接（Socket）：三次握手,确保这个一定是一个有效的请求和响应，这个三次握手在业界相信大多数人都不陌生，虽然它是提高了传输的有效性，但是这个导致的直接问题就是整个传输过程是很耗时的，也就是说每次http请求都会经历三次握手这个过程，消耗的时间也是不言而喻，并且传统的http协议规定一次请求只能请求一个文件，所以一些顶级网站千方百计的采取一些减少http请求的策略，大多数就是采取一次http请求能够请求多个文件这样的实现，欣喜的是，http2.0已经支持能够一次http能够请求多个文件，这个还是值得期待全部推行开来的，只不过肯定需要过上一段时间，慢慢去等待推行吧。</p>
</li>
<li><p>将用户输入的地址封装成 HTTP Request 请求报文 发送到服务器</p>
</li>
<li><p>浏览器将用户输入的 URL 地址根据HTTP协议 封装成了 http 请求报文（请求头+请求行+请求体）</p>
</li>
<li><p>该报文说白了也就是字符串而已，最终也要被转成了二进制数据再发送到服务器</p>
</li>
<li><p>后台服务器接收到用户HTTP Request 请求报文</p>
</li>
<li><p>后台服务器接收到 客户端发送给自己的数据（二进制数据）</p>
</li>
<li><ul>
<li>首先把二进制数据按照编码解析成字符，（人类可以识别的）</li>
<li>解析成字符之后，再按照 HTTP 协议规范中定义的格式解析出来</li>
</ul>
</li>
<li><p>后台服务器处理用户请求信息</p>
</li>
<li><p>当得到用户请求报文之后，根据请求报文中的 get、port或者 URL、或者URL中的查询字符串或者 请求体中的数据</p>
</li>
<li><p>根据用户的特定的请求数据做特定的处理</p>
</li>
<li><p>后台服务器将相应结果封装到 HTTP Response 响应报文中 发送给客户端</p>
</li>
<li><p>当我们解析和处理完用户请求报文消息之后</p>
</li>
<li><p>服务器开始将具体的 要发送给客户端的数据 根据 HTTP 协议规范 封装成 HTTP协议响应报文</p>
</li>
<li><p>响应头、响应字段、响应体</p>
</li>
<li><p>该数据说白了也是具有特定格式的字符串而已，最终这个字符串也要转换成二进制数据发送到客户端</p>
</li>
<li><p>发送到客户端也是通过 Socket（ip地址、端口号） 发送到了该客户单</p>
</li>
<li><p>用户浏览器接收到响应后开始渲染html、css，解析和执行 JavaScript 代码</p>
</li>
<li><p>当客户端解析到 服务器发送过来的 二进制数据</p>
</li>
<li><p>客户端浏览器也会将 二进制数据 根据编码类型解析成 字符串</p>
</li>
<li><p>然后根据 HTTP 协议，解析服务器发送过来的 响应报文</p>
</li>
<li><p>然后根据响应报文中的报文内容（报文头、报文体）做具体的解析</p>
</li>
<li><p>当浏览器在解析的过程中遇到 一些静态资源时，会再次重复上面的步骤</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象之原型链</title>
    <url>/2016/04/16/160416%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="原型链的认识"><a href="#原型链的认识" class="headerlink" title="原型链的认识"></a>原型链的认识</h2><ul>
<li>既然提到原型链，就需要和构造函数联系起来进行理解;</li>
</ul>
<h3 id="构造函数的认识"><a href="#构造函数的认识" class="headerlink" title="构造函数的认识"></a>构造函数的认识</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;其实构造函数时函数调用的一种模式，例如创建了一个函数，然后通过一个变量new了这个函数，那么这个函数就可以成为构造函数，可以从作用上来理解它为什么叫构造函数，直白点可以说是来构造一个对象出来的，实际上是实例化了一个对象出来，任何通过new来进行操作的函数都可以成为构造函数。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来那么这个被new出来的对象就会继承创建出来的那个函数的属性，前提是在构造函数内部通过<code>this.属性名</code>这样的属性new出来的实例对象才能拥有。</p>
<h3 id="引出原型链的认识"><a href="#引出原型链的认识" class="headerlink" title="引出原型链的认识"></a>引出原型链的认识</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当new出的这个实例对象需要访问某个属性时，首先它会在其本身查找，也可以理解为是先看其构造函数内部有没有通过<code>this.属性名</code>初始化这个属性，如果没有找到这个属性，也就是没有从本身找到这个属性，那么它就会往上查找，这个查找过程中查的那条链就叫做原型链，具体了解可以看引申出来属性搜索原则，下面有总结，其实这也和原型继承这个机制是联系在一起的，可以说设计这个原型链就是为原型继承服务的；<a id="more"></a></p>
<h3 id="构造函数的整个过程："><a href="#构造函数的整个过程：" class="headerlink" title="构造函数的整个过程："></a>构造函数的整个过程：</h3><ul>
<li>1、new申请内存，创建对象，（new运算符可以称作新建运算符）；</li>
<li>2、调用构造函数，构造函数有一个隐式参数，即this；</li>
<li>3、刚创建出来的对象的引用赋值给this，由函数处理；（其实主要就是利用new能够动态改变this的指向）</li>
<li>4、在构造函数中利用this.成员 = 值来给对象添加成员</li>
</ul>
<h3 id="构造函数的优势："><a href="#构造函数的优势：" class="headerlink" title="构造函数的优势："></a>构造函数的优势：</h3><ul>
<li>①、对象就有独立的原型对象；</li>
<li>②、也具有类型名了</li>
</ul>
<h3 id="属性搜索原则"><a href="#属性搜索原则" class="headerlink" title="属性搜索原则"></a>属性搜索原则</h3><ul>
<li>①、在当前对象中找；</li>
<li>②、在构造函数定义规则中找；</li>
<li>③、在其原型对象中找；</li>
<li>④、在其原型对象的原型对象中找…….直到Object.prototype,这等于就是在其原型链上寻找</li>
<li>⑤、如果没有则返回undefined;</li>
</ul>
<h2 id="稍微深入的理解下原型"><a href="#稍微深入的理解下原型" class="headerlink" title="稍微深入的理解下原型"></a>稍微深入的理解下原型</h2><p>其实对象中有一个属性 叫 <strong>proto</strong><br>通过调试可以发现 对象的 <strong>proto</strong> 与创建（实例化）它的构造函数的 prototype 是一个东西<br>看下面的代码测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function F() &#123; //声明一个构造函数</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var o = new F(); //通过这个构造函数实例化一个对象o</span><br><span class="line"></span><br><span class="line">console.log( o.__proto__ === F.prototype ); //true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意一下 <strong>proto</strong> 是非标准属性，这里也只是辅助理解来运用下，实际工作中不要采用它来进行业务逻辑</p>
</blockquote>
<h3 id="原型对象与原型属性"><a href="#原型对象与原型属性" class="headerlink" title="原型对象与原型属性"></a>原型对象与原型属性</h3><p><code>F.prototype</code> 是构造函数 F 的原型属性<br><code>F.prototype</code> 是对象 o 的原型对象</p>
<h3 id="proto-与prototype有什么区别"><a href="#proto-与prototype有什么区别" class="headerlink" title="_proto_与prototype有什么区别"></a>_proto_与prototype有什么区别</h3><p><code>_proto_</code>是站在对象的角度讨论其原型对象<br><code>prototype</code>是站在构造函数的角度讨论其原型属性，或构造函数创建的对象的原型对象<br>也可以理解成所站的位置不同，就会有不同的角色。</p>
<blockquote>
<p>上面的这些理论知识还是会有些抽象，抽时间我会把原型链画一下，那样理解起来就清晰了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>国内解决npm被墙的三种方式</title>
    <url>/2016/05/02/160502%E5%9B%BD%E5%86%85%E8%A7%A3%E5%86%B3npm%E8%A2%AB%E5%A2%99%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="第一种方式：通过指定镜像源地址来下载包"><a href="#第一种方式：通过指定镜像源地址来下载包" class="headerlink" title="第一种方式：通过指定镜像源地址来下载包"></a>第一种方式：通过指定镜像源地址来下载包</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这个使用的是淘宝的 NPM 镜像，这是一个完整 npmjs.org 镜像，同步频率目前为 10 分钟一次以保证尽量与官方服务同步，这里也不得不说淘宝的这个镜像真是对我们开发者的一个福音，代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install 包名 --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h2 id="第二种方式：通过-淘宝提供的一个-cnpm-全局命令行工具"><a href="#第二种方式：通过-淘宝提供的一个-cnpm-全局命令行工具" class="headerlink" title="第二种方式：通过 淘宝提供的一个 cnpm 全局命令行工具"></a>第二种方式：通过 淘宝提供的一个 cnpm 全局命令行工具</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式的好处就是省去了后面的 registry 的一串长长的地址。</p>
<ul>
<li>安装全局命令行工具，<blockquote>
<p>注意要加上-g，以确保是全局安装，这样才能够直接在命令行使用 cnpm</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm</span><br></pre></td></tr></table></figure>

<ul>
<li>使用时直接按如下操作即可，但是这一点唯一不足的就是操作的时候需要用 cnpm，而不是 npm，对于处女座的人可以采用第三种方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install 包名</span><br></pre></td></tr></table></figure>

<h2 id="第三种方式：通过一个全局命令行工具-nrm-来管理我们的镜像源地址"><a href="#第三种方式：通过一个全局命令行工具-nrm-来管理我们的镜像源地址" class="headerlink" title="第三种方式：通过一个全局命令行工具 nrm 来管理我们的镜像源地址"></a>第三种方式：通过一个全局命令行工具 <code>nrm</code> 来管理我们的镜像源地址</h2><ul>
<li>安装 nrm<blockquote>
<p>注意要加上-g，以确保是全局安装，这样才能够直接在命令行使用 nrm</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<ul>
<li><p>基本使用</p>
<ol>
<li>首先可以先显示当前所有可用镜像源</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>

<p><img src="/2016/05/02/160502国内解决npm被墙的三种方式/nrm.png" alt="nrm"> 2. 显示当前正在使用的镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm current</span><br></pre></td></tr></table></figure>

<p><img src="/2016/05/02/160502国内解决npm被墙的三种方式/nrm1.png" alt="nrm1"></p>
<blockquote>
<p>初始默认是官方 npm 3. 切换镜像源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm use 镜像源名称</span><br></pre></td></tr></table></figure>

<p><img src="/2016/05/02/160502国内解决npm被墙的三种方式/nrm2.png" alt="nrm2"></p>
<blockquote>
<p>这时显示 registry 已经切换为 taobao 了， 4. 接下来再确认一下当前正在使用的镜像源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm current</span><br></pre></td></tr></table></figure>

<p><img src="/2016/05/02/160502国内解决npm被墙的三种方式/nrm3.png" alt="nrm3"></p>
<blockquote>
<p>已经变为 taobao 了，以后再安装包的时候直接<code>npm install 包名</code>即可，再也不用担心被墙的苦恼了,大功告成！</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>http状态码</title>
    <url>/2016/03/20/160320http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h2 id="1XX：信息状态码"><a href="#1XX：信息状态码" class="headerlink" title="1XX：信息状态码"></a>1XX：信息状态码</h2><ul>
<li>100 Continue  初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</li>
<li>101 Switching Protocols 服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</li>
</ul>
<h2 id="2XX：成功状态码"><a href="#2XX：成功状态码" class="headerlink" title="2XX：成功状态码"></a>2XX：成功状态码</h2><ul>
<li>200 OK  一切正常，对GET和POST请求的应答文档跟在后面。</li>
<li>201 Created 服务器已经创建了文档，Location头给出了它的URL。</li>
<li>202 Accepted  已经接受请求，但处理尚未完成。</li>
<li>203 Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</li>
<li>204 No Content  没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</li>
<li>205 Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</li>
<li>206 Partial Content 客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</li>
</ul>
<h2 id="3XX：重定向"><a href="#3XX：重定向" class="headerlink" title="3XX：重定向"></a>3XX：重定向</h2><ul>
<li>300 Multiple Choices  客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</li>
<li>301 Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</li>
<li>302 Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href="http://host/~user（缺少了后面的斜杠），有的服务器" target="_blank" rel="noopener">http://host/~user（缺少了后面的斜杠），有的服务器</a> 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</li>
<li>303 See Other 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</li>
<li>304 Not Modified  客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</li>
<li>305 Use Proxy 客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</li>
<li>307 Temporary Redirect  和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）</li>
</ul>
<h2 id="4XX：客户端错误"><a href="#4XX：客户端错误" class="headerlink" title="4XX：客户端错误"></a>4XX：客户端错误</h2><ul>
<li>400 Bad Request 请求出现语法错误。</li>
<li>401 Unauthorized  客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。</li>
<li>403 Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</li>
<li>404 Not Found 无法找到指定位置的资源。这也是一个常用的应答。</li>
<li>405 Method Not Allowed  请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</li>
<li>406 Not Acceptable  指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</li>
<li>407 Proxy Authentication Required 类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</li>
<li>408 Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</li>
<li>409 Conflict  通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</li>
<li>410 Gone  所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）</li>
<li>411 Length Required 服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</li>
<li>412 Precondition Failed 请求头中指定的一些前提条件失败（HTTP 1.1新）。</li>
<li>413 Request Entity Too Large  目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</li>
<li>414 Request URI Too Long  URI太长（HTTP 1.1新）。</li>
<li>416 Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</li>
</ul>
<h2 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX: 服务器错误"></a>5XX: 服务器错误</h2><ul>
<li>500 Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求。</li>
<li>501 Not Implemented 服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</li>
<li>502 Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</li>
<li>503 Service Unavailable 服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。</li>
<li>504 Gateway Timeout 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</li>
<li>505 HTTP Version Not Supported  服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</li>
</ul>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>http状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2016/04/01/160401%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul>
<li>数字：<code>^[0-9]*$</code></li>
<li>n位的数字：<code>^\d{n}$</code></li>
<li>至少n位的数字：<code>^\d{n,}$</code></li>
<li>m-n位的数字：<code>^\d{m,n}$</code></li>
<li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li>
<li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></li>
<li>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></li>
<li>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></li>
<li>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></li>
<li>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></li>
<li>非零的负整数：<code>^-[1-9]\d*$</code></li>
<li>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></li>
<li>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></li>
<li>非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></li>
<li>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></li>
<li>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li>
<li>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([- 0-9]*[1-9][0-9]*)))$</code></li>
<li>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li>
</ul>
<h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><ul>
<li>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></li>
<li>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></li>
<li>长度为3-20的所有字符：<code>^.{3,20}$</code></li>
<li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li>
<li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li>
<li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li>
<li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li>
<li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></li>
<li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li>
<li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：<code>[^%&amp;’,;=?$\x22]+</code></li>
<li>禁止输入含有<del>的字符：`[^</del>\x22]+`</li>
</ul>
<h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul>
<li>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li>
<li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li>
<li>InternetURL：<code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li>
<li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)- ：<code>^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li>
<li>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li>
<li>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></li>
<li>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-- Z]).{8,10}$</code></li>
<li>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></li>
<li>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></li>
<li>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li>
<li>钱的输入格式：<ul>
<li>有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></li>
<li>这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li>
<li>必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></li>
<li>这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></li>
<li>1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li>
<li>备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里</li>
</ul>
</li>
<li>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li>
<li>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li>
<li>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</li>
<li>HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li>
<li>首尾空白字符的正则表达式：<code>^\s*|\s*$</code>或<code>(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符( 包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</li>
<li>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</li>
<li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li>
</ul>
]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Bower中文文档</title>
    <url>/2016/05/03/160503Bower%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p><img src="/2016/05/03/160503Bower中文文档/BowerLogo.png" alt="BowerLogo"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  <em>原创翻译，有不当的地方欢迎指出。转载请注明出处。谢谢!</em></p>
<h3 id="一个Web站点由很多的东西组成-框架、类库、资产、以及各种实用的工具，Bower为你将这些所有的东西管理起来。"><a href="#一个Web站点由很多的东西组成-框架、类库、资产、以及各种实用的工具，Bower为你将这些所有的东西管理起来。" class="headerlink" title="一个Web站点由很多的东西组成-框架、类库、资产、以及各种实用的工具，Bower为你将这些所有的东西管理起来。"></a>一个Web站点由很多的东西组成-框架、类库、资产、以及各种实用的工具，Bower为你将这些所有的东西管理起来。</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;记录这些所有的包以及确保它们是最新的（或者设置为你需要的特殊指定版本）无疑是很棘手的事情，接下来正是Bower来拯救你，让你不再棘手！<br>&nbsp;&nbsp;&nbsp;&nbsp;Bower可以管理起包括HTML、CSS、Javascript、字体甚至是图片这些组件。Bower不会连接和压缩你的代码，也不会做其他与它职责无关的事情，它仅仅帮助你安装你需要的正确版本的包以及这些包的依赖。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;只要一开始， Bower 工作是通过获取和安装所有的包, 寻找，发现，下载，和保存所有你在寻找的东西。Bower会将这些包记录在一个配置文件（bower.json)当中，你怎么使用这些包取决于你。Bower提供钩子（可以理解为一个依附物）促进你使用这些包作为你的工具，或者用于你的工作流程当中.<br>&nbsp;&nbsp;&nbsp;&nbsp;Bower也算是一个前端优化的利器，如果有多个包依赖一个包-比如jquery，Bower将只会下载一次jquery，这个是一个扁平的依赖图，通过这种扁平的依赖机构能够很大程度的减少页面的负担。</p>
<h2 id="安装Bower"><a href="#安装Bower" class="headerlink" title="安装Bower"></a>安装Bower</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Bower是一个命令行工具，通过npm安装，<strong>注意一定要记得加上-g，以确保是全局安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g bower</span><br></pre></td></tr></table></figure>

<p>Bower需要依赖于node、npm和git。</p>
<blockquote>
<p>npm一般在安装node的时候就自行安装上了，node以及git的安装可以直接在其官网安装即可,没有什么特殊要注意的</p>
</blockquote>
<p>想了解不同平台上安装的问题，请阅读<a href="https://github.com/bower/bower/wiki/Troubleshooting" target="_blank" rel="noopener">troubleshooting</a></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>  <strong>包的安装</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过命令 <code>bower install</code>安装软件包，默认会安装到 <code>bower_components/目录</code>.代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bower install &lt; package&gt;</span><br></pre></td></tr></table></figure>

<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、 .git 、 一个URL或者其它.这一点的灵活性也使Bower更加的方便了， 了解更多： <a href="http://bowercn.com/docs/api/#install" target="_blank" rel="noopener">bower install</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过 bower.json 文件安装</span><br><span class="line"> bower install</span><br><span class="line"># 通过在github上注册的包名安装</span><br><span class="line"> bower install jquery</span><br><span class="line"># GitHub短链接</span><br><span class="line"> bower install desandro/masonry</span><br><span class="line"># Github上的 .git</span><br><span class="line"> bower install git://github.com/user/package.git</span><br><span class="line"># URL</span><br><span class="line"> bower install http://example.com/script.js</span><br></pre></td></tr></table></figure>

<p> <strong>搜索包</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以在<a href="http://bower.io/search" target="_blank" rel="noopener">这里</a>为你喜爱的项目搜索然后发现注册的包的名字</p>
<p> <strong>保存加载的包</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以通过<code>bower init</code>命令新建一个<code>bower.json</code>文件。会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置，例如：<br><img src="/2016/05/03/160503Bower中文文档/bowerJson.png" alt="bowerJson"><br><strong>如果想保存依赖信息(dependencies)到你的<code>bower.json</code>文件，可以使用：<code>bower install PACKAGE --save</code></strong>,这一点是很关键的一步，有了这个依赖信息，如果后续你想分享你的项目给你的同事，你就不需要将你的所有依赖项的实体包都发过去，因为你的<code>bower.json</code>当中已经有你的依赖项，当执行<code>bower install</code>之后，就会自行将所需要的依赖项下载下来,这样无疑是很省心的，也体现了bower在这一点上起到的作用。</p>
<p><strong>使用下载的包</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;怎么使用这些包取决于你，我们建议你将Bower与Grunt, RequireJS, Yeoman以及其它工具一起使用，对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：</p>
<script src="bower_components/jquery/dist/jquery.min.js"></script>

<blockquote>
<p>对于上面的每行代码前，没有带$，那个是mac和linux会默认自己带上的</p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Bower</tag>
        <tag>包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS调试方法总结</title>
    <url>/2016/05/04/160504NodeJS%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、-console-log"><a href="#一、-console-log" class="headerlink" title="一、 console.log"></a>一、 console.log</h2><p><code>console.log</code> 是最方便的，也是最快的，但是这种方法对于初学者来说肯定是不太适合的，接下来向下看</p>
<h2 id="二、NodeJS内置调试器"><a href="#二、NodeJS内置调试器" class="headerlink" title="二、NodeJS内置调试器"></a>二、NodeJS内置调试器</h2><p>使用方式：在控制台中输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node debug 脚本文件名</span><br></pre></td></tr></table></figure>

<p>执行上面的命令结束之后，代码会自动停在脚本的第一行，等待用户执行其它调试命令。<br>如果你对相关命令不熟悉，那么可以通过输入 <code>help</code> 命令查看可用命令，代码显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;node debug a.js</span><br><span class="line">&lt; Debugger listening on port 5858</span><br><span class="line">connecting to 127.0.0.1:5858 ... ok</span><br><span class="line">break in C:\Users\92816\Desktop\testprogramming\a.js:1</span><br><span class="line">&gt; 1 &quot;use strict&quot;;</span><br><span class="line">  2 let foo = &apos;bar&apos;;</span><br><span class="line">  3 console.log(foo);</span><br><span class="line">debug&gt; help</span><br><span class="line">help</span><br><span class="line">Commands: run (r), cont (c), next (n), step (s), out (o), backtrace (bt), setBreakpoint (sb), clearBreakpoint (cb),</span><br><span class="line">watch, unwatch, watchers, repl, exec, restart, kill, list, scripts, breakOnException, breakpoints, version</span><br></pre></td></tr></table></figure>

<p>如若想退出调试，则按上<code>Ctrl+C</code>按提示输入<code>.exit</code>即可。<br>这种方法也算中规中矩，但是可能对于经常习惯于浏览器调试的会感到不习惯，下面介绍带可视化界面的方法</p>
<h2 id="三、-node-inspector"><a href="#三、-node-inspector" class="headerlink" title="三、 node-inspector"></a>三、 node-inspector</h2><p>node-inspector 是一个第三方全局命令行调试工具。<br><a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noopener">node-inspector</a></p>
<h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g node-inspector</span><br></pre></td></tr></table></figure>

<h3 id="3-2-启动调试"><a href="#3-2-启动调试" class="headerlink" title="3.2 启动调试"></a>3.2 启动调试</h3><h4 id="方法一，直接使用node-debug-文件名"><a href="#方法一，直接使用node-debug-文件名" class="headerlink" title="方法一，直接使用node-debug 文件名"></a>方法一，直接使用node-debug 文件名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-debug a.js</span><br></pre></td></tr></table></figure>

<p><code>node-debug</code> 命令会自动在当前操作系统默认浏览器中加载node调试器,也就是说可以帮你自动打开你的默认浏览器，比较省心</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;node-debug a.js</span><br><span class="line">Node Inspector v0.12.8</span><br><span class="line">Visit http://127.0.0.1:8080/?port=5858 to start debugging.</span><br><span class="line">Debugging `a.js`</span><br><span class="line"></span><br><span class="line">Debugger listening on port 5858</span><br></pre></td></tr></table></figure>

<h4 id="方法二，使用node-–debug-brk-文件名再结合上node-inspector"><a href="#方法二，使用node-–debug-brk-文件名再结合上node-inspector" class="headerlink" title="方法二，使用node –debug-brk 文件名再结合上node-inspector"></a>方法二，使用node –debug-brk 文件名再结合上node-inspector</h4><p>先打开一个命令行窗口可以输入下面的命令启动调试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node --debug-brk a.js</span><br></pre></td></tr></table></figure>

<p>会显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\test&gt;node --debug-brk a.js</span><br><span class="line">Debugger listening on port 5858</span><br></pre></td></tr></table></figure>

<p>接下来在另外打开一个命令行窗口输入<code>node-inspector</code>,出现下面的提示，将<code>http://127.0.0.1:8080/?port=5858</code>复制到你的浏览器地址栏即可开始调试了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\test&gt;node-inspector</span><br><span class="line">Node Inspector v0.12.8</span><br><span class="line">Visit http://127.0.0.1:8080/?port=5858 to start debugging.</span><br></pre></td></tr></table></figure>

<p>调试的快捷键和在 <code>Chrome</code> 浏览器中的快捷键是一样的,在这里就不多说了</p>
<h2 id="四、-visual-studio-code-调试-node"><a href="#四、-visual-studio-code-调试-node" class="headerlink" title="四、 visual studio code 调试 node"></a>四、 visual studio code 调试 node</h2><blockquote>
<p>这一款工具我个人觉得还是很好用的，界面做的也是非常不错的，推荐使用</p>
</blockquote>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">visuao studio code 官方网站</a></p>
<h3 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1 下载"></a>4.1 下载</h3><p><a href="https://code.visualstudio.com/Docs/?dv=win" target="_blank" rel="noopener">visuao studio code 下载地址</a></p>
<h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h3><p>手动安装，一直下一步下一步就可以了</p>
<h3 id="4-3-开始调试"><a href="#4-3-开始调试" class="headerlink" title="4.3 开始调试"></a>4.3 开始调试</h3><p><a href="https://code.visualstudio.com/docs/editor/debugging" target="_blank" rel="noopener">vsc官方文档调试链接</a></p>
<ol>
<li>必须以项目的方式打开要调试的js脚本所在的目录，目录路径最好不要包含中文，否则可能有问题</li>
<li>在要调试的脚本文件中，找到具体要设置断点的行，在左侧点击设置断点</li>
<li>设置好断点之后，按<code>F5</code>启动调试</li>
<li>这个时候，<code>vsc</code> 编辑器会提示你选择要调试的环境，这里选择 <code>Node.js</code> 即可</li>
<li>当选择完调试环境之后，<code>vsc</code> 默认会在当前根目录下生成一个 <code>.vsccode</code> 目录</li>
<li>在 <code>.vsccode</code> 目录下找到一个叫做 <code>launch.json</code> 的文件，打开编辑</li>
<li><strong>在 <code>launch.json</code> 文件中，在 <code>configurations</code> 节点下找到一个叫做 <code>program</code> 的属性节点</strong></li>
<li><strong>将 <code>program</code> 属性节点中原来的值 <code>${workspaceRoot}/app.js</code> 改为 <code>${workspaceRoot}/要调试的脚本文件名.js</code></strong></li>
<li>修改完毕之后，按 <code>Ctrl+C</code> 保存</li>
<li><ol start="10">
<li>上述操作完成之后，按 <code>F5</code> 启动调试</li>
</ol>
</li>
<li>尽情的享受 <code>vsc</code> 调试带给你的调试的乐趣吧</li>
<li>快捷键和 <code>Chrome</code> 浏览器中的调试环境快捷键一致</li>
</ol>
<p>对于执行了以上操作还没有成功的，建议将 <code>vsc</code> 关闭重新打开再次按 <code>F5</code> 启动调试即可解决，如果有快捷键冲突的时候，可以使用<code>fn+F5</code></p>
<h2 id="五、-Webstorm-调试-IDE方式）"><a href="#五、-Webstorm-调试-IDE方式）" class="headerlink" title="五、 Webstorm 调试 (IDE方式）"></a>五、 Webstorm 调试 (IDE方式）</h2><blockquote>
<p>按以下几步调试即可，相对来说也比较简单，就是可能比较重量级一些，喜欢轻量级的可以考虑使用visuao studio code;</p>
</blockquote>
<h3 id="5-1-开始调试"><a href="#5-1-开始调试" class="headerlink" title="5.1 开始调试"></a>5.1 开始调试</h3><ol>
<li>在要调试的文件中具体的行位置左边通过 <code>Ctrl+F8</code> 设置一个端点</li>
<li>在当前要调试的文件中通过鼠标右键，然后选择 <code>Debug 要调试的文件名.js</code></li>
<li>这个时候 ws 会自动帮你启动调试模式，并且自动停留在你打击端点的位置</li>
<li><code>F8</code> 步进</li>
<li><code>Shift + F8</code> 步出</li>
<li><code>Alt + F8</code> 可以执行一个表达式</li>
<li><code>Ctrl + F5</code> 重新启动调试</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这里也只是总结了五种调试方式，怎么说呢，工具肯定会有很多，我觉得最重要的是找到最适合自己的，有句话，适合自己的就是最好的！</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>调试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>配置HybridApp&amp;Android环境</title>
    <url>/2016/06/18/160618%E9%85%8D%E7%BD%AEHybridAppAndroid%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="1、安装JAVA环境并配置JAVA环境变量"><a href="#1、安装JAVA环境并配置JAVA环境变量" class="headerlink" title="1、安装JAVA环境并配置JAVA环境变量"></a>1、安装JAVA环境并配置JAVA环境变量</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>在硬盘中已经下载好了</p>
<h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><h3 id="2-1-在系统变量中添加JAVA-HOME"><a href="#2-1-在系统变量中添加JAVA-HOME" class="headerlink" title="2.1.在系统变量中添加JAVA_HOME"></a>2.1.在系统变量中添加JAVA_HOME</h3><p>把jdk的安装路径复制即可<br>注意不要添加到用户变量当中，以防后续出bug；</p>
<h3 id="2-2-在系统变量中增加CLASSPATH"><a href="#2-2-在系统变量中增加CLASSPATH" class="headerlink" title="2.2.在系统变量中增加CLASSPATH"></a>2.2.在系统变量中增加CLASSPATH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line">注意开头的一个点</span><br></pre></td></tr></table></figure>

<h3 id="2-3-在Path系统变量的后面增加-JAVA-HOME-bin"><a href="#2-3-在Path系统变量的后面增加-JAVA-HOME-bin" class="headerlink" title="2.3.在Path系统变量的后面增加 ;%JAVA_HOME%\bin;"></a>2.3.在Path系统变量的后面增加 ;%JAVA_HOME%\bin;</h3><h3 id="2-4-命令行输入javac正常运行即可"><a href="#2-4-命令行输入javac正常运行即可" class="headerlink" title="2.4.命令行输入javac正常运行即可"></a>2.4.命令行输入javac正常运行即可</h3><h2 id="3、安装android环境并配置android环境变量"><a href="#3、安装android环境并配置android环境变量" class="headerlink" title="3、安装android环境并配置android环境变量"></a>3、安装android环境并配置android环境变量</h2><h3 id="3-1-下载SDK-Tools—"><a href="#3-1-下载SDK-Tools—" class="headerlink" title="3.1-下载SDK Tools—-"></a>3.1-下载SDK Tools—-</h3><p><a href="http://developer.android.com/sdk/index.html#Other" target="_blank" rel="noopener">http://developer.android.com/sdk/index.html#Other</a></p>
<h3 id="3-2-下载完毕"><a href="#3-2-下载完毕" class="headerlink" title="3.2-下载完毕"></a>3.2-下载完毕</h3><p>安装或者解压后，在相应目录下找到并打开SDK Manager.exe<br>SDK Manager默认勾选了一些选项，直接点击Install packages安装即可</p>
<p><img src="https://oi2h9y4dd.qnssl.com/image/blog/SDKManager.png" alt="SDKManager"></p>
<p>如果安装过慢，可以用国内的镜像，或者分包下载<br><a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">http://www.androiddevtools.cn/</a></p>
<p><img src="https://oi2h9y4dd.qnssl.com/image/blog/AndroidDevTools.png" alt="AndroidDevTools"><br>找到相应的包下载即可：</p>
<p><a href="http://mirrors.opencas.cn/android/repository/" target="_blank" rel="noopener">http://mirrors.opencas.cn/android/repository/</a></p>
<p><img src="https://oi2h9y4dd.qnssl.com/image/blog/AndroidMirror.png" alt="AndroidMirror"></p>
<p>我已经把这些包都下载好了，接下来就是按照文档目录分别解压到相应位置即可</p>
<h3 id="3-3-Android环境变量配置："><a href="#3-3-Android环境变量配置：" class="headerlink" title="3.3-Android环境变量配置："></a>3.3-Android环境变量配置：</h3><h4 id="a-找到SDK-Manager所在的目录"><a href="#a-找到SDK-Manager所在的目录" class="headerlink" title="- a-找到SDK Manager所在的目录"></a>- a-找到SDK Manager所在的目录</h4><p>上面下载的包都在同一目录下<br><img src="https://oi2h9y4dd.qnssl.com/image/blog/SDKManager02.png" alt="SDKManager"></p>
<h4 id="b-新建系统变量：ANDROID-HOME"><a href="#b-新建系统变量：ANDROID-HOME" class="headerlink" title="- b-新建系统变量：ANDROID_HOME"></a>- b-新建系统变量：ANDROID_HOME</h4><p>变量值：C:\Program Files\android–注意这个变量值是安装的根目录<br><img src="https://oi2h9y4dd.qnssl.com/image/blog/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="SDKManager"></p>
<p>整个安装目录的结构图如下：<br><img src="https://oi2h9y4dd.qnssl.com/image/blog/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="安装目录"><br><img src="https://oi2h9y4dd.qnssl.com/image/blog/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%8402.png" alt="安装目录"></p>
<p>主要是安装以下打钩的几个<br><img src="https://oi2h9y4dd.qnssl.com/image/blog/Android%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.png" alt="Android安装程序"></p>
<p>将这几个文件解压到相应文件夹即可</p>
<h4 id="c-在Path系统变量的后面增加——-ANDROID-HOME-tools-ANDROID-HOME-platform-tools"><a href="#c-在Path系统变量的后面增加——-ANDROID-HOME-tools-ANDROID-HOME-platform-tools" class="headerlink" title="- c-在Path系统变量的后面增加——  ;%ANDROID_HOME%\tools   ;%ANDROID_HOME%\platform-tools"></a>- c-在Path系统变量的后面增加——  ;%ANDROID_HOME%\tools   ;%ANDROID_HOME%\platform-tools</h4><p><img src="https://oi2h9y4dd.qnssl.com/image/blog/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F02.png" alt="环境变量"></p>
<h4 id="d-在命令行输入adb正常运行说明环境配置正确；"><a href="#d-在命令行输入adb正常运行说明环境配置正确；" class="headerlink" title="d-在命令行输入adb正常运行说明环境配置正确；"></a>d-在命令行输入adb正常运行说明环境配置正确；</h4><blockquote>
<p>tips:把bulid-tools中的android6.0改为下面的23.0.1</p>
</blockquote>
<p><img src="https://oi2h9y4dd.qnssl.com/image/blog/Android-buildtools.png" alt="Android-buildtools"></p>
<h2 id="4、最后一步"><a href="#4、最后一步" class="headerlink" title="4、最后一步"></a>4、最后一步</h2><p>通过npm安装即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cordova ionic</span><br></pre></td></tr></table></figure>

<blockquote>
<p>考虑到有部分用户可能因为被墙的原因npm安装不成功，可以参考我这篇文章来解决<br><a href="https://blog.lsqy.space/%2F2016%2F05%2F02%2F160502%E5%9B%BD%E5%86%85%E8%A7%A3%E5%86%B3npm%E8%A2%AB%E5%A2%99%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%2F" target="_blank" rel="noopener">国内解决npm被墙的三种方式</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HybridApp</category>
      </categories>
      <tags>
        <tag>HybridApp</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>优化默认密码输入框</title>
    <url>/2016/06/19/160619%E4%BC%98%E5%8C%96%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86/</url>
    <content><![CDATA[<p><img src="/2016/06/19/160619优化默认密码输入框/password.png" alt="password"><br>主要是为了弥补在移动端原生密码输入框默认样式比较单调，通过这样能够实现自定义密码框输出样式。<a id="more"></a><br>代码如下，仅供参考—</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;优化默认密码框&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scaleable=0&quot; /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    html &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        margin: 100px 100px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .password &#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ul &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        border: 1px solid #fff;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-size: 0;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 12rem;</span><br><span class="line">        height: 2rem;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translateX(-50%);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 2rem;</span><br><span class="line">        height: 2rem;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        font-size: 1.2rem;</span><br><span class="line">        font-weight: 700;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 2rem;</span><br><span class="line">        border-left: 1px solid #e6e6e6;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:first-child &#123;</span><br><span class="line">        border-left: 0 none</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .input &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: -100%;</span><br><span class="line">        width: 200%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        text-indent: -9999px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;password&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input class=&quot;input&quot; type=&quot;tel&quot; maxlength=&quot;6&quot; id=&quot;input&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;input&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./zepto.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(&apos;body&apos;).on(&apos;input&apos;, &apos;.input&apos;, function() &#123;</span><br><span class="line">        var $this = $(this),</span><br><span class="line">            $inputs = $this.parent().find(&apos;.password li&apos;),</span><br><span class="line">            password = $this.val() + &apos;&apos;;</span><br><span class="line">        var numLen = 6;</span><br><span class="line">        for (var i = 0; i &lt; numLen; i++) &#123;</span><br><span class="line">            if (password[i]) &#123;</span><br><span class="line">                $($inputs[i]).text(&apos;●&apos;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $($inputs[i]).text(&apos;&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (password.length == 6) &#123;</span><br><span class="line">            alert(&apos;6位密码已输完&apos;);</span><br><span class="line">            $this.val(&apos;&apos;);</span><br><span class="line">            $inputs.html(&apos;&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://lsqy.github.io/optimizePassword/" target="_blank" rel="noopener">点击查看效果</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>http-server介绍</title>
    <url>/2016/10/01/161001http-server/</url>
    <content><![CDATA[<p><img src="https://oi2h9y4dd.qnssl.com/public.jpg" alt></p>
<blockquote>
<p>http-server是一个基于NodeJs简单的零配置命令行HTTP服务器.在平常我们要在本地查看一些项目的时候，往往是需要开一个本地服务器的，大多数人可能会选择用wamp来进行这个操作，有了这个之后就可以非常方便的想在哪里开启一个本地服务器就可以在哪里开启，使用起来相当快捷方便，比起wamp会轻便很多，当然并不是说wamp就不用了，只是在一些特定的情况下有这个http-server就足够了。下面来深入的了解下http-server。<a id="more"></a></p>
</blockquote>
<h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Node,Node的下载和安装就跟普通软件一样，在其官方网址安装了即可，npm也会随之按上。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure>

<p>上面是全局安装，也建议大家都全局安装，否则不能直接在命令行里使用http-server来开启本地服务器。加上<code>-g</code>的也就是意味着全局安装，也就相当于自动配上了环境变量，可以在命令行中直接通过http-server来进行使用。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-server [path] [option]</span><br></pre></td></tr></table></figure>

<p><code>[path]</code>默认是指向<code>./public</code>如果这个文件夹存在的话，否则就会指向<code>./</code>也就是当前目录。</p>
<h2 id="可用的选项"><a href="#可用的选项" class="headerlink" title="可用的选项"></a>可用的选项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p 端口号 (默认 8080)</span><br><span class="line"></span><br><span class="line">-a IP 地址 (默认 0.0.0.0)</span><br><span class="line"></span><br><span class="line">-d 显示目录列表 (默认 &apos;True&apos;)</span><br><span class="line"></span><br><span class="line">-i 显示 autoIndex (默认 &apos;True&apos;)</span><br><span class="line"></span><br><span class="line">-e or --ext 如果没有提供默认的文件扩展名(默认 &apos;html&apos;)</span><br><span class="line"></span><br><span class="line">-s or --silent 禁止日志信息输出</span><br><span class="line"></span><br><span class="line">--cors 启用 CORS via the Access-Control-Allow-Origin header</span><br><span class="line"></span><br><span class="line">-o 在开始服务后打开浏览器</span><br><span class="line">-c 为 cache-control max-age header 设置Cache time(秒) , e.g. -c10 for 10 seconds (defaults to &apos;3600&apos;). 禁用 caching, 则使用 -c-1.</span><br><span class="line">-U 或 --utc 使用UTC time 格式化log消息</span><br><span class="line"></span><br><span class="line">-P or --proxy Proxies all requests which can&apos;t be resolved locally to the given url. e.g.: -P http://someurl.com</span><br><span class="line"></span><br><span class="line">-S or --ssl 启用 https</span><br><span class="line"></span><br><span class="line">-C or --cert ssl cert 文件路径 (default: cert.pem)</span><br><span class="line"></span><br><span class="line">-K or --key Path to ssl key file (default: key.pem).</span><br><span class="line"></span><br><span class="line">-r or --robots Provide a /robots.txt (whose content defaults to &apos;User-agent: *\nDisallow: /&apos;)</span><br><span class="line"></span><br><span class="line">-h or --help 打印以上列表并退出</span><br></pre></td></tr></table></figure>

<h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>&nbsp;&nbsp;&nbsp;首先可以先打开一个目录，如下图：<br><img src="https://oi2h9y4dd.qnssl.com/http-server01.png" alt><br>然后在当前目录打开命令行窗口，使用<code>git bash</code>命令或者windows系统下<code>按下shift键然后右击鼠标然后选择在此处打开命令行即可</code>，然后输入<code>http-server</code>,这样就能够开启一个端口了，默认是8080；并且你的http请求也会输出出来，如下图：<br><img src="https://oi2h9y4dd.qnssl.com/http-server02.png" alt><br>如果想换个端口则只需加上-p 端口号，例<code>http-server -p 4000</code>，这样就可以通过<code>loaclhost:4000</code>来进行访问了，更多的<code>option</code>可以自行尝试。<br>参考：<code>https://www.npmjs.com/package/http-server</code></p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现数字自动转换人民币金额</title>
    <url>/2016/10/20/161020JS%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%BA%BA%E6%B0%91%E5%B8%81%E9%87%91%E9%A2%9D/</url>
    <content><![CDATA[<p>这个需求在实际项目中还是挺常用的，实现方法有很多种，下面简单总结了两种实现方式，供大家参考。<a id="more"></a></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function outputmoney(number) &#123;</span><br><span class="line">        number = number.replace(/\,/g, &quot;&quot;);</span><br><span class="line">        if (isNaN(number) || number == &quot;&quot;) return &quot;&quot;;</span><br><span class="line">        number = Math.round(number * 100) / 100;</span><br><span class="line">        if (number &lt; 0) &#123;</span><br><span class="line">            return &apos;-&apos; + outputdollars(Math.floor(Math.abs(number) - 0) + &apos;&apos;) + outputcents(Math.abs(number) - 0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return outputdollars(Math.floor(number - 0) + &apos;&apos;) + outputcents(number - 0);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">function outputdollars(number) &#123;</span><br><span class="line">    if (number.length &lt;= 3) &#123;</span><br><span class="line">        return (number == &apos;&apos; ? &apos;0&apos; : number);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var mod = number.length % 3;</span><br><span class="line">        var output = (mod == 0 ? &apos;&apos; : (number.substring(0, mod)));</span><br><span class="line">        for (i = 0; i &lt; Math.floor(number.length / 3); i++) &#123;</span><br><span class="line">            if ((mod == 0) &amp;&amp; (i == 0)) &#123;</span><br><span class="line">                output += number.substring(mod + 3 * i, mod + 3 * i + 3);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                output += &apos;,&apos; + number.substring(mod + 3 * i, mod + 3 * i + 3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function outputcents(amount) &#123;</span><br><span class="line">    amount = Math.round(((amount) - Math.floor(amount)) * 100);</span><br><span class="line">    return (amount &lt; 10 ? &apos;.0&apos; + amount : &apos;.&apos; + amount);</span><br><span class="line">&#125;</span><br><span class="line">var number = &apos;10038798.39&apos;; </span><br><span class="line">&gt; 如果是number类型，可通过+&apos;&apos;或者toString()来转换为string类型，因为要用到一些string的方法。</span><br><span class="line">number = outputmoney(number);</span><br><span class="line">console.log(number);</span><br><span class="line">10,038,798.39</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function formatNum(str) &#123;</span><br><span class="line">    var newStr = &quot;&quot;;</span><br><span class="line">    var count = 0;</span><br><span class="line"></span><br><span class="line">    if (str.indexOf(&quot;.&quot;) == -1) &#123;</span><br><span class="line">        for (var i = str.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            if (count % 3 == 0 &amp;&amp; count != 0) &#123;</span><br><span class="line">                newStr = str.charAt(i) + &quot;,&quot; + newStr;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newStr = str.charAt(i) + newStr;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        str = newStr + &quot;.00&quot;; //自动补小数点后两位</span><br><span class="line">        console.log(str)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (var i = str.indexOf(&quot;.&quot;) - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            if (count % 3 == 0 &amp;&amp; count != 0) &#123;</span><br><span class="line">                newStr = str.charAt(i) + &quot;,&quot; + newStr;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newStr = str.charAt(i) + newStr; //逐个字符相接起来</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        str = newStr + (str + &quot;00&quot;).substr((str + &quot;00&quot;).indexOf(&quot;.&quot;), 3);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line">var number = &apos;10038798.39&apos;; </span><br><span class="line">&gt; 如果是number类型，可通过+&apos;&apos;或者toString()来转换为string类型，因为要用到一些string的方法。</span><br><span class="line">number = formatNum(number);</span><br><span class="line">console.log(number);</span><br><span class="line">10,038,798.39</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>bable使用指南</title>
    <url>/2016/11/17/161117bable%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>记录下自己觉得写得不错的babel资料</p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>无非是最权威、做全面的，英文水平好的<code>https://babeljs.io/</code><br>阮一峰写的<a href="http://www.ruanyifeng.com/blog/2016/01/babel.html?20161117143409" target="_blank" rel="noopener">babel入门教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>babel-preset-node6</title>
    <url>/2016/11/20/161120babel-preset-node6/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;现在Node6.x虽然现在已经能够原生支持ES6、ES2015将近93%的特性了，而今天介绍的这个插件正式为了解决剩下的的将近7%的特性支持，从而实现完全拥抱ES6.<a id="more"></a></p>
<h2 id="installation-安装"><a href="#installation-安装" class="headerlink" title="installation(安装)"></a>installation(安装)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i babel-preset-node6</span><br></pre></td></tr></table></figure>

<h2 id="Usage-用法"><a href="#Usage-用法" class="headerlink" title="Usage(用法)"></a>Usage(用法)</h2><h3 id="通过-babelrc-建议"><a href="#通过-babelrc-建议" class="headerlink" title="通过.babelrc(建议)"></a>通过<code>.babelrc</code>(建议)</h3><p>在你的项目根目录下创建一个<code>babelrc</code>文件，然后将<code>node6</code>包含到你的<code>presets path</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">        &quot;node6&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在你无论任何时候运行<code>babel-node</code>,它将会使Node6.x版本缺失的ES6特性可以体验。</p>
<h3 id="通过命令行（CLI）"><a href="#通过命令行（CLI）" class="headerlink" title="通过命令行（CLI）"></a>通过命令行（<code>CLI</code>）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ babel script.js --presets node6</span><br></pre></td></tr></table></figure>

<h3 id="通过Node-API"><a href="#通过Node-API" class="headerlink" title="通过Node API"></a>通过Node API</h3><p>如果你不想用上面的<code>.babelrc</code>文件,你可以试试这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&quot;babel-core&quot;).transform(&quot;code&quot;, &#123;</span><br><span class="line">  presets: [&quot;node6&quot;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果你想用<code>node</code>而不是<code>babel-node</code>作为你的命令行工具，你可以创建一个入口<code>script</code>来引用你的预编译代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&apos;babel-register&apos;);</span><br><span class="line">require(&apos;path/to/es6/script&apos;);</span><br></pre></td></tr></table></figure>

<p>这样你就可以在任何地方使用<code>node</code>来运行<strong><code>ES6</code></strong>代码了<br>当然，你首先要确保你已经安装这两个<code>npm</code>包中的一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -S babel-core or</span><br><span class="line">npm i -S babel-register</span><br></pre></td></tr></table></figure>

<h3 id="Webpack，gulp，Browserify-等等"><a href="#Webpack，gulp，Browserify-等等" class="headerlink" title="Webpack，gulp，Browserify, 等等"></a>Webpack，gulp，Browserify, 等等</h3><p>根据vendor的介绍将<code>node6</code>加到你<code>babel</code>的<code>&quot;perset&quot;</code>列表当中</p>
<h3 id="React支持"><a href="#React支持" class="headerlink" title="React支持"></a>React支持</h3><p>babel已经有了一个React的开始包，现在你需要分别安装。<br>通过NPM安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i babel-preset-react</span><br></pre></td></tr></table></figure>

<p>然后往你的.babelrc的”presets”列表中添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;node6&quot;,</span><br><span class="line">    &quot;react&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>reference</strong> <a href="https://www.npmjs.com/package/babel-preset-node6" target="_blank" rel="noopener">https://www.npmjs.com/package/babel-preset-node6</a></p>
</blockquote>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>babel</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装和配置Redis</title>
    <url>/2016/11/21/161121Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AERedis/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&nbsp;&nbsp;&nbsp;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。<br>由于是存取运行在内存之中，所以速度极快。Redis 最高可以每秒执行 80000 以上数据操作，因此被广泛应用于需要快速存取数据的应用中，比如秒杀网站，投票网站等。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;Redis 官方安装版本是 Linux 的，并没有 Windows 下的 Redis，好在 GitHub 中有人发布了 Windows 版本的 Reids ，可以直接安装使用。注意，仅支持 64 位系统，32位的没有测试，一般是不能运行的。<br>下载地址：<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a><br><img src="https://oi2h9y4dd.qnssl.com/imageredis.png" alt><br>下载完成之后，直接解压到自己预先建好的目录下即可，例如我建到了<code>D:\Redis</code>下；</p>
<h2 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h2><ul>
<li><p>进入到Redis目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd d:/Redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server  redis.windows.conf</span><br><span class="line">或者直接输入redis-server也可以</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果出现这样的画面，就说明 Redis 运行成功，只要确定不要关闭这个画面，Redis 就会一直运行<br><img src="https://oi2h9y4dd.qnssl.com/imageredis02.png" alt> </p>
<h2 id="关闭Redis"><a href="#关闭Redis" class="headerlink" title="关闭Redis"></a>关闭Redis</h2><p>直接关闭命令行工具即可</p>
<h2 id="启动Redis命令行工具"><a href="#启动Redis命令行工具" class="headerlink" title="启动Redis命令行工具"></a>启动Redis命令行工具</h2><p>另外开启一个命令提示窗口，并输入下面的命令：</p>
<ul>
<li>1.定位至 Redis 目录<br><code>cd c:/redis</code></li>
<li>2.启动 Redis 命令<br><code>redis-cli</code><br>如果光标前出现了这样的字符，<code>127.0.0.1:6379&gt;</code> 说明开启本地测试工具，端口是 6379。<br>这样额就能够在命令行熟悉一些Redis的命令了。</li>
</ul>
<h2 id="几个学习的网站"><a href="#几个学习的网站" class="headerlink" title="几个学习的网站"></a>几个学习的网站</h2><blockquote>
<p><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a>   Redis中文官网<br><a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a> Redis中文网<br><a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a>  Redis命令参考<br><a href="https://www.npmjs.com/package/redis" target="_blank" rel="noopener">https://www.npmjs.com/package/redis</a> Redis npm包地址</p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis远程连接</title>
    <url>/2016/11/28/161128Redis%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>一般情况下，Redis默认只允许本机访问，有时候我们也许需要使Redi能被远程访问，我这次远程连接的目的主要是为了能够在本机通过Redis可视化工具连接上我的阿里云服务器上部署的Redis，这样能够更加直观的去观察一下存入的键值对，下面记录下步骤：</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改Redis配置文件/usr/local/src/redis-3.2.5/redis.conf，找到bind那行配置：</p>
<blockquote>
<p>对于<code>redis.conf</code>这个文件的位置，有的是在<code>/etc/redis/redis.conf</code>,我的是安装在了上面的位置上，具体看你的Redis安装目录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>将其改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br></pre></td></tr></table></figure>

<h2 id="重启Redis服务"><a href="#重启Redis服务" class="headerlink" title="重启Redis服务"></a>重启Redis服务</h2><p>注意这时候需要<strong>指定配置文件</strong>然后重启Redis服务,也就是说启动redis-server的时候后面加上刚才修改的redis.conf。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ./src/redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>配置好Redis服务并重启服务后。就可以使用客户端远程连接Redis服务了。命令格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h &#123;redis_host&#125; -p &#123;redis_port&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>{redis_host}</code>就是远程的Redis服务所在服务器地址，<code>{redis_port}</code>就是Redis服务端口（Redis默认端口是6379）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G7_user@E540-PF03XZZF /C/Users/G7_user/Desktop</span><br><span class="line">$ redis-cli -h 你的IP地址 -p 6379</span><br><span class="line">你的IP地址:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<p>下面就是我用的Redis Desktop Manager,直接连接即可<br><img src="https://oi2h9y4dd.qnssl.com/image/Redis.png" alt></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>升级到https小记</title>
    <url>/2016/12/12/161212%E5%8D%87%E7%BA%A7%E5%88%B0https%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="总结的不错的博文"><a href="#总结的不错的博文" class="headerlink" title="总结的不错的博文"></a>总结的不错的博文</h2><p>今天整站系统的升级了下https，下面记录下几篇写的不错的博文</p>
<h3 id="1-为什么我们应该尽快升级到-HTTPS？"><a href="#1-为什么我们应该尽快升级到-HTTPS？" class="headerlink" title="1.为什么我们应该尽快升级到 HTTPS？"></a>1.为什么我们应该尽快升级到 HTTPS？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://imququ.com/post/moving-to-https-asap.html#simple_thread</span><br></pre></td></tr></table></figure>

<h3 id="2-nginx配置ssl加密（单双向认证、部分https）"><a href="#2-nginx配置ssl加密（单双向认证、部分https）" class="headerlink" title="2.nginx配置ssl加密（单双向认证、部分https）"></a>2.nginx配置ssl加密（单双向认证、部分https）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://seanlook.com/2015/05/28/nginx-ssl/</span><br></pre></td></tr></table></figure>

<h3 id="3-https-免费证书获取指引-–alsotang-CNode-社区负责人"><a href="#3-https-免费证书获取指引-–alsotang-CNode-社区负责人" class="headerlink" title="3.https 免费证书获取指引  –alsotang CNode 社区负责人"></a>3.https 免费证书获取指引  –alsotang CNode 社区负责人</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://cnodejs.org/topic/57e917e2bb55ef3e1a17fcbd</span><br></pre></td></tr></table></figure>

<h3 id="4-nginx配置location总结及rewrite规则写法"><a href="#4-nginx配置location总结及rewrite规则写法" class="headerlink" title="4.nginx配置location总结及rewrite规则写法"></a>4.nginx配置location总结及rewrite规则写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://seanlook.com/2015/05/17/nginx-location-rewrite/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀项目</title>
    <url>/2016/12/14/161214%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<ul>
<li>基于网易云实现的音乐搜索网<br><a href="https://music.daoapp.io/" target="_blank" rel="noopener">https://music.daoapp.io/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>使用monaca快速开发HybridApp</title>
    <url>/2016/12/18/161218%E4%BD%BF%E7%94%A8monaca%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91HybridApp/</url>
    <content><![CDATA[<p><img src="/2016/12/18/161218使用monaca快速开发HybridApp/monaca.jpg" alt></p>
<h2 id="安装Monaca-CLI"><a href="#安装Monaca-CLI" class="headerlink" title="安装Monaca CLI"></a>安装Monaca CLI</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g monaca</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意要全局安装，也就是加上<code>-g</code></p>
</blockquote>
<p>国内如果直接安装不上的话，可以试试<code>cnpm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g monaca</span><br></pre></td></tr></table></figure>

<blockquote>
<p>cnpm 可以通过 <code>npm install -g cnpm</code>来进行安装，是阿里为npm在国内的镜像网；</p>
</blockquote>
<p>安装成功后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">monaca -v</span><br><span class="line">2.1.6</span><br></pre></td></tr></table></figure>

<p>这样就说明安装无误了</p>
<h2 id="创建一个APP应用"><a href="#创建一个APP应用" class="headerlink" title="创建一个APP应用"></a>创建一个APP应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">monaca create my-app</span><br></pre></td></tr></table></figure>

<p>接下来你会看到有几个模板，其实也可以说是monaca目前集成好的几个框架可以选用，相当于一个脚手架，monaca跟OnsenUI的集成还是非常棒的，有基于<code>Angular 1 、Angular 2 、React</code>,当然还有<code>Ionic</code>也可以选择，也可以选择一个不用任何框架的版本<code>No Framework</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">monaca create my-app</span><br><span class="line">? Choose a category: </span><br><span class="line">    Onsen UI </span><br><span class="line">    Onsen UI and Angular 1 </span><br><span class="line">    Onsen UI and Angular 2 </span><br><span class="line">    Onsen UI and React </span><br><span class="line">    Ionic </span><br><span class="line">  &gt; No Framework </span><br><span class="line">    Sample Apps</span><br></pre></td></tr></table></figure>

<p>从上面选择一个你喜欢的框架，接下来monaca就会从云端将你选择的这套脚手架下载下来<br>例如我这边想下载一个不用任何框架的,这样你就可以将自己开发的html5页面放到里面直接在app里看了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ monaca create weui</span><br><span class="line">? Choose a category: No Framework</span><br><span class="line">? Select a template - Press P to see a preview Blank</span><br><span class="line"></span><br><span class="line">Downloading template...</span><br><span class="line">www/components already exists. Skipping.</span><br><span class="line"></span><br><span class="line">Project created successfully.</span><br><span class="line"></span><br><span class="line">Type &quot;cd weui&quot; and run monaca command again.</span><br><span class="line">  &gt; monaca preview      =&gt; Run app in the browser</span><br><span class="line">  &gt; monaca debug        =&gt; Run app in the device using Monaca Debugger</span><br><span class="line">  &gt; monaca remote build =&gt; Start remote build for iOS/Android/Windows</span><br><span class="line">  &gt; monaca upload       =&gt; Upload this project to Monaca Cloud IDE</span><br></pre></td></tr></table></figure>

<h2 id="monaca-preview-预览模式"><a href="#monaca-preview-预览模式" class="headerlink" title="monaca preview 预览模式"></a>monaca preview 预览模式</h2><p>这样就直接会在你浏览器打开这个项目，默认是监听8080端口，只要你一修改，就会即时刷新，结合控制台能够很方便的快速开发<br><img src="/2016/12/18/161218使用monaca快速开发HybridApp/react.png" alt></p>
<h2 id="monaca-debug"><a href="#monaca-debug" class="headerlink" title="monaca debug"></a>monaca debug</h2><p>这样就可以直接在你的手机上去运行这个APP了，你手机上需要下载一个monaca，注册一个monaca账号就可以了，再按照引导步骤连上你本机的IP，就可以在手机上运行了，并且它也会即时响应你的改变，热加载刷新。</p>
<p>&nbsp;&nbsp;&nbsp;当我发现monaca的时候，真的感觉这个工具真是相当不错，特此跟大家分享一下，Onsen也是值得大家去用一下的一个非常精美的UI框架。</p>
<blockquote>
<p><a href="https://monaca.io/" target="_blank" rel="noopener">https://monaca.io/</a><br><a href="https://onsen.io/" target="_blank" rel="noopener">https://onsen.io/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HybridApp</category>
      </categories>
      <tags>
        <tag>HybridApp</tag>
        <tag>monaca</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀项目收集-页面自动加载条pace.js</title>
    <url>/2016/12/18/161218%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86-%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%9D%A1pace-js/</url>
    <content><![CDATA[<p><img src="/2016/12/18/161218优秀项目收集-页面自动加载条pace-js/pace.png" alt></p>
<h2 id="pace简介"><a href="#pace简介" class="headerlink" title="pace简介"></a>pace简介</h2><blockquote>
<p>github地址 <a href="https://github.com/HubSpot/pace" target="_blank" rel="noopener">https://github.com/HubSpot/pace</a></p>
</blockquote>
<p>&nbsp;&nbsp;只需要将page.js和你选择的CSS主题引入，你就会得到一个非常漂亮的的页面加载条。<br>它的强大之处在于它不需要跟你的代码有任何联系，加载进度它会自动检测。</p>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;script src=&quot;/pace/pace.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link href=&quot;/pace/themes/pace-theme-barber-shop.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="详细的文档"><a href="#详细的文档" class="headerlink" title="详细的文档"></a>详细的文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://github.hubspot.com/pace/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>优秀项目收集</category>
      </categories>
      <tags>
        <tag>页面自动加载条</tag>
        <tag>pace.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React相关资料整理</title>
    <url>/2016/12/28/161228React%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>记录一些React的参考资料<a id="more"></a></p>
<h3 id="1-React-AJAX-Best-Practices"><a href="#1-React-AJAX-Best-Practices" class="headerlink" title="1.React AJAX Best Practices"></a>1.React AJAX Best Practices</h3><blockquote>
<p>上面写了四种不错的方式</p>
</blockquote>
<p><a href="http://andrewhfarmer.com/react-ajax-best-practices/" target="_blank" rel="noopener">http://andrewhfarmer.com/react-ajax-best-practices/</a></p>
<h4 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h4><p><a href="http://www.jianshu.com/p/764324742e4b" target="_blank" rel="noopener">React Ajax最佳实践</a></p>
<h3 id="2-Modern-Js-with-React"><a href="#2-Modern-Js-with-React" class="headerlink" title="2.Modern Js with React"></a>2.Modern Js with React</h3><blockquote>
<p>一个很不错的blog，博主是一个很有经验的webDeveloper,相当有经验，上面的<code>React AJAX Best Practices</code>就是它写的。</p>
</blockquote>
<p><a href="http://andrewhfarmer.com/" target="_blank" rel="noopener">http://andrewhfarmer.com/</a></p>
<h3 id="3-React-最佳实践——那些-React-没告诉你但很重要的事"><a href="#3-React-最佳实践——那些-React-没告诉你但很重要的事" class="headerlink" title="3.React 最佳实践——那些 React 没告诉你但很重要的事"></a>3.React 最佳实践——那些 React 没告诉你但很重要的事</h3><blockquote>
<p>对于React新手和中级水平的都可以参考借鉴下，能够避免少走一些弯路，可以看出来作者也是慢慢试错总结出来的。</p>
</blockquote>
<p><a href="https://segmentfault.com/a/1190000005013207" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005013207</a></p>
<h3 id="4-AJAX-Requests-in-React-How-and-Where-to-Fetch-Data"><a href="#4-AJAX-Requests-in-React-How-and-Where-to-Fetch-Data" class="headerlink" title="4.AJAX Requests in React: How and Where to Fetch Data"></a>4.AJAX Requests in React: How and Where to Fetch Data</h3><p><a href="https://daveceddia.com/ajax-requests-in-react/" target="_blank" rel="noopener">https://daveceddia.com/ajax-requests-in-react/</a></p>
<h3 id="5-Load-Initial-Data-via-AJAX"><a href="#5-Load-Initial-Data-via-AJAX" class="headerlink" title="5.Load Initial Data via AJAX"></a>5.Load Initial Data via AJAX</h3><blockquote>
<p>学习一个新技术，大多数技术的官网上写的无疑是很详细的，之所以把这个tips拿出来，是因为这个点很多时候会被忽略，提醒下自己。<br><strong>主要就是请求过来的远端数据要在<code>componentDidMount</code>方法中，当请求异步数据的时候，在<code>componentWillUnmount</code>中cacel掉发出的的请求，因为这个component就要被移除了，所以这个请求没有意义了。</strong></p>
</blockquote>
<p><a href="http://reactjs.cn/react/tips/initial-ajax.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/initial-ajax.html</a></p>
<h3 id="5-ReactTips必看"><a href="#5-ReactTips必看" class="headerlink" title="5.ReactTips必看"></a>5.ReactTips必看</h3><blockquote>
<p>官网提供的一个tips模块，仔细阅读完之后能够解决很多你在开发react项目时遇到的问题。</p>
</blockquote>
<p><a href="http://reactjs.cn/react/tips/introduction.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/introduction.html</a></p>
<h3 id="6-Props-in-getInitialState-Is-an-Anti-Pattern"><a href="#6-Props-in-getInitialState-Is-an-Anti-Pattern" class="headerlink" title="6.Props in getInitialState Is an Anti-Pattern"></a>6.Props in getInitialState Is an Anti-Pattern</h3><blockquote>
<p>这个点也是官网tips提到的，也是最佳实践的一个点，就是不要在<code>getInitialState</code>中使用<code>pops</code>,除非真的明确声明是为了项目内部使用。</p>
</blockquote>
<p><a href="http://reactjs.cn/react/tips/props-in-getInitialState-as-anti-pattern.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/props-in-getInitialState-as-anti-pattern.html</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>优秀项目</tag>
      </tags>
  </entry>
  <entry>
    <title>github开源项目日常整理</title>
    <url>/2016/12/28/161228github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%B8%B8%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>主要记录一些自己在平常工作学习当中发现的一些开源项目，也是能够让自己知道自己star了哪些项目，不要只是star，而要真正能够star的有意义，时刻能够提醒自己。<a id="more"></a></p>
<blockquote>
<p><strong>注意</strong>以下项目不分先后，等以后多了以后会对其进行详细一些的分类</p>
</blockquote>
<h3 id="1-fetch"><a href="#1-fetch" class="headerlink" title="1.fetch"></a>1.fetch</h3><blockquote>
<p>就不用为了使用jQuery的Ajax方法就引入整个jQuery库，可以使用window.fetch()就可以了，它是一个简洁、标准化的javascript的Ajax API。在Chrome和Firefox中已经可以使用，如果需要兼容其他浏览器，可以使用fetch polyfill，也就是下面这个库了</p>
</blockquote>
<p><strong>A window.fetch JavaScript polyfill.</strong></p>
<h4 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h4><p><a href="https://github.com/github/fetch" target="_blank" rel="noopener">https://github.com/github/fetch</a></p>
<h4 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></p>
<h3 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h3><p><strong>Promise based HTTP client for the browser and node.js</strong></p>
<h4 id="github地址-1"><a href="#github地址-1" class="headerlink" title="github地址"></a>github地址</h4><p><a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">https://github.com/mzabriskie/axios</a></p>
<h3 id="3-superagent"><a href="#3-superagent" class="headerlink" title="3.superagent"></a>3.superagent</h3><p>*<em>Ajax with less suck - (and node.js HTTP client to match) *</em></p>
<h4 id="github地址-2"><a href="#github地址-2" class="headerlink" title="github地址"></a>github地址</h4><p><a href="https://github.com/visionmedia/superagent" target="_blank" rel="noopener">https://github.com/visionmedia/superagent</a></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>优秀项目</tag>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>单页面应用的History路由模式express后端中间件配合</title>
    <url>/2017/03/28/170328%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%9A%84History%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8Fexpress%E5%90%8E%E7%AB%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%85%8D%E5%90%88/</url>
    <content><![CDATA[<p>这篇文章主要分享一下通过<code>HTML5</code>的<code>history API</code>的时候，使用<code>NodeJS</code>后端应该如何配置，来避免产生404的问题，这里是使用的express的框架，主要是通过<code>connect-history-api-fallback</code>这个中间件来实现的！<a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里使用vue-router来实现的单页应用为例，访问<a href="http://cnode.lsqy.tech" target="_blank" rel="noopener">http://cnode.lsqy.tech</a>，进入首页，点击下面的tab栏，一切都是很正常的，但当这时候你 <code>ctrl+command+R</code> 或 点击浏览器的刷新按钮 或 在地址栏上再敲一下回车，总之就是刷新，发现就会出现404了，比如这样的错误<code>Cannot GET /message/</code>,因为默认浏览器会认为你是在请求服务端的路由，服务端那边没有对应的处理，所以自然就会出错了，下面来引入<code>connect-history-api-fallback</code>这个中间件，来无痛使用优雅的History路由模式。</p>
<h2 id="引入connect-history-api-fallback"><a href="#引入connect-history-api-fallback" class="headerlink" title="引入connect-history-api-fallback"></a>引入connect-history-api-fallback</h2><p>首先看它的介绍<code>Middleware to proxy requests through a specified index page, useful for **Single Page Applications** that utilise the HTML5 History API.</code><br>中文意思就是一个能够代理请求返回一个指定的页面的中间件，对于单页应用中使用HTML5 History API非常有用。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>经典的npm安装,注意将其作为依赖项，加上<code>--save</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save connect-history-api-fallback</span><br></pre></td></tr></table></figure>

<p>接下来是在express的简单使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var ecstatic = require(&apos;ecstatic&apos;);</span><br><span class="line">var history = require(&apos;connect-history-api-fallback&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.use(history());</span><br><span class="line">app.use(ecstatic(&#123; root: __dirname + &apos;/dist&apos; &#125;));</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(6565);</span><br></pre></td></tr></table></figure>

<p>这样配置完之后，再重新<code>restart</code>一下项目,你就会发现现在可以非常顺畅的使用了，不管你是刷新了浏览器还是直接通过<code>url</code>从外部访问都不会出现<code>404</code>的结果了。<br>另外，<code>connect-history-api-fallback</code>还有一些可配置的<code>Options</code>项,这个如果需要详细了解可以仔细看看其API的调用即可</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实有时候对于单页面应用，虽然是单页的，但是也会有很多不仅仅是必须从首页进去的情况，比如要分享某个页面，这样我们希望能够直接通过这个简洁的<code>url</code>来跳到这个指定的页面，但是如果不做上面的配置的话就会出现<code>404</code>这样的错误了，其实这样的话也算是接管了传统的服务端路由，来完全交给前端来处理路由跳转了，这样以后的url就非常简洁优雅了。</p>
<blockquote>
<p>reference: github地址<a href="https://github.com/bripkens/connect-history-api-fallback" target="_blank" rel="noopener">connect-history-api-fallback</a></p>
</blockquote>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>express</tag>
        <tag>History路由模式</tag>
        <tag>SPA</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈XSS漏洞攻击与防御</title>
    <url>/2017/08/25/170825%E6%B5%85%E8%B0%88XSS%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;跨站脚本简称xss（cross-site scripting），利用方式主要是借助网站本身设计不严谨，导致执行用户提交的恶意js脚本，对网站自身造成危害。xss漏洞是web渗透测试中最常见而又使用最灵活的一个漏洞。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。 <a id="more"></a></p>
<h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><blockquote>
<p>XSS大致分为：反射型、存储型、DOM型（这三种为主流）</p>
</blockquote>
<h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>&nbsp;&nbsp;只是简单地把用户输入的数据”反射”给浏览器，攻击时需要用户配合点击，也叫”非持久型xss”。</p>
<h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>&nbsp;&nbsp;会把用户输入的数据”存储”在服务器端，也叫”持久性xss”，常见留言板等可以提交展示用户输入内容的功能点。</p>
<h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p>&nbsp;&nbsp;从是否存储可划分成反射型，可通过修改页面的DOM节点形成的xss漏洞。</p>
<p><strong>注意：</strong>无论反射型还是存储型，都是需要与服务端交互的，即服务端将提交的内容反馈到了html源码内，导致触发xss，也就是说返回到html源码中可以看到触发xss的代码；而DOM型xss是不与服务端交互的，只与客户端上的js交互，也就是说提交的恶意代码，被放到了js中执行，然后显示出来。那么这种形式有一个问题，就是html源码里面不存在触发xss的代码，因为服务端返回的源码都是一样的，只不过源码里面包含了一段js，这段js再执行后生成了一段xss代码，可以在审查元素中查看到。</p>
<h2 id="XSS危害"><a href="#XSS危害" class="headerlink" title="XSS危害"></a>XSS危害</h2><p>&nbsp;&nbsp;xss漏洞是发生在客户端，目的是让浏览器执行一段用户提交的恶意js代码，从而达到某种目的。从表面上看，xss漏洞的危害止步于客户端，且主要就是用来执行js获取用户信息（比如浏览器版本等等）。然而由于xss漏洞可能发生的地方很多，因此被利用的情况也不统一，以下列举了xss漏洞能够造成的一些危害（xss漏洞危害包含但不仅限于以下几种）。</p>
<ul>
<li>cookie劫持（窃取cookie）</li>
<li>后台增删改文章等操作（类似于csrf骗取用户点击，利用js模拟浏览器发包，借助xmlhttprequest类）</li>
<li>钓鱼，利用xss构造出一个登录框，骗取用户账户密码。</li>
<li>Xss蠕虫（利用xss漏洞进行传播）</li>
<li>修改网页代码</li>
<li>利用网站重定向</li>
</ul>
<h3 id="利用XSS窃取cookie"><a href="#利用XSS窃取cookie" class="headerlink" title="利用XSS窃取cookie"></a>利用XSS窃取cookie</h3><p>&nbsp;&nbsp;因为cookie能够代表用户的身份，所以盗取了cookie之后，就可以伪造用户去做一些事情了，这个产生的危害是非常可怕的。</p>
<h4 id="cookie介绍"><a href="#cookie介绍" class="headerlink" title="cookie介绍"></a>cookie介绍</h4><p>cookie分为内存cookie和硬盘cookie，内存cookie储存在浏览器内存中，关闭浏览器则消失。cookie由变量名与值组成，其属性里有标准的cookie变量，也有用户自定义的属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie格式：Set-Cookie:=[;=][;expiress=][;domain=][;path=][;secure][;httponly]</span><br></pre></td></tr></table></figure>

<p>cookie各个参数详细内容：</p>
<ul>
<li>Set-cookie:http响应头，向客户端发送cookie。</li>
<li>Name=value:每个cookie必须包含的内容。</li>
<li>Expires=date:EXpires确定了cookie的有效终止日期，可选。如果缺省，则cookie不保存在硬盘中，只保存在浏览器内存中。</li>
<li>Domain=domain-name:确定了哪些inernet域中的web服务器可读取浏览器储存的cookie，缺省为该web服务器域名。</li>
<li>Path=path:定义了web服务器哪些路径下的页面可获取服务器发送的cookie。</li>
<li>Secure:在cookie中标记该变量，表明只有为https通信协议时，浏览器才向服务器提交cookie。</li>
<li>Httponly:禁止javascript读取,如果cookie中的一个参数带有httponly，则这个参数将不能被javascript获取；httponly可以防止xss会话劫持攻击。</li>
</ul>
<h2 id="防御-XSS"><a href="#防御-XSS" class="headerlink" title="防御 XSS"></a>防御 XSS</h2><p>为防御 XSS，我们首先要知道 XSS 攻击的本质是不安全的<br>HTML 注入，可通过在 HTML、CSS、JS 或 HTTP 协议层次上进行防范。下面提供一些常用的防御策略：</p>
<h3 id="输入检查"><a href="#输入检查" class="headerlink" title="输入检查"></a>输入检查</h3><p>用户名、邮箱等表单验证（前台/服务器二次验证）<br>富文本使用白名单机制等</p>
<h3 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a>输出检查</h3><p>HTML-Encoder<br>js-Encoder</p>
<h3 id="HTTP-头部：HttpOnly"><a href="#HTTP-头部：HttpOnly" class="headerlink" title="HTTP 头部：HttpOnly"></a>HTTP 头部：HttpOnly</h3><p>设置 cookie 时加入 HttpOnly 可使 js 脚本无法获取 cookie</p>
<h3 id="HTTP-头部：CSP（Content-Security-Policy）"><a href="#HTTP-头部：CSP（Content-Security-Policy）" class="headerlink" title="HTTP 头部：CSP（Content Security Policy）"></a>HTTP 头部：CSP（Content Security Policy）</h3><p>定义允许的资源加载地址，比如图片 / 视频 / JS 脚本等</p>
<h3 id="HTTPS加密访问"><a href="#HTTPS加密访问" class="headerlink" title="HTTPS加密访问"></a>HTTPS加密访问</h3><p>有效防止 DOM XSS 攻击</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>archLinux安装VSCode</title>
    <url>/2017/06/26/170626archLinux%E5%AE%89%E8%A3%85VSCode/</url>
    <content><![CDATA[<p>记录一下在archLinux安装VSCode，我是用的manjaro这款linux发行版，个人觉得这款linux发行版还是非常不错的，有兴趣的也可以安装一下，下面来列一下安装VSCode的几个步骤<a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;Visual Studio Code（以下简称vscode）是一个轻量且强大的代码编辑器，支持Windows，OS X和Linux。内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP等其他语言。主要这是微软第一款官方支持Linux的产品，真是大赞微软！</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h3><p>从官网下载压缩包，直接访问Visual Studio Code官网下载就可以，我的电脑是64位的，所以下载64位的就可以了,注意要下载结尾为<code>.tar.gz</code>格式的压缩包<a href="https://code.visualstudio.com/docs?dv=linux64" target="_blank" rel="noopener">https://code.visualstudio.com/docs?dv=linux64</a></p>
<h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><p><code>cd</code> 到你下载这个文件的目录，进行解压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[lsqy@lsqy-pc ~]$ cd ~/workspace/soft/</span><br><span class="line">[lsqy@lsqy-pc soft]$ ll</span><br><span class="line">总用量 510M</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy  65M 6月  26 11:03 code-stable-code_1.13.1-1497464373_amd64.tar.gz</span><br><span class="line">drwxr-xr-x 2 lsqy lsqy 4.0K 5月  10 17:26 git_for_win_32</span><br><span class="line">drwxr-xr-x 4 lsqy lsqy 4.0K 4月  24 18:06 navicatess112_premium_cs_x64</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 246M 4月  11 17:11 navicatess112_premium_cs_x64.tar</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 1.4M 5月  27 10:09 nginx-1.13.0.zip</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 198M 6月  26 13:06 tm2013.tar.gz</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 6.7K 5月  10 18:18 vbox-install.log.gz</span><br><span class="line">[lsqy@lsqy-pc soft]$ tar -zxvf code-stable-code_1.13.1-1497464373_amd64.tar.gz</span><br><span class="line">[lsqy@lsqy-pc soft]$ ll</span><br><span class="line">总用量 510M</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy  65M 6月  26 11:03 code-stable-code_1.13.1-1497464373_amd64.tar.gz</span><br><span class="line">drwxr-xr-x 2 lsqy lsqy 4.0K 5月  10 17:26 git_for_win_32</span><br><span class="line">drwxr-xr-x 4 lsqy lsqy 4.0K 4月  24 18:06 navicatess112_premium_cs_x64</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 246M 4月  11 17:11 navicatess112_premium_cs_x64.tar</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 1.4M 5月  27 10:09 nginx-1.13.0.zip</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 198M 6月  26 13:06 tm2013.tar.gz</span><br><span class="line">-rw-r--r-- 1 lsqy lsqy 6.7K 5月  10 18:18 vbox-install.log.gz</span><br><span class="line">drwxr-xr-x 5 lsqy lsqy 4.0K 6月  15 02:18 VSCode-linux-x64</span><br></pre></td></tr></table></figure>

<p>从上面可以看到解压出了<code>VSCode-linux-x64</code>目录</p>
<h3 id="3、移动到-usr-local-目录"><a href="#3、移动到-usr-local-目录" class="headerlink" title="3、移动到/usr/local/目录"></a>3、移动到<code>/usr/local/</code>目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv VSCode-linux-x64 /usr/local/</span><br></pre></td></tr></table></figure>

<h3 id="4、添加可执行权限"><a href="#4、添加可执行权限" class="headerlink" title="4、添加可执行权限"></a>4、添加可执行权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/VSCode-linux-x64/code</span><br></pre></td></tr></table></figure>

<h3 id="5、复制一下VScode图标文件到-usr-share-icons-目录"><a href="#5、复制一下VScode图标文件到-usr-share-icons-目录" class="headerlink" title="5、复制一下VScode图标文件到 /usr/share/icons/ 目录"></a>5、复制一下VScode图标文件到 /usr/share/icons/ 目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/local/VSCode-linux-x64/resources/app/resources/linux/code.png /usr/share/icons/</span><br></pre></td></tr></table></figure>

<h3 id="6、创建启动链接，在-usr-share-applications-目录"><a href="#6、创建启动链接，在-usr-share-applications-目录" class="headerlink" title="6、创建启动链接，在/usr/share/applications/目录"></a>6、创建启动链接，在<code>/usr/share/applications/</code>目录</h3><p>在终端使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/share/applications/VSCode.desktop</span><br></pre></td></tr></table></figure>

<p>然后输入以下内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Visual Studio Code</span><br><span class="line">Comment=Multi-platform code editor for Linux</span><br><span class="line">Exec=/usr/local/VSCode-linux-x64/code</span><br><span class="line">Icon=/usr/share/icons/code.png</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=true</span><br><span class="line">Categories=TextEditor;Development;Utility;</span><br><span class="line">MimeType=text/plain;`</span><br></pre></td></tr></table></figure>

<p>保存后退出, 然后复制到桌面:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/share/applications/VSCode.desktop ~/Desktop/</span><br></pre></td></tr></table></figure>

<p>这样就会发现 桌面和 应用程序菜单都有了 VSCode的快捷方式了，也算是大功告成了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>VSCode的插件系统也是很丰富的，大家可以去发掘自己需要的.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archLinux</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>解决微信jssdk在部分安卓和ios设备中签名失败的问题</title>
    <url>/2018/04/29/180429%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1jssdk%E5%9C%A8%E9%83%A8%E5%88%86%E5%AE%89%E5%8D%93%E5%92%8Cios%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%AD%BE%E5%90%8D%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在微信上用history模式开发单页应用时，使用的是react+react-router,遇到了一个比较闹心的问题，就是在有的安卓和ios设备上会出现无法调用微信js-sdk的问题，而我这边有一个需求是需要继续微信的拍照上传等能力的，经过各种尝试，总算目前似乎算找到了一种解决的办法，下面记录一下.<a id="more"></a></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="调取选择图片或者拍照在部分ios上可以，大多数安卓不可以"><a href="#调取选择图片或者拍照在部分ios上可以，大多数安卓不可以" class="headerlink" title="调取选择图片或者拍照在部分ios上可以，大多数安卓不可以"></a>调取选择图片或者拍照在部分ios上可以，大多数安卓不可以</h3><p>这个试错的过程中真是怀疑了很多可能，就不一一列出了，总之以后多加注意了。</p>
<h2 id="正确配置"><a href="#正确配置" class="headerlink" title="正确配置"></a>正确配置</h2><p>因为history模式每次切换path会发生变化，所以如果在变化之后的页面需要调用sdk，那么就需要重新进行下微信的config，所以我在项目的utils下封装了一个重新进行微信config的方法，下面这个是最终得出的一个正确的配置，过程中真的是很不顺利，最终竟然是在config前加了一个setTimeout解决了这个奇怪的问题，还有一点要注意的就是这个方法要在componentDidMount里面调用这个setWxConfig方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const setWxConfig = () =&gt; &#123;</span><br><span class="line">    // JSSDK配置</span><br><span class="line">    let WXCONFIG = window.config || &#123;&#125;;</span><br><span class="line">    let url = window.location.href.split(&apos;#&apos;)[0];</span><br><span class="line">    url = encodeURIComponent(url);</span><br><span class="line">    // getWxConfig是封装的换取服务端签名的接口</span><br><span class="line">    getWxConfig(&apos;?url=&apos; + url).then((data) =&gt; &#123;</span><br><span class="line">        if(data) &#123;</span><br><span class="line">            WXCONFIG = data;</span><br><span class="line">            WXCONFIG.jsApiList = [&apos;scanQRCode&apos;, &apos;closeWindow&apos;, &apos;chooseImage&apos;, &apos;uploadImage&apos;, &apos;previewImage&apos;];</span><br><span class="line">            // WXCONFIG.debug = true;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                wx.config(WXCONFIG);</span><br><span class="line">            &#125;, 500);	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(err) =&gt; &#123;</span><br><span class="line">        throw err;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>微信开发</tag>
      </tags>
  </entry>
  <entry>
    <title>react、vue、angular简要对比</title>
    <url>/2017/12/26/171226react%E3%80%81vue%E3%80%81angular%E7%AE%80%E8%A6%81%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>简要记录一下这三个比较流行的前端框架的一些对比<a id="more"></a></p>
<h2 id="框架与库"><a href="#框架与库" class="headerlink" title="框架与库"></a>框架与库</h2><p>  react和vue都是一个只专注于视图的库，而angular则是一个不折不扣的框架，里面集成了路由、单元测试等；而react和vue则是结合上它们的社区生态能够变成一个框架，比如react全家桶（react+react-router+redux)、vue全家桶（vue+vue-router+vuex)；</p>
<h2 id="上手难度方面"><a href="#上手难度方面" class="headerlink" title="上手难度方面"></a>上手难度方面</h2><p>  vue最容易上手，首先它是我们华人Evan You（尤雨溪）开发的，所以最开始的中文文档是很健全的；其次是react，再就是angular1，最后是angular2+版本；angular2以上官方推荐使用typescript，确实会稍微将其门槛提高一下，但是带来的可维护性也是很显然的。</p>
<h2 id="vue的优化做的比react好一些"><a href="#vue的优化做的比react好一些" class="headerlink" title="vue的优化做的比react好一些"></a>vue的优化做的比react好一些</h2><p>  在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。如要避免不必要的子组件的重渲染，你需要在所有可能的地方使用 无状态组件（PureComponent） ，或是手动实现 shouldComponentUpdate 方法。同时你可能会需要使用不可变的数据结构来使得你的组件更容易被优化。 然而，使用 PureComponent 和 shouldComponentUpdate 时，需要保证该组件的整个子树的渲染输出都是由该组件的 props 所决定的。如果不符合这个情况，那么此类优化就会导致难以察觉的渲染结果不一致。这使得 React 中的组件优化伴随着相当的心智负担。而在做vue相关的项目时，我们只需要关注于业务逻辑，而不需要去操心是否会产生不必要的组件渲染，因为vue已经把这些麻烦的东西很好的解决了。</p>
<h2 id="社区方面"><a href="#社区方面" class="headerlink" title="社区方面"></a>社区方面</h2><p>  react和angular相对来说比vue稍微好一些，因为react后面有facebook在官方维护，angular有google官方维护；当然vue现在也是发展的非常不错，维护者也是在逐步增多；</p>
<h2 id="跨端能力"><a href="#跨端能力" class="headerlink" title="跨端能力"></a>跨端能力</h2><p>  react相对来说强一些，因为react-native的大规模使用使其优势稍微强一些；当然现在vue结合weex也是可以实现跨端，但是weex现在还是仍需继续成长的；基于angular的一个很不错的跨端项目-ionic也是非常不错的。</p>
<h2 id="vue写起来更加流畅、方便，-react语法更简单、扩展更强大。"><a href="#vue写起来更加流畅、方便，-react语法更简单、扩展更强大。" class="headerlink" title="vue写起来更加流畅、方便， react语法更简单、扩展更强大。"></a>vue写起来更加流畅、方便， react语法更简单、扩展更强大。</h2><p>  在这一方面，react和vue的出发点似乎是不一样的，比如，对于列表循环，使用vue，直接在标签上写 v-for 即可，然后就可以直接循环了，而react需要通过一个数组的map，然后在return，在形式上来说，vue的写法还是更加舒服一点。 另外，由于vue局部的数据双向绑定，所以vue在处理表单这一块也是游刃有余，非常方便，而react仅仅是处理一个表单，就需要添加很多无关的代码，这个还是非常别扭的。<br>可以看得出来，vue提供了更多的api，可以做更多的事情，但是， 这也体现了react的优点，即非常简单，提供的api很少，它只帮我们做了虚拟DOM的工作，其他的事情可以让我们自由的发挥，所以从这个角度来说，react还是更加简洁一些。</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>  angular是双向数据绑定，vue在表单上可以双向绑定，默认是单向绑定，react则一直是单向数据，这样应用的整个状态更加可控一些。React推崇的是函数式编程和单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。<br>React和Vue都可以配合Redux/vuex来管理状态数据。</p>
<h2 id="性能方面"><a href="#性能方面" class="headerlink" title="性能方面"></a>性能方面</h2><p>  angular1会差一些，因为它的脏检查， 在 AngularJS 中，当 watcher 越来越多时会变得越来越慢，因为作用域内的每一次变化，所有 watcher 都要重新计算。并且，如果一些 watcher 触发另一个更新，脏检查循环（digest cycle）可能要运行多次。AngularJS 用户常常要使用深奥的技术，以解决脏检查循环的问题。有时没有简单的办法来优化有大量 watcher 的作用域。Vue 和react则根本没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，再加上虚拟dom的强大之处，性能会好一些。</p>
<h2 id="简要总结"><a href="#简要总结" class="headerlink" title="简要总结"></a>简要总结</h2><p>  如果是初级开发者，则可以先从vue开始入手，等掌握的差不多了，可以去用一下react，当再有精力的时候可以去学一下typescript去上手一下angular，总之，需要学的东西很多，慢慢去攻克。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析reduce与reduceRight</title>
    <url>/2018/04/25/180425%E6%B5%85%E6%9E%90reduce%E4%B8%8EreduceRight/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;在传统的实际开发中，经常在遇到处理数组的一些问题的时候就采用for循环，当然可以解决遇到的问题，但是站在优雅的角度来看是相当不优雅的，况且是在现在其实是有现成的api能够更好的解决for循环能够解决的问题，下面简单介绍下数组的这两个方法，<code>reduce</code>与<code>reduceRight</code>.<a id="more"></a></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>对数组中的所有元素调用指定的回调函数。该回调函数的返回值为累积结果，并且此返回值在下一次调用该回调函数时作为参数提供。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array1.reduce(callbackfn[, initialValue])</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">- array1 必需，一个数组对象</span><br><span class="line">- callbackfn 必需。一个接受最多四个参数的函数。对于数组中的每个元素，reduce 方法都会调用 callbackfn 函数一次。</span><br><span class="line">- initialValue 可选。如果指定 initialValue，则它将用作初始值来启动累积。第一次调用 callbackfn 函数会将此值作为参数而非数组值提供。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line"></span><br><span class="line">- 通过最后一次调用回调函数获得的累积结果。</span><br><span class="line"></span><br><span class="line">异常</span><br><span class="line">当满足下列任一条件时，将引发 TypeError 异常：</span><br><span class="line">- callbackfn 参数不是函数对象。</span><br><span class="line">- 数组不包含元素，且未提供 initialValue。</span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li><p>如果提供了 initialValue，则 <code>reduce</code> 方法会对数组中的每个元素调用一次 callbackfn 函数（按升序索引顺序）。如果未提供 initialValue，则 <code>reduce</code> 方法会对从第二个元素开始的每个元素调用 callbackfn 函数。</p>
</li>
<li><p>回调函数的返回值在下一次调用回调函数时作为 previousValue 参数提供。最后一次调用回调函数获得的返回值为 <code>reduce</code> 方法的返回值。</p>
</li>
<li><p>不为数组中缺少的元素调用该回调函数。</p>
</li>
</ul>
<h3 id="回调函数语法"><a href="#回调函数语法" class="headerlink" title="回调函数语法"></a>回调函数语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">回调函数的语法如下所示：</span><br><span class="line"></span><br><span class="line">function callbackfn(previousValue, currentValue, currentIndex, array1)</span><br><span class="line"></span><br><span class="line">可使用最多四个参数来声明回调函数。</span><br><span class="line">- previousValue 通过上一次调用回调函数获得的值。如果向 `reduce` 方法提供 initialValue，则在首次调用函数时，previousValue 为 initialValue。</span><br><span class="line">- currentValue 当前数组元素的值。</span><br><span class="line">- currentIndex 当前数组元素的数字索引。</span><br><span class="line">- array1 包含该元素的数组对象。</span><br></pre></td></tr></table></figure>

<h3 id="第一次调用回调函数"><a href="#第一次调用回调函数" class="headerlink" title="第一次调用回调函数"></a>第一次调用回调函数</h3><p>在第一次调用回调函数时，作为参数提供的值取决于 <code>reduce</code> 方法是否具有 initialValue 参数。</p>
<p>如果向 <code>reduce</code> 方法提供 initialValue：</p>
<ul>
<li><p>previousValue 参数为 initialValue。</p>
</li>
<li><p>currentValue 参数是数组中的第一个元素的值。</p>
</li>
</ul>
<p>如果未提供 initialValue：</p>
<ul>
<li><p>previousValue 参数是数组中的第一个元素的值。</p>
</li>
<li><p>currentValue 参数是数组中的第二个元素的值。</p>
</li>
</ul>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="例子1-数组求和问题"><a href="#例子1-数组求和问题" class="headerlink" title="例子1 数组求和问题"></a>例子1 数组求和问题</h4><h5 id="传统for循环方式"><a href="#传统for循环方式" class="headerlink" title="传统for循环方式"></a>传统for循环方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [3,4,5,6];</span><br><span class="line">let sum = 0;</span><br><span class="line">for(let i = 0, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;sum&apos;, sum);</span><br></pre></td></tr></table></figure>

<h5 id="reduce方式"><a href="#reduce方式" class="headerlink" title="reduce方式"></a>reduce方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [3,4,5,6];</span><br><span class="line">function sumFunc(prev, curr) &#123;</span><br><span class="line">    return prev += curr;</span><br><span class="line">&#125;</span><br><span class="line">let sum = arr.reduce(sumFunc, 0);</span><br><span class="line">console.log(&apos;sum&apos;, sum);</span><br></pre></td></tr></table></figure>

<h4 id="例子2-数组去重问题"><a href="#例子2-数组去重问题" class="headerlink" title="例子2 数组去重问题"></a>例子2 数组去重问题</h4><h5 id="传统for循环方式-1"><a href="#传统for循环方式-1" class="headerlink" title="传统for循环方式"></a>传统for循环方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [3,4,5,6,6,3];</span><br><span class="line">function removeDuplicate(array) &#123;</span><br><span class="line">    const newArr = [];</span><br><span class="line">    const obj = &#123;&#125;;</span><br><span class="line">    for(let i = 0, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">        if(!obj[array[i]]) &#123;</span><br><span class="line">            newArr.push(array[i]);</span><br><span class="line">            obj[array[i]] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;arr&apos;, removeDuplicate(arr));</span><br></pre></td></tr></table></figure>

<h5 id="reduce方式-1"><a href="#reduce方式-1" class="headerlink" title="reduce方式"></a>reduce方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [3,4,5,6,6,3];</span><br><span class="line">function removeDuplicate(array) &#123;</span><br><span class="line">    const obj = &#123;&#125;;</span><br><span class="line">    return array.reduce((prev, next) =&gt; &#123;</span><br><span class="line">        if(!obj[next]) &#123;</span><br><span class="line">            prev.push(next);</span><br><span class="line">            obj[next] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return prev;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;arr&apos;, removeDuplicate(arr));</span><br></pre></td></tr></table></figure>

<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>按<strong>降序顺序</strong>对数组中的所有元素调用指定的回调函数。该回调函数的返回值为累积结果，并且此返回值在下一次调用该回调函数时作为参数提供,其实主要就是调用回调函数的时候是从右边开始调用，其他的跟<code>reduce</code>并无多大区别，这里就不详细介绍了</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面只是举了两个比较常见的例子，数组求和和数组去重，其实<code>reduce</code>的用法是相当强大的，redux框架里就用到了<code>reduce</code>,在这里记录下来也是提醒自己以后不要把思维固化到以前的观念上，要多去关注和尝试一些新的特性，不断去尝试用更优雅的方式去解决问题。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>reduce</tag>
        <tag>reduceRight</tag>
      </tags>
  </entry>
  <entry>
    <title>配置create-react-app支持less</title>
    <url>/2019/01/22/190122%E9%85%8D%E7%BD%AEcreate-react-app%E6%94%AF%E6%8C%81less/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;使用create-react-app初始化出来的项目默认是不支持less的，对于一些习惯于用less的人来说就不太方便了，现在记录下来改造的方法，使其可以支持less。<a id="more"></a></p>
<h3 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev less less-loader</span><br></pre></td></tr></table></figure>

<h3 id="修改react-scripts中的webpack配置"><a href="#修改react-scripts中的webpack配置" class="headerlink" title="修改react-scripts中的webpack配置"></a>修改react-scripts中的webpack配置</h3><blockquote>
<p>我这里使用的react-scripts的版本是<code>2.1.3</code>，修改的webpack文件地址位于node_modules/react-scripts/config/webpack.config.js</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改第48行</span><br><span class="line">将const cssRegex = /\.css$/；修改为const cssRegex = /\.(css|less)$/；</span><br><span class="line">修改第441行开始</span><br><span class="line">&#123;</span><br><span class="line">    test: cssRegex,</span><br><span class="line">    exclude: cssModuleRegex,</span><br><span class="line">    use: getStyleLoaders(&#123;</span><br><span class="line">        importLoaders: 1,</span><br><span class="line">        sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    &#125;, &apos;less-loader&apos;), // 主要是修改这里，在这里将less-loader加上</span><br><span class="line">    // Don&apos;t consider CSS imports dead code even if the</span><br><span class="line">    // containing package claims to have no side effects.</span><br><span class="line">    // Remove this when webpack adds a warning or an error for this.</span><br><span class="line">    // See https://github.com/webpack/webpack/issues/6571</span><br><span class="line">    sideEffects: true,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>这样不方便的就是需要手动进行这个操作，所以就是在项目刚开始的时候注意下，配置好以后就可以了~</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>create-react-app</tag>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2常用命令</title>
    <url>/2019/06/03/190603pm2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="pm2简要介绍"><a href="#pm2简要介绍" class="headerlink" title="pm2简要介绍"></a>pm2简要介绍</h3><p>pm2（process manager）是一个进程管理工具，维护一个进程列表，可以用它来管理你的node进程，负责所有正在运行的进程，并查看node进程的状态，也支持性能监控，负载均衡等功能。<a id="more"></a></p>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 start app.js // 启动单个app.js进程</span><br><span class="line">pm2 start app.js --watch // 实时监控app.js，当app.js文件有变动时，pm2会自动reload</span><br><span class="line">pm2 start app.js -i 3 // 启动3个app.js进程，启动多个进程之后pm2可以对请求进行负载均衡，提高响应效率以及稳定性</span><br><span class="line">pm2 start app.js -i max // 表示pm2将自动检测可用CPU的数量并尽可能地多运行进程</span><br><span class="line">pm2 start app.js -i 3 --name server // 启动三个进程并将其命名为server</span><br><span class="line">pm2 start npm --name server -i 3 -- run start // **pm2通过package.json启动项目并且将其命名为server，这一个情况在node应用中很常用**</span><br></pre></td></tr></table></figure>

<h4 id="查看进程："><a href="#查看进程：" class="headerlink" title="查看进程："></a>查看进程：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 list // 查看所有进程信息</span><br><span class="line">pm2 show 0 或者 # pm2 info 0    // 查看指定进程的详细信息，0为PM2进程id</span><br></pre></td></tr></table></figure>

<h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 monit // 查看进程的资源消耗情况</span><br></pre></td></tr></table></figure>

<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 stop all  // 停止PM2列表中所有的进程</span><br><span class="line">pm2 stop 0    // 停止PM2列表中进程为0的进程</span><br></pre></td></tr></table></figure>

<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><blockquote>
<p>使用重载而不是重启可以实现无中断式重载</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 reload all  // 重载PM2列表中所有的进程</span><br><span class="line">pm2 reload 0    // 重载PM2列表中进程为0的进程</span><br></pre></td></tr></table></figure>

<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 restart all  // 重启PM2列表中所有的进程</span><br><span class="line">pm2 restart 0    // 重启PM2列表中进程为0的进程</span><br></pre></td></tr></table></figure>

<h4 id="删除PM2进程"><a href="#删除PM2进程" class="headerlink" title="删除PM2进程"></a>删除PM2进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 delete 0    // 删除PM2列表中进程为0的进程</span><br><span class="line">pm2 delete all  // 删除PM2列表中所有的进程</span><br></pre></td></tr></table></figure>

<h4 id="日志操作："><a href="#日志操作：" class="headerlink" title="日志操作："></a>日志操作：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 logs  // 显示所有应用进程的日志</span><br><span class="line">pm2 logs app // 显示app应用的日志</span><br><span class="line">pm2 flush    // 清空所有应用的日志</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>暂时先记录这些常用的命令，后期会进一步整理使用pm2进行自动化部署的相关操作，敬请期待～</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs sleep with async/await</title>
    <url>/2018/11/22/181122Nodejs-sleep-with-async-await/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;在日常开发过程当中，难免有时候需要自己通过<code>Nodejs mock</code>一些数据，如果直接返回的话，在前端展示层面看起来不太真实，所以需要在Nodejs这一层进行下<code>sleep</code>处理，下面简单记录下使用<code>async/await</code>实现的方法,当然还有一些其他的实现方法，比如<code>generator</code>的实现，原理跟这个差不多，就不赘述了。<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// ms是需要sleep的毫秒数</span><br><span class="line">const sleep = ms =&gt; &#123;</span><br><span class="line">    return new Promise(resolve =&gt; setTimeout(resolve, ms))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 伪代码如下</span><br><span class="line">async function testSleep() &#123;</span><br><span class="line">    console.log(&apos;start&apos;);</span><br><span class="line">    await sleep(3000);</span><br><span class="line">    console.log(&apos;end&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testSleep()</span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>缺陷是程序需要在<code>async</code>域里执行。<br>优点是这种方式实际上是用了setTimeout，没有形成进程阻塞，不会造成性能和负载问题。</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>NodeJS</tag>
        <tag>工具方法</tag>
        <tag>async/await</tag>
      </tags>
  </entry>
  <entry>
    <title>GMTC 2019-前端夜话《聊聊前端工程师的成长和发展》会后简要总结</title>
    <url>/2019/06/20/190620GMTC-%E5%89%8D%E7%AB%AF%E5%A4%9C%E8%AF%9D%E3%80%8A%E8%81%8A%E8%81%8A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E5%92%8C%E5%8F%91%E5%B1%95%E3%80%8B%E4%BC%9A%E5%90%8E%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://jdc-wechat.s3.cn-north-1.jdcloud-oss.com/tech/GMTC.jpg" alt></p>
<p>&nbsp;&nbsp;今天晚上去参加了<code>winter</code>主持的<strong>前端夜话：聊聊前端工程师的成长和发展</strong>圆桌论坛分享会，真的是收益颇多，这次的这个嘉宾阵容也是很有诚意的，在现在前端领域都是有一定影响力的嘉宾，嘉宾阵容也列一下：</p>
<ul>
<li>主持人：程劭非（winter），前手机淘宝前端负责人</li>
<li>圆桌论坛嘉宾：</li>
<li>贺师俊（Hax），百姓网技术顾问</li>
<li>王巍（喵神），LINE高级软件工程师</li>
<li>桑世龙（狼叔），阿里巴巴前端技术专家</li>
<li>张鑫旭，《CSS世界》作者</li>
</ul>
<p>这里分享下自己在会议上记录下来的一些受用的地方，主要是<code>winter</code>提出的几个非常有代表性的问题，各位大佬进行的回答，由于当时记录的时候只是大概记了下大致意思，没有录音，难免会有疏漏，如若有不正确的地方，可以及时反馈更正。<a id="more"></a></p>
<h3 id="各位的职业生涯大概描述一下？"><a href="#各位的职业生涯大概描述一下？" class="headerlink" title="各位的职业生涯大概描述一下？"></a>各位的职业生涯大概描述一下？</h3><p>从各位针对这个问题的回答来看，大家都经历过大的公司和小的公司，刚开始的时候也都是从小公司起步，一步一步的摸索前进，慢慢积累，经过不断的努力，带来属于自己的幸运，现在发展成为在领域内有一定知名度，所以我认为大家现在都不应该浮躁，要踏实的去做好自己所在的领域，去积累、沉淀、总结。鑫旭说出的<strong>专注</strong>这两个字很是受用，他从09年毕业到现在一直专注在前端css重构领域，也是取得了很好的结果和成就，现在的我有时候是有些浮躁，总是觉得自己有什么技术都应该学以下，殊不知到最后大概率会落个样样不精通的结果，这一点要多加注意，要能够沉下心来创造出一些东西来，不要以为用别人的框架做出来点东西就是精通XXX，要能创造出一些有用的框架或者库才是应该去着重考虑的。</p>
<h3 id="如何看待全栈？"><a href="#如何看待全栈？" class="headerlink" title="如何看待全栈？"></a>如何看待全栈？</h3><p>狼叔：全栈代表你解决问题的一种能力，当你在面临一些与后端相关的问题的时候，如果你有一些后端的知识储备的话，可以让你在处理和做选择的时候更明智一些。</p>
<p>鑫旭：其实是不怎么觉得全栈的必要性的，你能把现在的前端领域先吃透了再去考虑全栈吧，在现在的大公司更需要的是有深度的人，而不是没有深度，其他都懂点皮毛的人，大公司分工明确，你把自己负责的部分做到极致是很重要的。</p>
<p><code>Hax</code>：全栈这个事情可以看工程师的类型，看你内心的驱动力，</p>
<ul>
<li>第一类： 如果你是想做出非常厉害的产品，改变世界的产品，这样当然是如果你能从前到后，甚至是运营你都能做好，那是再好不过了。</li>
<li>第二类：如果你可能要解决一个世界级的难题，做一个专家型的，那你就需要在这个领域好好深入。</li>
</ul>
<p>所以还是要根据你的特点选好自己的位置。</p>
<p>喵神： 还是认同领域内深度发展，把你现在所做的领域做到极致。</p>
<h3 id="选择大公司还是小公司，大公司和小公司有什么不同？"><a href="#选择大公司还是小公司，大公司和小公司有什么不同？" class="headerlink" title="选择大公司还是小公司，大公司和小公司有什么不同？"></a>选择大公司还是小公司，大公司和小公司有什么不同？</h3><p>针对这个问题，我大致总结下：</p>
<ul>
<li>大公司更看重你的深度，你所在的技术栈足够专业</li>
<li>大公司的平台与福利相对好一些，当然一些小公司也有福利不错的</li>
<li>小公司流程相对简单一些，杂事相对少一些，主要就是做事情</li>
<li>小公司有一个好处是：如果你的CEO或者高管很优秀，那么你可以有机会跟他们进行面对面的交流沟通，如果是在大公司可能这样的机会是很少的</li>
<li>选择公司的时候要考虑去这家公司想得到的是什么，比如<code>Hax</code>当初选择百姓网的时候，也是可以去BAT这样的大厂的，他当时之所以选择了百姓网是因为他想去验证一些技术架构，而这个在当时如果去了大厂或许就不能够得以验证了；而现在<code>Hax</code>选择离开百姓网去360则是因为有些事情在小公司是做不下去的，比如能够去参加到js的标准制定当中，所以根据你的时间阶段去做对应的选择。</li>
</ul>
<h3 id="寒冬期自己应该做些什么？"><a href="#寒冬期自己应该做些什么？" class="headerlink" title="寒冬期自己应该做些什么？"></a>寒冬期自己应该做些什么？</h3><ul>
<li>鑫旭：内功修炼很重要，什么火就学点什么可能更会被淘汰，<strong>要专注</strong>。</li>
<li>狼叔： 当没有目标的时候向钱看，有目标的时候向前看。</li>
<li>喵神：社区里多帮助其他人，多参与一些开源项目，多写一些框架、书，对外输出影响力，你只要比别人跑得快，你也没问题。专一方向的深度很重要，技术预判很重要，选对车道，不要逆行。</li>
<li><code>Hax</code>：这都是命，滑稽一下，其实就是把你无法控制的事情抛诸脑后，做好你可以做的，机遇和运气是留给有准备的人。</li>
<li>君子闲时要有吃紧的心思，忙时要有悠闲的趣味</li>
</ul>
<h3 id="面试有什么建议？"><a href="#面试有什么建议？" class="headerlink" title="面试有什么建议？"></a>面试有什么建议？</h3><ul>
<li>鑫旭：要展示真实的自己，不要过度包装自己，拿起石头砸自己脚</li>
<li>狼叔：自己要学会给自己创造机会，比如做开源项目，参与翻译，自己给自己创造场景，坚持学习，打好基本功</li>
<li>喵神：挂人的话技术只是一方面的，更看重的是学习能力，要能够快速学习所需知识进行工作开展，学习能力怎么看呢？会从跟你交流的能力来进行判断，所以平时要抽出来时间做做分享，多与同事进行沟通，学会很好的去表达自己的想法。</li>
<li><code>Hax</code>：基础是本身技术要不断学习，不要包装过度，宣称的经验要跟自己的实际能力匹配，<strong>真诚</strong>是非常重要的，是否坦诚、踏实。技术是来不得虚的，为人需要保持真诚才行，一两次面试失败没什么，只要自己一直在总结进步就好。</li>
<li><code>winter</code>：不要过度包装，面试的时候面试官一般都能把你拆出来的，这样是很尴尬的，效果也会很不好的。坦诚、真诚、简历上的每一个点都是自己很努力去学习掌握的。比如很多人在简历上都有写自学能力强，那么我会问你最近在学什么呢，那你说说吧？比如说我最近在学函数式编程，那你用这个写一段代码吧～～～另外，面试的时候要细心，认证，能get到面试官想问的点，不要答非所问，因为很多面试官是很忙的，不要浪费他的时间，资深面试官每个问题都是有目的性的，要认真回答，如果你前面都答的很好，那么<code>winter</code>会有一道压轴大题来让你解决，主要是压压你的锐气，哈哈。</li>
</ul>
<h3 id="最近在关注哪些新技术？"><a href="#最近在关注哪些新技术？" class="headerlink" title="最近在关注哪些新技术？"></a>最近在关注哪些新技术？</h3><ul>
<li>flutter &amp; flutter UI</li>
<li>serverless</li>
<li>中国前端联盟</li>
<li>css新特性</li>
</ul>
<h3 id="如何看待35岁中年危机？"><a href="#如何看待35岁中年危机？" class="headerlink" title="如何看待35岁中年危机？"></a>如何看待35岁中年危机？</h3><ul>
<li>做好自己，5年前有问题是30岁以后的程序员怎么办，现在是35岁的程序员怎么办，过5年来就是40岁以后的程序员怎么办了，其实只要你是一直努力学习，不是浑水摸鱼，都不用担心，大家都能生活的不错的，喵神和狼叔一样都是86的</li>
<li>时刻应变，不断学习，无惧危机，掌握应变能力，找到自己有优势的地方，完全不需要过于焦虑的</li>
<li>哪一个行业都有中年危机，<code>Hax</code>进了一个40岁程序员群，发现自己还是最小的，其实大年纪的程序员大都也是发展的不错的。现在这个时代的学习条件是很好的，不用担心，大胆前行</li>
</ul>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>听完分享之后，其实心中有了一个答案，要在目前的领域专注，深入去做一些事情，不要模糊不定，思前想后。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>GMTC</tag>
        <tag>职业生涯</tag>
        <tag>个人成长</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中ios模拟器的常用操作</title>
    <url>/2019/05/26/190526mac%E4%B8%ADios%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>下面主要列出了以下几个常用的命令，包括：查找ios模拟器中包含哪些机型、启动ios模拟器中的指定机型。<a id="more"></a></p>
</blockquote>
<h3 id="1、查找ios模拟器中包含哪些机型"><a href="#1、查找ios模拟器中包含哪些机型" class="headerlink" title="1、查找ios模拟器中包含哪些机型"></a>1、查找ios模拟器中包含哪些机型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">instruments -s</span><br></pre></td></tr></table></figure>

<p>会输出以下模拟机型，也就是说可以启动以下这些机型进行模拟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Known Devices:</span><br><span class="line">lsqy的MacBook Pro </span><br><span class="line">Apple TV (12.2) [CD901014-4F0C-46C3-AE9A-A22AC37493FB] (Simulator)</span><br><span class="line">Apple TV 4K (12.2) [31425E49-958D-40E3-8393-93EA246943F0] (Simulator)</span><br><span class="line">Apple TV 4K (at 1080p) (12.2) [6E1C2AFC-32DD-4CC5-A280-8049BD3B8A1A] (Simulator)</span><br><span class="line">Apple Watch Series 2 - 38mm (5.2) [26759A5E-00B9-4BD4-A5D2-5AE544DA841B] (Simulator)</span><br><span class="line">Apple Watch Series 2 - 42mm (5.2) [33BA7025-31F7-42A7-817B-A4A70CFC60A8] (Simulator)</span><br><span class="line">Apple Watch Series 3 - 38mm (5.2) [03739305-4300-452F-BB8B-8671854BD210] (Simulator)</span><br><span class="line">Apple Watch Series 3 - 42mm (5.2) [CE4486B9-E587-4AC8-9821-9E50D7FF8BFB] (Simulator)</span><br><span class="line">iPad (5th generation) (12.2) [D46751EA-EDD9-4C92-8652-14F339A8372C] (Simulator)</span><br><span class="line">iPad (6th generation) (12.2) [20A0FEF8-C34F-4960-B7DF-AA2A7A9EEEF6] (Simulator)</span><br><span class="line">iPad Air (12.2) [ED0958FA-0C6B-4E2E-B87D-9B272F49C9AD] (Simulator)</span><br><span class="line">iPad Air (3rd generation) (12.2) [E981EDDA-587C-4194-84A8-B018E909046B] (Simulator)</span><br><span class="line">iPad Air 2 (12.2) [F1000542-2E19-415D-A6A6-C791D07BC504] (Simulator)</span><br><span class="line">iPad Pro (10.5-inch) (12.2) [F950D852-A65E-4797-9B23-53C0A2510815] (Simulator)</span><br><span class="line">iPad Pro (11-inch) (12.2) [B34F8807-15F1-45F2-966D-65BBB45A2FEB] (Simulator)</span><br><span class="line">iPad Pro (12.9-inch) (12.2) [5BFA185B-E0FB-43ED-8991-B79982ECE0F8] (Simulator)</span><br><span class="line">iPad Pro (12.9-inch) (2nd generation) (12.2) [DCE2842B-AF9A-40CC-AAC6-D6F12828C937] (Simulator)</span><br><span class="line">iPad Pro (12.9-inch) (3rd generation) (12.2) [8EBD2F29-9C1E-42C6-B95D-2F3273CEB56E] (Simulator)</span><br><span class="line">iPad Pro (9.7-inch) (12.2) [79CEBBA2-5665-44D2-BC2D-EF01E971672B] (Simulator)</span><br><span class="line">iPhone 5s (12.2) [0A515BFC-2C47-4093-B80E-85BE96712436] (Simulator)</span><br><span class="line">iPhone 6 (12.2) [5D695AAE-8D35-4F30-8885-740A85F22AB6] (Simulator)</span><br><span class="line">iPhone 6 Plus (12.2) [8A39537F-0EED-4244-A114-223AF0126B0C] (Simulator)</span><br><span class="line">iPhone 6s (12.2) [1913C53F-394E-446E-A3A7-4DAA87F9D578] (Simulator)</span><br><span class="line">iPhone 6s Plus (12.2) [B2937386-20A9-4ACC-A63E-982BC10F661C] (Simulator)</span><br><span class="line">iPhone 7 (12.2) [A3D3511E-AB79-4849-B104-3D9803198203] (Simulator)</span><br><span class="line">iPhone 7 Plus (12.2) [7A47C656-0C7A-4002-98D0-CB0F6167C138] (Simulator)</span><br><span class="line">iPhone 8 (12.2) [D6083F0A-967F-40D8-88C2-684BDB927B99] (Simulator)</span><br><span class="line">iPhone 8 Plus (12.2) [980B8AED-7F44-4D95-A6F7-AAF561F88883] (Simulator)</span><br><span class="line">iPhone SE (12.2) [09A3F89A-4BFE-4B4D-8793-8D5C1B4B1E36] (Simulator)</span><br><span class="line">iPhone X (12.2) [E374247E-832D-4B61-804D-1C085CA897BD] (Simulator)</span><br><span class="line">iPhone Xs (12.2) [DDDF0B87-7295-417B-9A85-27441B4282AD] (Simulator)</span><br><span class="line">iPhone Xs (12.2) + Apple Watch Series 4 - 40mm (5.2) [6E29B703-74F6-40C7-99A8-0D9CEB5A9777] (Simulator)</span><br><span class="line">iPhone Xs Max (12.2) [F74F45D2-29EA-4490-8490-933FC4084BEA] (Simulator)</span><br><span class="line">iPhone Xs Max (12.2) + Apple Watch Series 4 - 44mm (5.2) [B710C546-C80C-400C-829B-8487D411BF6E] (Simulator)</span><br><span class="line">iPhone Xʀ (12.2) [7E8332CC-2279-40CE-B86B-AD7D21227D0A] (Simulator)</span><br><span class="line">Known Templates:</span><br><span class="line">&quot;Activity Monitor&quot;</span><br><span class="line">&quot;Allocations&quot;</span><br><span class="line">&quot;Blank&quot;</span><br><span class="line">&quot;Core Animation&quot;</span><br><span class="line">&quot;Core Data&quot;</span><br><span class="line">&quot;Counters&quot;</span><br><span class="line">&quot;Energy Log&quot;</span><br><span class="line">&quot;File Activity&quot;</span><br><span class="line">&quot;Game Performance&quot;</span><br><span class="line">&quot;Leaks&quot;</span><br><span class="line">&quot;Metal System Trace&quot;</span><br><span class="line">&quot;Network&quot;</span><br><span class="line">&quot;SceneKit&quot;</span><br><span class="line">&quot;System Trace&quot;</span><br><span class="line">&quot;System Usage&quot;</span><br><span class="line">&quot;Time Profiler&quot;</span><br><span class="line">&quot;Zombies&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2、启动ios模拟器中的指定机型"><a href="#2、启动ios模拟器中的指定机型" class="headerlink" title="2、启动ios模拟器中的指定机型"></a>2、启动ios模拟器中的指定机型</h3><blockquote>
<p>注意启动的时候要将名称输入完全，比如如果要启动<code>iPhone X</code>，则需要将后面括号里的内容也带上<code>iPhone X (12.2)</code>，要不然模拟器会不知道要具体启动哪个机型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcrun instruments -w &apos;iPhone X (12.2)&apos;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>ios模拟器</tag>
      </tags>
  </entry>
  <entry>
    <title>前端通过Blob实现文件下载</title>
    <url>/2019/08/30/190830%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87Blob%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<blockquote>
<p>最近遇到一个需求，需要将页面中的配置信息下载下来供用户方便使用，以前这个场景的需求有时候会放到后端处理，然后给返回一个下载链接。其实并不需要这么麻烦，这样既增大了服务器的负载，也让用户产生了没有必要的网络请求，现在前端也是可以直接通过<code>Blob</code>对象进行前端文件下载了，下面简单记录下相关实现<a id="more"></a></p>
</blockquote>
<h2 id="Blob对象简要介绍"><a href="#Blob对象简要介绍" class="headerlink" title="Blob对象简要介绍"></a>Blob对象简要介绍</h2><p><code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。<code>Blob</code> 表示的不一定是<code>JavaScript</code>原生格式的数据。<code>File</code> 接口基于<code>Blob</code>，继承了 <code>Blob</code> 的功能并将其扩展使其支持用户系统上的文件。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const aBlob = new Blob( array, options );</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong></p>
<ul>
<li>array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array ，或者其他类似对象的混合体，它将会被放进 Blob。DOMStrings会被编码为UTF-8。</li>
<li>options 是一个可选的BlobPropertyBag字典，它可能会指定如下两个属性：<ul>
<li>type，默认值为 “”，它代表了将会被放入到blob中的数组内容的MIME类型。</li>
<li>endings，默认值为”transparent”，用于指定包含行结束符\n的字符串如何被写入。 它是以下两个值中的一个： “native”，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 “transparent”，代表会保持blob中保存的结束符不变</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const debug = &#123;hello: &quot;world&quot;&#125;;</span><br><span class="line">const blob = new Blob([JSON.stringify(debug, null, 2)],&#123;type : &apos;application/json&apos;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="URL-createObjectURL-与-URL-revokeObjectURL-介绍"><a href="#URL-createObjectURL-与-URL-revokeObjectURL-介绍" class="headerlink" title="URL.createObjectURL() 与 URL.revokeObjectURL()介绍"></a>URL.createObjectURL() 与 URL.revokeObjectURL()介绍</h2><p><code>URL.createObjectURL()</code> 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。相当于这个方法创建了一个传入对象的内存引用地址</p>
<h3 id="createObjectURL语法"><a href="#createObjectURL语法" class="headerlink" title="createObjectURL语法"></a>createObjectURL语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objectURL = URL.createObjectURL(object);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong></p>
<ul>
<li>object 是用于创建 URL 的 File 对象、Blob 对象或者 MediaSource 对象。​</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>一个可以引用到指定对象的<code>DOMString</code></li>
</ul>
<p><code>URL.revokeObjectURL()</code> 静态方法用来释放一个之前已经存在的、通过调用 <code>URL.createObjectURL()</code> 创建的 <code>URL</code> 对象。当你结束使用某个 <code>URL</code> 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</p>
<p>你可以在 <code>sourceopen</code> 被处理之后的任何时候调用 <code>revokeObjectURL()</code>。这是因为 <code>createObjectURL()</code> 仅仅意味着将一个媒体元素的 <code>src</code> 属性关联到一个 <code>MediaSource</code> 对象上去。调用<code>revokeObjectURL()</code> 使这个潜在的对象回到原来的地方，允许平台在合适的时机进行<strong>垃圾收集</strong>。</p>
<h3 id="revokeObjectURL语法"><a href="#revokeObjectURL语法" class="headerlink" title="revokeObjectURL语法"></a>revokeObjectURL语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.URL.revokeObjectURL(objectURL);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong></p>
<ul>
<li>objectURL 是一个 DOMString，表示通过调用 <code>URL.createObjectURL()</code> 方法产生的 URL 对象。</li>
</ul>
<p><strong>内存管理</strong></p>
<p>在每次调用<code>createObjectURL()</code> 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 <code>URL.revokeObjectURL()</code> 方法来释放。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p>
<h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><blockquote>
<p>比如在某后台管理中希望将用户的几个配置信息导入到一个<code>json</code>文件当中供用户下载下来</p>
</blockquote>
<p>代码实现如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">  name: &apos;lsqy&apos;,</span><br><span class="line">  password: &apos;yourpassword&apos;,</span><br><span class="line">  ak: &apos;XXXXXXXXXX&apos;,</span><br><span class="line">  sk: &apos;XXXXXXXXXX&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const blobContent = new Blob(</span><br><span class="line">  [JSON.stringify(config, null, 2)],</span><br><span class="line">  &#123;type : &apos;application/json&apos;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const blobUrl = window.URL.createObjectURL(blobContent)</span><br><span class="line"></span><br><span class="line">downloadFileByBlob(blobUrl, &apos;config.json&apos;)</span><br><span class="line"></span><br><span class="line">function downloadFileByBlob(blobUrl, filename) &#123;</span><br><span class="line">  const eleLink = document.createElement(&apos;a&apos;)</span><br><span class="line">  eleLink.download = filename</span><br><span class="line">  eleLink.style.display = &apos;none&apos;</span><br><span class="line">  eleLink.href = blobUrl</span><br><span class="line">  // 触发点击</span><br><span class="line">  document.body.appendChild(eleLink)</span><br><span class="line">  eleLink.click()</span><br><span class="line">  // 然后移除</span><br><span class="line">  document.body.removeChild(eleLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上面的代码，我们可以得到一个<code>config.json</code>的文件，可以看到，其实很简单就实现了这个场景需求，当然这里是下载的<code>json</code>文件,下载其他的文件也是一样的道理，只是需要得到相应文件的<code>blob</code>数据，再结合相应的<a href="https://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">MIME</a>类型即可;</p>
<p>兼容性方面目前主流浏览器都已支持，ie10以及以上也支持。</p>
<p>另外<code>Blob</code>结合<code>URL.revokeObjectURL()</code>与<code>URL.revokeObjectURL()</code>还可以用在预览图片、预览PDF、视频链接防盗等多种场景中，大家可以发挥自己的想象力来进行实现</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Blob</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL</a></li>
</ul>
]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>URL</tag>
        <tag>Blob</tag>
        <tag>前端下载文件</tag>
        <tag>createObjectURL</tag>
        <tag>revokeObjectURL</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Taro与Typescript开发的网易云音乐小程序</title>
    <url>/2019/07/29/190729%E5%9F%BA%E4%BA%8ETaro%E4%B8%8Etypescript%E5%BC%80%E5%8F%91%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>基于<code>Taro</code>与网易云音乐api开发，技术栈主要是：<code>typescript+taro+taro-ui+redux</code>,目前主要是着重小程序端的展示，主要也是借此项目强化下上述几个技术栈的使用,通过这个项目也可以帮助你快速使用<code>Taro</code>开发一个属于你自己的小程序～</p>
</blockquote>
<hr>

<p>
  <a href="https://github.com/lsqy/taro-music/stargazers" style="border-bottom: none;" target="_blank" rel="noopener">
    <image src="https://img.shields.io/github/stars/lsqy/taro-music.svg?style=flat&label=Star" alt="GitHub stars" style="border: none;display: inline !important;">
  </image></a>
  <a href="https://github.com/lsqy/taro-music/fork" style="border-bottom: none;" target="_blank" rel="noopener">
    <image src="https://img.shields.io/github/forks/lsqy/taro-music.svg?style=flat&label=Fork" alt="GitHub forks" style="border: none;display: inline !important;">
  </image></a>
  <a href="https://github.com/lsqy/taro-music/watchers" style="border-bottom: none;" target="_blank" rel="noopener">
    <image src="https://img.shields.io/github/watchers/lsqy/taro-music.svg?style=flat&label=Watch" alt="GitHub watchers" style="border: none;display: inline !important;">
  </image></a>
  <a href="https://github.com/lsqy/taro-music/blob/master/LICENSE" style="border-bottom: none;" target="_blank" rel="noopener">
    <image src="https://img.shields.io/github/license/lsqy/taro-music" alt="GitHub LICENSE" style="border: none;display: inline !important;">
  </image></a>
</p>

<p>github地址：<a href="https://github.com/lsqy/taro-music" target="_blank" rel="noopener">taro-music</a>，感兴趣的话可以<code>star</code>关注下，功能会进行持续完善 <a id="more"></a></p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先需要在src目录下创建一个config.ts,可以根据自己的需要将其替换成线上地址，接口服务是使用的<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/" target="_blank" rel="noopener">NeteaseCloudMusicApi</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const baseUrl: string = &apos;http://localhost:3000&apos; // 这里的配置的这个url是后端服务的请求地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在运行本项目前，请先确保已经全局安装了Taro，安装可见<a href="https://nervjs.github.io/taro/docs/GETTING-STARTED.html" target="_blank" rel="noopener">官网指导</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动后端接口服务</span><br><span class="line"></span><br><span class="line">git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git</span><br><span class="line"></span><br><span class="line">cd NeteaseCloudMusicApi</span><br><span class="line"></span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">npm run start</span><br><span class="line"></span><br><span class="line">接下来启动前端项目</span><br><span class="line"></span><br><span class="line">git clone https://github.com/lsqy/taro-music.git</span><br><span class="line"></span><br><span class="line">cd taro-music</span><br><span class="line"></span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">npm run dev:weapp</span><br></pre></td></tr></table></figure>

<h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><ul>
<li><input checked disabled type="checkbox"> 用户登陆</li>
<li><input checked disabled type="checkbox"> 退出登陆</li>
<li><input checked disabled type="checkbox"> 我的关注列表</li>
<li><input checked disabled type="checkbox"> 我的粉丝列表</li>
<li><input disabled type="checkbox"> 我的动态列表</li>
<li><input checked disabled type="checkbox"> 最近播放列表</li>
<li><input disabled type="checkbox"> 我的电台</li>
<li><input disabled type="checkbox"> 我的收藏</li>
<li><input checked disabled type="checkbox"> 推荐歌单</li>
<li><input checked disabled type="checkbox"> 推荐电台</li>
<li><input checked disabled type="checkbox"> 推荐电台</li>
<li><input checked disabled type="checkbox"> 我创建的歌单列表</li>
<li><input checked disabled type="checkbox"> 我收藏的歌单列表</li>
<li><input checked disabled type="checkbox"> 共用的歌单详情列表</li>
<li><input checked disabled type="checkbox"> 歌曲播放页面</li>
<li><input checked disabled type="checkbox"> 歌词滚动</li>
<li><input checked disabled type="checkbox"> 歌曲切换播放模式（随机播放/单曲循环/顺序播放）</li>
<li><input checked disabled type="checkbox"> 切换上一首/下一首</li>
<li><input checked disabled type="checkbox"> 喜欢/取消喜欢某首歌曲</li>
<li><input disabled type="checkbox"> 评论列表</li>
<li><input checked disabled type="checkbox"> 统一的播放组件，方便进行切换页面后可以随时进入到播放页面</li>
</ul>
<h3 id="目录结构简要介绍"><a href="#目录结构简要介绍" class="headerlink" title="目录结构简要介绍"></a>目录结构简要介绍</h3><blockquote>
<p>这里主要介绍下<code>src</code>目录，因为开发主要是在这个目录下进行的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- src</span><br><span class="line"> - actions // `redux`中的相关异步操作在这里进行</span><br><span class="line"> - assets // 静态资源目录，这里引入了所需的图片资源，以及`fontawesome`字体图标资源</span><br><span class="line"> - components // 封装的项目中可复用的组件，目前只是抽象了`CLoading`(加载效果组件)、`CLyric`(歌词组件)、`CMusic`(正在播放组件)、`CSlide`(滑块组件)、`CTitle`、`CUserListItem`</span><br><span class="line"> - constants // 项目中的常量定义，目前定义了`typescript`的公共定义、`reducers`的名称定义、状态码的定义</span><br><span class="line"> - pages // 项目中的业务页面都在这个目录中</span><br><span class="line"> - reducers // `redux`中的相关同步操作在这里进行</span><br><span class="line"> - services // 可复用的服务可以放在这个目录中，目前只是封装了接口请求的公共服务，可以根据自己项目的需要进行其他服务的扩充</span><br><span class="line"> - store // redux的初始文件</span><br><span class="line"> - utils // 可以复用的工具方法可以放到这个目录当中，目前封装了格式化、歌词解析的相关方法</span><br><span class="line">  - decorators // 抽象的装饰器，主要为了解决在切换页面之后仍然可以继续保持播放状态，因为目前`taro`不支持全局组件</span><br><span class="line"> - app.scss // 全局样式</span><br><span class="line"> - app.tsx // 全局入口文件</span><br><span class="line"> - base.scss // 基础样式</span><br><span class="line"> - config.ts // 项目的全局配置，目前只是配置了`baseUrl`是后端服务的基准请求地址</span><br></pre></td></tr></table></figure>

<h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul>
<li>复用的评论列表</li>
<li>搜索功能 <em>已完成部分功能</em></li>
<li>个人主页支持跳转</li>
<li>歌手页面</li>
<li>视频播放</li>
<li><code>react-hooks</code>重构部分功能</li>
</ul>
<h3 id="最近更新"><a href="#最近更新" class="headerlink" title="最近更新"></a>最近更新</h3><ul>
<li>加入搜索功能（进一步完善中）</li>
<li>加入了视频播放（进一步完善中）</li>
</ul>
<div align="center">
  <image width="900" src="https://oscimg.oschina.net/oscnet/593c5fbb8302492750ce20ad4a61086f417.jpg">
</image></div>

<h3 id="效果图预览"><a href="#效果图预览" class="headerlink" title="效果图预览"></a>效果图预览</h3><blockquote>
<p>下面简要列出几张效果图</p>
</blockquote>
<div align="center">
  <image width="900" src="https://oscimg.oschina.net/oscnet/f52f4448ce3475f5ecd002958ae1413a3dd.jpg">
</image></div>

<div align="center">
  <image width="900" src="https://oscimg.oschina.net/oscnet/446008d8690a962a105f839c46d7638b89b.jpg">
</image></div>

<div align="center">
  <image width="900" src="https://oscimg.oschina.net/oscnet/38e5dcac4baaca87195e95a115132cb7958.jpg">
</image></div>


<h3 id="有待完善部分"><a href="#有待完善部分" class="headerlink" title="有待完善部分"></a>有待完善部分</h3><p>还有一些功能点以及细节都还有待进一步完善，目前先把大致主要的功能进行了下实现，当然如果发现什么问题，欢迎能够提交<code>issues</code>,发现之后我会及时进行更正,欢迎 <code>star</code> 和 <code>fork</code>，感谢大家支持🙏。</p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>开源项目</tag>
        <tag>taro</tag>
        <tag>typescript</tag>
        <tag>taro-ui</tag>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title>【内推】团队招聘,机会难得~</title>
    <url>/2021/11/17/20200708%E5%9B%A2%E9%98%9F%E6%8B%9B%E8%81%98/</url>
    <content><![CDATA[<p><img src="https://img.lsqy.tech/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D.jpg" alt></p>
<blockquote>
<p>目前我所在的团队正在大量招聘志同道合的朋友们加入，感兴趣的可以详聊～</p>
</blockquote>
<h2 id="职位名称："><a href="#职位名称：" class="headerlink" title="职位名称："></a>职位名称：</h2><p>蚂蚁集团-数字金融线-芝麻信用-高级前端工程师/前端技术专家</p>
<h2 id="职位描述："><a href="#职位描述：" class="headerlink" title="职位描述："></a>职位描述：</h2><ul>
<li>1.与设计师、产品工程师紧密工作，负责产出高质量的产品前端层；</li>
<li>2.参与多种平台的应用开发，包括 Web 及 Mobile 等产品，负责前端交互的实现；</li>
<li>3.能充分理解项目需求和设计需求，组织大家学习研究新的技术，并能迅速转化到潜在项目中；</li>
<li>4.与团队成员分享经验和新技术，帮助团队成长。</li>
</ul>
<h2 id="职位要求："><a href="#职位要求：" class="headerlink" title="职位要求："></a>职位要求：</h2><ul>
<li>1.掌握良好的前端技能，有拿得出手的代码能力，了解 WEB 标准化、性能优化方法，了解可用性、可访问性和安全性；</li>
<li>2.热爱前端，热爱设计，对新鲜事物充满好奇心，有折腾的想法和精力，喜欢捣鼓各种互联网应用；</li>
<li>3.能和设计师谈产品设计，和后端开发研讨技术实现方案，制定服务接口，崇尚团队合作；</li>
<li>4.自我管理能力强良好，健康的创业心态，快速的学习能力，乐于分享与沟通。</li>
</ul>
<h2 id="工作地点："><a href="#工作地点：" class="headerlink" title="工作地点："></a>工作地点：</h2><p>杭州/上海</p>
<h2 id="简历投递："><a href="#简历投递：" class="headerlink" title="简历投递："></a>简历投递：</h2><p><a href="mailto:yiqian.lsq@antgroup.com" target="_blank" rel="noopener">yiqian.lsq@antgroup.com</a><br>lsqylsqylsqy（微信）</p>
<p><strong>目前 HC 充足，机会难得，反馈速度很快，团队内部技术栈覆盖全面，氛围很棒，蚂蚁的整体基建有很多值得学习的地方，当然你还有机会跟大牛面对面交流，有意向可以随时联系我。</strong></p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>JD</tag>
        <tag>招聘</tag>
        <tag>内推</tag>
        <tag>阿里巴巴</tag>
        <tag>蚂蚁集团</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上传文件到服务器</title>
    <url>/2020/03/09/20200309mac%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>简要记录下使用<code>scp</code>命令实现在mac中上传下载文件/文件夹到服务器<a id="more"></a></p>
</blockquote>
<h3 id="ssh连接远程主机"><a href="#ssh连接远程主机" class="headerlink" title="ssh连接远程主机"></a>ssh连接远程主机</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh username@serverip</span><br></pre></td></tr></table></figure>

<h3 id="上传本地文件到服务器"><a href="#上传本地文件到服务器" class="headerlink" title="上传本地文件到服务器"></a>上传本地文件到服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp /local_dir/filename username@serverip:/path</span><br></pre></td></tr></table></figure>

<h3 id="上传本地文件夹到服务器"><a href="#上传本地文件夹到服务器" class="headerlink" title="上传本地文件夹到服务器"></a>上传本地文件夹到服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r /local_dir username@serverip:/path</span><br></pre></td></tr></table></figure>

<h3 id="从服务器上下载文件"><a href="#从服务器上下载文件" class="headerlink" title="从服务器上下载文件"></a>从服务器上下载文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp username@serverip:/path/filename /Users/lsqy/Desktop</span><br></pre></td></tr></table></figure>

<h3 id="从服务器上下载文件夹"><a href="#从服务器上下载文件夹" class="headerlink" title="从服务器上下载文件夹"></a>从服务器上下载文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r username@serverip:/path/ (远程目录) /Users/lsqy/Desktop （本地目录）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>上传文件</tag>
        <tag>下载文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Vscode快捷键</title>
    <url>/2020/03/14/20200314Mac-Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>为了方便平常查找使用，好记性不如烂笔头，特此记录一下<a id="more"></a></p>
</blockquote>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + X 剪切（未选中文本的情况下，剪切光标所在行）</span><br><span class="line">Command + C 复制（未选中文本的情况下，复制光标所在行）</span><br><span class="line">Option + Up 向上移动行</span><br><span class="line">Option + Down 向下移动行</span><br><span class="line">Option + Shift + Up 向上复制行</span><br><span class="line">Option + Shift + Down 向下复制行</span><br><span class="line">Command + Shift + K 删除行</span><br><span class="line">Command + Enter 下一行插入</span><br><span class="line">Command + Shift + Enter 上一行插入</span><br><span class="line">Command + Shift + \ 跳转到匹配的括号</span><br><span class="line">Command + [ 减少缩进</span><br><span class="line">Command + ] 增加缩进</span><br><span class="line">Home 跳转至行首</span><br><span class="line">End 跳转到行尾</span><br><span class="line">Command + Up 跳转至文件开头</span><br><span class="line">Command + Down 跳转至文件结尾</span><br><span class="line">Ctrl + PgUp 按行向上滚动</span><br><span class="line">Ctrl + PgDown 按行向下滚动</span><br><span class="line">Command + PgUp 按屏向上滚动</span><br><span class="line">Command + PgDown 按屏向下滚动</span><br><span class="line">Command + Shift + [ 折叠代码块</span><br><span class="line">Command + Shift + ] 展开代码块</span><br><span class="line">Command + K Command + [ 折叠全部子代码块</span><br><span class="line">Command + K Command + ] 展开全部子代码块</span><br><span class="line">Command + K Command + 0 折叠全部代码块</span><br><span class="line">Command + K Command + J 展开全部代码块</span><br><span class="line">Command + K Command + C 添加行注释</span><br><span class="line">Command + K Command + U 移除行注释</span><br><span class="line">Command + / 添加、移除行注释</span><br><span class="line">Option + Shift + A 添加、移除块注释</span><br><span class="line">Option + Z 自动换行、取消自动换行</span><br></pre></td></tr></table></figure>

<h2 id="多光标与选择"><a href="#多光标与选择" class="headerlink" title="多光标与选择"></a>多光标与选择</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Option + 点击 插入多个光标</span><br><span class="line">Command + Option + Up 向上插入光标</span><br><span class="line">Command + Option + Down 向下插入光标</span><br><span class="line">Command + U 撤销上一个光标操作</span><br><span class="line">Option + Shift + I 在所选行的行尾插入光标</span><br><span class="line">Command + I 选中当前行</span><br><span class="line">Command + Shift + L 选中所有与当前选中内容相同部分</span><br><span class="line">Command + F2 选中所有与当前选中单词相同的单词</span><br><span class="line">Command + Ctrl + Shift + Left 折叠选中</span><br><span class="line">Command + Ctrl + Shift + Right 展开选中</span><br><span class="line">Alt + Shift + 拖动鼠标 选中代码块</span><br><span class="line">Command + Shift + Option + Up 列选择 向上</span><br><span class="line">Command + Shift + Option + Down 列选择 向下</span><br><span class="line">Command + Shift + Option + Left 列选择 向左</span><br><span class="line">Command + Shift + Option + Right 列选择 向右</span><br><span class="line">Command + Shift + Option + PgUp 列选择 向上翻页</span><br><span class="line">Command + Shift + Option + PgDown 列选择 向下翻页</span><br></pre></td></tr></table></figure>

<h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + Shift + P / F1 显示命令面板</span><br><span class="line">Command + P 快速打开</span><br><span class="line">Command + Shift + N 打开新窗口</span><br><span class="line">Command + W 关闭窗口</span><br></pre></td></tr></table></figure>

<h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + F 查找</span><br><span class="line">Command + Option + F 替换</span><br><span class="line">Command + G 查找下一个</span><br><span class="line">Command + Shift + G 查找上一个</span><br><span class="line">Option + Enter 选中所有匹配项</span><br><span class="line">Command + D 向下选中相同内容</span><br><span class="line">Command + K Command + D 移除前一个向下选中相同内容</span><br></pre></td></tr></table></figure>

<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + T 显示所有符号</span><br><span class="line">Ctrl + G 跳转至某行</span><br><span class="line">Command + P 跳转到某个文件</span><br><span class="line">Command + Shift + O 跳转到某个符号</span><br><span class="line">Command + Shift + M 打开问题面板</span><br><span class="line">F8 下一个错误或警告位置</span><br><span class="line">Shift + F8 上一个错误或警告位置</span><br><span class="line">Ctrl + Shift + Tab 编辑器历史记录</span><br><span class="line">Ctrl + - 后退</span><br><span class="line">Ctrl + Shift + - 前进</span><br><span class="line">Ctrl + Shift + M Tab 切换焦点</span><br></pre></td></tr></table></figure>

<h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + W 关闭编辑器</span><br><span class="line">Command + K F 关闭文件夹</span><br><span class="line">Command + \ 编辑器分屏</span><br><span class="line">Command + 1 切换到第一分组</span><br><span class="line">Command + 2 切换到第二分组</span><br><span class="line">Command + 3 切换到第三分组</span><br><span class="line">Command + K Command + Left 切换到上一分组</span><br><span class="line">Command + K Command + Right 切换到下一分组</span><br><span class="line">Command + K Command + Shift + Left 左移编辑器</span><br><span class="line">Command + K Command + Shift + Right 右移编辑器</span><br><span class="line">Command + K Left 激活左侧编辑组</span><br><span class="line">Command + K Right 激活右侧编辑组</span><br></pre></td></tr></table></figure>

<h2 id="文件操作相关"><a href="#文件操作相关" class="headerlink" title="文件操作相关"></a>文件操作相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + N 新建文件</span><br><span class="line">Command + O 打开文件</span><br><span class="line">Command + S 保存文件</span><br><span class="line">Command + Shift + S 另存为</span><br><span class="line">Command + Option + S 全部保存</span><br><span class="line">Command + W 关闭</span><br><span class="line">Command + K Command + W 全部关闭</span><br><span class="line">Command + Shift + T 重新打开被关闭的编辑器</span><br><span class="line">Command + K Enter 保持打开</span><br><span class="line">Ctrl + Tab 打开下一个</span><br><span class="line">Ctrl + Shift + Tab 打开上一个</span><br><span class="line">Command + K P 复制当前文件路径</span><br><span class="line">Command + K R 在资源管理器中查看当前文件</span><br><span class="line">Command + K O 新窗口打开当前文件</span><br></pre></td></tr></table></figure>

<h2 id="控制显示相关"><a href="#控制显示相关" class="headerlink" title="控制显示相关"></a>控制显示相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command + Ctrl + F 全屏、退出全屏</span><br><span class="line">Command + Option + 1 切换编辑器分屏方式（横、竖）</span><br><span class="line">Command + + 放大</span><br><span class="line">Command + - 缩小</span><br><span class="line">Command + B 显示、隐藏侧边栏</span><br><span class="line">Command + Shift + E 显示资源管理器 或 切换焦点</span><br><span class="line">Command + Shift + F 显示搜索框</span><br><span class="line">Ctrl + Shift + G 显示Git面板</span><br><span class="line">Command + Shift + D 显示调试面板</span><br><span class="line">Command + Shift + X 显示插件面板</span><br><span class="line">Command + Shift + H 全局搜索替换</span><br><span class="line">Command + Shift + J 显示、隐藏高级搜索</span><br><span class="line">Command + Shift + C 打开新终端</span><br><span class="line">Command + Shift + U 显示输出面板</span><br><span class="line">Command + Shift + V Markdown预览窗口</span><br><span class="line">Command + K V 分屏显示 Markdown预览窗口</span><br></pre></td></tr></table></figure>

<h2 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F9 设置 或 取消断点</span><br><span class="line">F5 开始 或 继续</span><br><span class="line">F11 进入</span><br><span class="line">Shift + F11 跳出</span><br><span class="line">F10 跳过</span><br><span class="line">Command + K Command + I 显示悬停信息</span><br></pre></td></tr></table></figure>

<h2 id="终端操作相关"><a href="#终端操作相关" class="headerlink" title="终端操作相关"></a>终端操作相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl + ` 显示终端</span><br><span class="line">Ctrl + Shift + ` 新建终端</span><br><span class="line">Command + Up 向上滚动</span><br><span class="line">Command + Down 向下滚动</span><br><span class="line">PgUp 向上翻页</span><br><span class="line">PgDown 向下翻页</span><br><span class="line">Command + Home 滚动到顶部</span><br><span class="line">Command + End 滚动到底部</span><br></pre></td></tr></table></figure>

<h2 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl + Space 打开建议</span><br><span class="line">Command + Shift + Space 参数提示</span><br><span class="line">Tab Emmet插件缩写补全</span><br><span class="line">Option + Shift + F 格式化</span><br><span class="line">Command + K Command + F 格式化选中内容</span><br><span class="line">F12 跳转到声明位置</span><br><span class="line">Option + F12 查看具体声明内容</span><br><span class="line">Command + K F12 分屏查看具体声明内容</span><br><span class="line">Command + . 快速修复</span><br><span class="line">Shift + F12 显示引用</span><br><span class="line">F2 重命名符号</span><br><span class="line">Command + Shift + . 替换为上一个值</span><br><span class="line">Command + Shift + , 替换为下一个值</span><br><span class="line">Command + K Command + X 删除行尾多余空格</span><br><span class="line">Command + K M 更改文件语言</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Vscode快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下查看java的安装路径</title>
    <url>/2020/04/06/20200406Mac%E4%B8%8B%E6%9F%A5%E7%9C%8Bjava%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<blockquote>
<p>通过<code>jdk</code>官方下载地址中的<code>dmg</code>文件进行安装后，如果想知道具体安装到哪个目录，可以执行下面的命令进行查看。<a id="more"></a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/libexec/java_home -V   (注意V是大写)</span><br></pre></td></tr></table></figure>

<p>会得到如下输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  Home /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line">    1.8.0_241, x86_64:	&quot;Java SE 8&quot;	/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home</span><br><span class="line">    1.8.0_191, x86_64:	&quot;Java SE 8&quot;	/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home</span><br></pre></td></tr></table></figure>

<p>上面两个是已安装的<code>jdk</code>目录地址<br>最下面一个是目前Mac默认使用的<code>jdk</code>版本目录地址，可以看到目前是使用的第一个<code>1.8.0_241</code>的版本</p>
]]></content>
      <categories>
        <category>实用小技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>查看java安装路径</tag>
        <tag>环境变量</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML与CSS编码规范</title>
    <url>/2015/07/06/150706Html%E4%B8%8ECSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<blockquote>
<p>宗旨：编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范,让自己的代码更加具有鲁棒性，是每一个优秀的程序员必备的意识，时刻注意要规范自己的编码风格，终究会是利人利己，否则肯定是害人害己，也希望大家都重视起编码规范的重要性，下面列出一些规范，也是警示自己也应该时刻谨记规范编写自己的代码。 <a id="more"></a></p>
</blockquote>
<h2 id="一、黄金定律"><a href="#一、黄金定律" class="headerlink" title="一、黄金定律"></a>一、黄金定律</h2><p>&nbsp; &nbsp;&nbsp; &nbsp;不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的,这一点也就是说明一个项目必须在开展前就把自己的编码规范明确的告诉每一位同事，不管以后交接也好，什么也好，严格按照规范来执行，这样自己项目以后再扩展功能或者部分重构肯定都会事半功倍！</p>
<h2 id="二、HTML部分"><a href="#二、HTML部分" class="headerlink" title="二、HTML部分"></a>二、HTML部分</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul>
<li>用两个空格来代替制表符（tab） 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>嵌套元素应当缩进一次（即两个空格）。</li>
<li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li>
<li>不要在自闭合（self-closing）元素的尾部添加斜线 –HTML5 规范中明确说明这是可选的。</li>
<li>不要省略可选的结束标签（closing tag）（例如，</li>或 ）。
</ul>
<h3 id="2-HTML5-doctype"><a href="#2-HTML5-doctype" class="headerlink" title="2. HTML5 doctype"></a>2. HTML5 doctype</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;为每个 HTML,页面的第一行添加标准模式（standardmode）的声明，这样能够确保在每个浏览器中拥有一致的展现。</p>
<h3 id="3-语言属性根据-HTML5-规范："><a href="#3-语言属性根据-HTML5-规范：" class="headerlink" title="3. 语言属性根据 HTML5 规范："></a>3. 语言属性根据 HTML5 规范：</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言,避免乱码，并且这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-IE-兼容模式"><a href="#4-IE-兼容模式" class="headerlink" title="4. IE 兼容模式"></a>4. IE 兼容模式</h3><p>&nbsp; &nbsp;IE 支持通过特定的 <meta> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为edge mode，从而通知 IE 采用其所支持的最新的模式。<br>例：<code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</code></p>
<h3 id="5-字符编码"><a href="#5-字符编码" class="headerlink" title="5. 字符编码"></a>5. 字符编码</h3><p>&nbsp; &nbsp;通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码,因为UTF-8基本上支持世界上大多数语言格式）<br>例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-引入-CSS-和-JavaScript-文件"><a href="#6-引入-CSS-和-JavaScript-文件" class="headerlink" title="6. 引入 CSS 和 JavaScript 文件"></a>6. 引入 CSS 和 JavaScript 文件</h3><p>&nbsp; &nbsp;根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性，因为 text/css 和 text/javascript 分别是它们的默认值,并且在性能的角度上，要在文档开始加载的时候加载CSS文件，在文档底部加载JavaScript，这样JavaScript不会阻碍页面的渲染；<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;code-guide.css&quot;&gt;</span><br><span class="line">&lt;!-- JavaScript --&gt;</span><br><span class="line">&lt;script src=&quot;code-guide.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-实用为王"><a href="#7-实用为王" class="headerlink" title="7. 实用为王"></a>7. 实用为王</h3><p>&nbsp; &nbsp;尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p>
<h3 id="8-属性顺序"><a href="#8-属性顺序" class="headerlink" title="8. 属性顺序"></a>8. 属性顺序</h3><p>&nbsp; &nbsp;HTML属性应当按照以下给出的顺序依次排列，确保代码的易读性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* class</span><br><span class="line">* id, name</span><br><span class="line">* data-*</span><br><span class="line">* src, for, type, href</span><br><span class="line">* title, alt</span><br><span class="line">* aria-*, role</span><br></pre></td></tr></table></figure>

<p>&nbsp; &nbsp;class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。</p>
<h3 id="9-布尔（boolean）型属性"><a href="#9-布尔（boolean）型属性" class="headerlink" title="9. 布尔（boolean）型属性"></a>9. 布尔（boolean）型属性</h3><p>&nbsp; &nbsp;布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。<br>更多信息请参考 WhatWG section on boolean attributes：<br>元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。<br>如果一定要为其赋值的话，请参考 WhatWG 规范：<br>如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要再收尾添加空白符。<br>简单来说，就是不用赋值。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; disabled&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;</span><br><span class="line">&lt;select&gt;&lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-减少标签的数量"><a href="#10-减少标签的数量" class="headerlink" title="10. 减少标签的数量"></a>10. 减少标签的数量</h3><p>&nbsp; &nbsp;编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。请看下面的案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Not so great --&gt;&lt;span class=&quot;avatar&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;...&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- Better --&gt;&lt;img class=&quot;avatar&quot; src=&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="11-JavaScript-生成的标签"><a href="#11-JavaScript-生成的标签" class="headerlink" title="11. JavaScript 生成的标签"></a>11. JavaScript 生成的标签</h3><p>&nbsp; &nbsp;通过 JavaScript 生成的标签让内容变得不易查找、编辑，并且降低性能。能避免时尽量避免。这一点自己灵活掌握，具体看需求</p>
<h2 id="三、CSS部分"><a href="#三、CSS部分" class="headerlink" title="三、CSS部分"></a>三、CSS部分</h2><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul>
<li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>为选择器分组时，将单独的选择器单独放在一行。</li>
<li>为了代码的易读性，在每个声明块的左花括号前添加一个空格。</li>
<li>声明块的右花括号应当单独成行。</li>
</ul>
<ul>
<li>每条声明语句的 : 后应该插入一个空格。</li>
<li>为了获得更准确的错误报告，每条声明都应该独占一行。</li>
<li>所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。</li>
<li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，box-shadow）。</li>
<li>不要在 rgb()、rgba()、hsl()、hsla() 或 rect() 值的内部的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，.5 代替 0.5；-.5px 代替 -0.5px）。</li>
<li>十六进制值应该全部小写，例如，#fff。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。</li>
<li>尽量使用简写形式的十六进制值，例如，用 #fff 代替#ffffff。</li>
<li>为选择器中的属性添加双引号，例如，input[type=”text”]。只有在某些情况下是可选的，但是，为了代码的一致性，建议都加上双引号。</li>
<li>避免为 0 值指定单位，例如，用 margin: 0; 代替margin: 0px;。</li>
</ul>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Bad CSS */.selector, .selector-secondary, .selector[type=text] &#123;</span><br><span class="line">  padding:15px;</span><br><span class="line">  margin:0px 0px 15px;</span><br><span class="line">  background-color:rgba(0, 0, 0, 0.5);</span><br><span class="line">  box-shadow:0px 1px 2px #CCC,inset 0 1px 0 #FFFFFF&#125;</span><br><span class="line"></span><br><span class="line">/* Good CSS*/.selector,.selector-secondary,.selector[type=&quot;text&quot;] &#123;</span><br><span class="line">  padding: 15px;</span><br><span class="line">  margin-bottom: 15px;</span><br><span class="line">  background-color: rgba(0,0,0,.5);</span><br><span class="line">  box-shadow: 0 1px 2px #ccc, inset 0 1px 0 #fff;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-声明顺序相关的属性声明应当归为一组，并按照下面的顺序排列："><a href="#2-声明顺序相关的属性声明应当归为一组，并按照下面的顺序排列：" class="headerlink" title="2. 声明顺序相关的属性声明应当归为一组，并按照下面的顺序排列："></a>2. 声明顺序相关的属性声明应当归为一组，并按照下面的顺序排列：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Positioning</span><br><span class="line">- Box model</span><br><span class="line">- Typographic</span><br><span class="line">- Visual</span><br></pre></td></tr></table></figure>

<p>&nbsp; &nbsp;&nbsp; &nbsp;由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。<br>其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。<br>完整的属性列表及其排列顺序请参考 Recess。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.declaration-order &#123;</span><br><span class="line"> /* Positioning */</span><br><span class="line"> position: absolute;</span><br><span class="line"> top: 0;</span><br><span class="line"> right: 0;</span><br><span class="line"> bottom: 0;</span><br><span class="line"> left: 0;</span><br><span class="line"> z-index: 100;</span><br><span class="line"></span><br><span class="line"> /* Box-model */</span><br><span class="line"> display: block;</span><br><span class="line"> float: right;</span><br><span class="line"> width: 100px;</span><br><span class="line"> height: 100px;</span><br><span class="line"></span><br><span class="line"> /* Typography */ 排版样式</span><br><span class="line"> font: normal 13px &quot;Helvetica Neue&quot;, sans-serif;</span><br><span class="line"> line-height: 1.5;</span><br><span class="line"> color: #333;</span><br><span class="line"> text-align: center;</span><br><span class="line"></span><br><span class="line"> /* Visual */ 视觉上的</span><br><span class="line"> background-color: #f5f5f5;</span><br><span class="line"> border: 1px solid #e5e5e5;</span><br><span class="line"> border-radius: 3px;</span><br><span class="line"></span><br><span class="line"> /* Misc */ 杂类</span><br><span class="line"> opacity: 1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-不要使用-import与-标签相比，-import-指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种："><a href="#3-不要使用-import与-标签相比，-import-指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：" class="headerlink" title="3. 不要使用 @import与  标签相比，@import 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种："></a>3. 不要使用 @import与 <link> 标签相比，@import 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</h3><ul>
<li>使用多个 <link> 元素</li>
<li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li>
<li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li>
</ul>
<p>请参考 Steve Souders 的文章了解更多知识。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Use link elements --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;core.css&quot;&gt;</span><br><span class="line">&lt;!-- Avoid @imports --&gt;</span><br><span class="line">&lt;style&gt;@import url(&quot;more.css&quot;);&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-媒体查询（Media-query）的位置"><a href="#4-媒体查询（Media-query）的位置" class="headerlink" title="4. 媒体查询（Media query）的位置"></a>4. 媒体查询（Media query）的位置</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。下面给出一个典型的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.element &#123; ... &#125;.element-avatar &#123; ... &#125;.element-selected &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">@media (min-width: 480px) &#123;</span><br><span class="line">  .element &#123; ...&#125;</span><br><span class="line">  .element-avatar &#123; ... &#125;</span><br><span class="line">  .element-selected &#123; ... &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-带前缀的属性当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。"><a href="#5-带前缀的属性当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。" class="headerlink" title="5. 带前缀的属性当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。"></a>5. 带前缀的属性当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</h3><p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Prefixed properties */</span><br><span class="line">.selector &#123;</span><br><span class="line">  -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15);</span><br><span class="line">          box-shadow: 0 1px 2px rgba(0,0,0,.15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。"><a href="#6-单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。" class="headerlink" title="6. 单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。"></a>6. 单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;这样做的关键因素是为了错误检测 – 例如，CSS 校验器指出在 183 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Single declarations on one line */</span><br><span class="line">.span1 &#123; width: 60px; &#125;</span><br><span class="line">.span2 &#123; width: 140px; &#125;</span><br><span class="line">.span3 &#123; width: 220px; &#125;</span><br><span class="line"></span><br><span class="line">/* Multiple declarations, one per line */.sprite &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 16px;</span><br><span class="line">  height: 15px;</span><br><span class="line">  background-image: url(../img/sprite.png);&#125;</span><br><span class="line">.icon           &#123; background-position: 0 0; &#125;</span><br><span class="line">.icon-home      &#123; background-position: 0 -20px; &#125;</span><br><span class="line">.icon-account   &#123; background-position: 0 -40px; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-简写形式的属性声明（具体情况具体操作）"><a href="#7-简写形式的属性声明（具体情况具体操作）" class="headerlink" title="7. 简写形式的属性声明（具体情况具体操作）"></a>7. 简写形式的属性声明（具体情况具体操作）</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* padding</span><br><span class="line">* margin</span><br><span class="line">* font</span><br><span class="line">* background</span><br><span class="line">* border</span><br><span class="line">* border-radius</span><br></pre></td></tr></table></figure>

<p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的 heading 元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。<br>MDN（Mozilla Developer Network）上一片非常好的关于shorthand properties 的文章，对于不太熟悉简写属性声明及其行为的用户很有用。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Bad example */</span><br><span class="line">.element &#123;</span><br><span class="line">  margin: 0 0 10px;</span><br><span class="line">  background: red;</span><br><span class="line">  background: url(&quot;image.jpg&quot;);</span><br><span class="line">  border-radius: 3px 3px 0 0;&#125;</span><br><span class="line"></span><br><span class="line">/* Good example */</span><br><span class="line">.element &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  background-color: red;</span><br><span class="line">  background-image: url(&quot;image.jpg&quot;);</span><br><span class="line">  border-top-left-radius: 3px;</span><br><span class="line">  border-top-right-radius: 3px;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-Less-和-Sass-中的嵌套"><a href="#8-Less-和-Sass-中的嵌套" class="headerlink" title="8. Less 和 Sass 中的嵌套"></a>8. Less 和 Sass 中的嵌套</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;避免非必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Without nesting</span><br><span class="line">.table &gt; thead &gt; tr &gt; th &#123; … &#125;</span><br><span class="line">.table &gt; thead &gt; tr &gt; td &#123; … &#125;</span><br><span class="line"></span><br><span class="line">// With nesting</span><br><span class="line">.table &gt; thead &gt; tr &#123;</span><br><span class="line">  &gt; th &#123; … &#125;</span><br><span class="line">  &gt; td &#123; … &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-注释代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或-class-名称。"><a href="#9-注释代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或-class-名称。" class="headerlink" title="9. 注释代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。"></a>9. 注释代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。</h3><p>对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Bad example */</span><br><span class="line">/* Modal header */</span><br><span class="line">.modal-header &#123;</span><br><span class="line">  ...&#125;</span><br><span class="line"></span><br><span class="line">/* Good example */</span><br><span class="line">/* Wrapping element for .modal-title and .modal-close */</span><br><span class="line">.modal-header &#123;</span><br><span class="line">  ...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-class-命名"><a href="#10-class-命名" class="headerlink" title="10. class 命名"></a>10. class 命名</h3><ul>
<li>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。</li>
<li>避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。</li>
<li>class 名称应当尽可能短，并且意义明确。</li>
<li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<p>在为 Sass 和 Less 变量命名是也可以参考上面列出的各项规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Bad example */</span><br><span class="line">.t &#123; ... &#125;</span><br><span class="line">.red &#123; ... &#125;</span><br><span class="line">.header &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">/* Good example */</span><br><span class="line">.tweet &#123; ... &#125;</span><br><span class="line">.important &#123; ... &#125;</span><br><span class="line">.tweet-header &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="11、选择器"><a href="#11、选择器" class="headerlink" title="11、选择器"></a>11、选择器</h3><ul>
<li>对于通用元素使用 class ，这样利于渲染性能的优化。</li>
<li>对于经常出现的组件，避免使用属性选择器（例如，[class^=”…”]）。浏览器的性能会受到这些因素的影响。</li>
<li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 。</li>
<li>只有在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）（例如，不使用带前缀的 class 时 – 前缀类似于命名空间）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* Bad example */</span><br><span class="line">span &#123; ... &#125;</span><br><span class="line">.page-container #stream .stream-item .tweet .tweet-header .username &#123; ... &#125;</span><br><span class="line">.avatar &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">/* Good example */</span><br><span class="line">.avatar &#123; ... &#125;</span><br><span class="line">.tweet-header .username &#123; ... &#125;</span><br><span class="line">.tweet .avatar &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="12、代码组织"><a href="#12、代码组织" class="headerlink" title="12、代码组织"></a>12、代码组织</h3><ul>
<li>以组件为单位组织代码段。</li>
<li>制定一致的注释规范。</li>
<li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。</li>
<li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。</li>
</ul>
<h3 id="13、编辑器配置"><a href="#13、编辑器配置" class="headerlink" title="13、编辑器配置"></a>13、编辑器配置</h3><p>&nbsp; &nbsp;&nbsp; &nbsp;将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p>
<ul>
<li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li>
<li>保存文件时，删除尾部的空白符。</li>
<li>设置文件编码为 UTF-8。</li>
<li>在文件结尾添加一个空白行。</li>
</ul>
<p>参照文档并将这些配置信息添加到项目的 .editorconfig 文件中。例如：Bootstrap 中的 .editorconfig 实例。更多信息请参考 about EditorConfig。</p>
<p>参考：<code>http://www.css88.com/doc/codeguide/</code></p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax小结</title>
    <url>/2015/08/01/150801Ajax%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;相信大家现在每一个开发人员对AJAX都不陌生，每天肯定离不开跟它打交道，事实证明它确实很大程度的提高了用户体验。有一次跟身边的一个朋友聊天，问它对AJAX有什么深入理解，他说不就是用jquery里的AJAX嘛，按那个格式写就行了，其他的也没必要了解，但我觉得我们不应只是类库的使用者，我认为还是要‘知其然知其所以然’,不能是停留在会用的基础上，虽然不能把其全部实现都如数分析出，但是从原理的角度还是可以知道的，下面也是自己大概总结了下AJAX的原理，总结不当之处还望指出。^^_^^</p>
<h2 id="AJAX简介"><a href="#AJAX简介" class="headerlink" title="AJAX简介"></a>AJAX简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;AJAX全称其实是“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术<br>&nbsp;&nbsp;&nbsp;&nbsp;我们经常也是用于通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，不会像最早以前只要请求下数据，就得刷新页面。<br>&nbsp;&nbsp;&nbsp;&nbsp;说到这里，也算是AJAX拯救了Javascript，因为在2005年之前Javscript经常被认为是一个很低级的脚本语言，最重要的是很多开发者都用它开发了一些烦人的广告之类的，最终导致Javascript在好几个主流浏览器上都经常被禁用，相信现在有些开发者也知道每个浏览器都有一个禁用Javascript的选项，不过这时的我们并不是真的禁用它，最多是处于调试的目的，但那时候可是真的禁用，好了，野史就先说到这….2005年对于AJAX可以说是一个重要的元年，很多重大的事件让大众对它真的是刮目相看，Google在它著名的交互应用程序中使用了异步通讯，如Google、Google地图、Google搜索等。而AJAX又是基于Javascript，所以就此Javascript又重新发展了起来。</p>
<h2 id="AJAX核心XMLHttpRequest"><a href="#AJAX核心XMLHttpRequest" class="headerlink" title="AJAX核心XMLHttpRequest"></a>AJAX核心XMLHttpRequest</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Ajax的原理简单来说通过XMLHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用Javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>&nbsp;&nbsp;&nbsp;&nbsp;XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。<br>首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onreadystatechange  每次状态改变所触发事件的事件处理程序。</span><br><span class="line">responseText     从服务器进程返回数据的字符串形式。</span><br><span class="line">responseXML    从服务器进程返回的DOM兼容的文档数据对象。</span><br><span class="line">status        从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</span><br><span class="line">status Text       伴随状态码的字符串信息</span><br><span class="line">readyState       对象状态值</span><br><span class="line">0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</span><br><span class="line">1 (初始化) open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。</span><br><span class="line">2 (发送数据) Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。</span><br><span class="line">3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</span><br><span class="line">4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</span><br></pre></td></tr></table></figure>

<p>它能实现的四个主要点是：</p>
<ul>
<li>在不重新加载页面的情况下更新网页</li>
<li>在页面已加载后从服务器请求数据</li>
<li>在页面已加载后从服务器接收数据</li>
<li>在后台向服务器发送数据</li>
</ul>
<h3 id="对于XMLHttpRequest对象的兼容问题"><a href="#对于XMLHttpRequest对象的兼容问题" class="headerlink" title="对于XMLHttpRequest对象的兼容问题"></a>对于XMLHttpRequest对象的兼容问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不同的浏览器使用不同的方法来创建 XMLHttpRequest 对象。</span><br><span class="line">ie5,6 使用 ActiveXObject。</span><br><span class="line">ie高版本的也和其他浏览器使用名为 XMLHttpRequest 的 JavaScript 内建对象。</span><br><span class="line">要克服这个问题，可以使用这段简单的代码：</span><br><span class="line">var XMLHttp=null;</span><br><span class="line">if (window.XMLHttpRequest)//这种方法也可以称之为能力检测</span><br><span class="line">&#123;</span><br><span class="line">XMLHttp=new XMLHttpRequest()</span><br><span class="line">&#125;else if (window.ActiveXObject)</span><br><span class="line">&#123;</span><br><span class="line">XMLHttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原生AJAX使用步骤"><a href="#原生AJAX使用步骤" class="headerlink" title="原生AJAX使用步骤"></a>原生AJAX使用步骤</h2><h3 id="get请求方式"><a href="#get请求方式" class="headerlink" title="get请求方式"></a>get请求方式</h3><h4 id="1-既然要用这个内建对象，就先把它实例化这个内建对象；"><a href="#1-既然要用这个内建对象，就先把它实例化这个内建对象；" class="headerlink" title="1.既然要用这个内建对象，就先把它实例化这个内建对象；"></a>1.既然要用这个内建对象，就先把它实例化这个内建对象；</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 实例化这个内建对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure>

<h4 id="2-通过open方法发起请求行"><a href="#2-通过open方法发起请求行" class="headerlink" title="2.通过open方法发起请求行"></a>2.通过open方法发起请求行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先以get方式提交请求，下面会说明get和post的区别</span><br><span class="line">  xhr.open(&apos;get&apos;, &apos;01.php&apos;);</span><br></pre></td></tr></table></figure>

<h4 id="3-设置了一个请求头"><a href="#3-设置了一个请求头" class="headerlink" title="3.设置了一个请求头"></a>3.设置了一个请求头</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;text/html&apos;);</span><br><span class="line">  get请求可以不设置，post形式的时候需要设置，在这里设上也没有影响</span><br></pre></td></tr></table></figure>

<h4 id="4-发送请求主体"><a href="#4-发送请求主体" class="headerlink" title="4.发送请求主体"></a>4.发送请求主体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  get没有请求主体，但是出于规范的角度，在里面传一个`null`;get请求参数的时候是在url后面</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure>

<h4 id="5-接收服务器响应"><a href="#5-接收服务器响应" class="headerlink" title="5.接收服务器响应"></a>5.接收服务器响应</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;HTTP响应是由服务端发出的，作为客户端更应关心的是响应的结果。<br>HTTP响应3 个组成部分与XMLHttpRequest方法或属性的对应关系。<br>由于服务器做出响应需要时间（比如网速慢等原因），所以我们需要监听服务器响应的状态，然后才能进行处理。而onreadystatechange就是监听XMLHttpRequest的状态的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 监听响应状态并处理</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">  // 响应的状态</span><br><span class="line">  // console.log(xhr.readyState);</span><br><span class="line">  // 响应的服务器状态码</span><br><span class="line">  // console.log(xhr.status);</span><br><span class="line">  // 监听完成的状态及服务器响应状态</span><br><span class="line">  if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">    // 获得结果</span><br><span class="line">    console.log(xhr.responseText);</span><br><span class="line">    // DOM操作将结果放到页面里</span><br><span class="line">    document.getElementById(&apos;result&apos;).innerHTML = xhr.responseText;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><h4 id="1-同上，既然要用这个内建对象，就先把它实例化这个内建对象；"><a href="#1-同上，既然要用这个内建对象，就先把它实例化这个内建对象；" class="headerlink" title="1.同上，既然要用这个内建对象，就先把它实例化这个内建对象；"></a>1.同上，既然要用这个内建对象，就先把它实例化这个内建对象；</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 实例化这个内建对象</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure>

<h4 id="2-通过open方法发起请求行-1"><a href="#2-通过open方法发起请求行-1" class="headerlink" title="2.通过open方法发起请求行"></a>2.通过open方法发起请求行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先以get方式提交请求，下面会说明get和post的区别</span><br><span class="line">  xhr.open(&apos;post&apos;, &apos;01.php&apos;);</span><br></pre></td></tr></table></figure>

<h4 id="3-设置了一个请求头-1"><a href="#3-设置了一个请求头-1" class="headerlink" title="3.设置了一个请求头"></a>3.设置了一个请求头</h4><blockquote>
<p>post方式必须设置请求头</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencodeed&apos;);</span><br></pre></td></tr></table></figure>

<h4 id="4-发送请求主体-1"><a href="#4-发送请求主体-1" class="headerlink" title="4.发送请求主体"></a>4.发送请求主体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  //send里面的参数不是必须得传的，需要就传；没有参数的时候，里面最好写上null，虽然不是必须的，但比较规范，当post方式需要传递参数的时候，在里面传入</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure>

<h4 id="5-接收服务器响应-1"><a href="#5-接收服务器响应-1" class="headerlink" title="5.接收服务器响应"></a>5.接收服务器响应</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 监听响应状态并处理</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">  // 响应的状态</span><br><span class="line">  // console.log(xhr.readyState);</span><br><span class="line">  // 响应的服务器状态码</span><br><span class="line">  // console.log(xhr.status);</span><br><span class="line">  // 监听完成的状态及服务器响应状态</span><br><span class="line">  if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">    // 获得结果</span><br><span class="line">    console.log(xhr.responseText);</span><br><span class="line">    // DOM操作将结果放到页面里</span><br><span class="line">    document.getElementById(&apos;result&apos;).innerHTML = xhr.responseText;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GET和POST请求方式的差异"><a href="#GET和POST请求方式的差异" class="headerlink" title="GET和POST请求方式的差异"></a>GET和POST请求方式的差异</h3><p>1、GET没有请求主体，使用xhr.send(null)<br>2、GET可以通过在请求URL上添加请求参数<br>3、POST可以通过xhr.send(‘name=itcast&amp;age=10’)传参<br>4、POST必须要设置’Content-Type’为’application/x-www-form-urlencodeed’<br>5、GET效率更好（应用多）<br>6、GET大小限制约4K，POST则没有限制</p>
<blockquote>
<p>get方式传参格式：需要将参数放到url后面，格式为?key=val&amp;key1=val1 ，例：xhr.open(‘get’,’index.php?name=jack&amp;age=20’)<br>post方式传参格式：xhr.send(‘name=jack&amp;age=20’)</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这里也只是简要分析了ajax最基本的应用与原理，以后能自己再上一个层面之后就可以再深入下了，XMLHttpRequest2.0已经早已出世了，以后可以另起篇章总结学习下。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript创建对象的七种方法总结</title>
    <url>/2016/01/06/160106Javascript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E7%A7%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近再次拿起《Javascript高级程序设计（第三版）》，真的感觉经典的书何时读都会很有收获，相信好多人都推荐过这本书，这次也是给大家分享下其中创建对象这个主题，也是让自己更加深刻一下。<a id="more"></a></p>
<h2 id="一、工厂模式"><a href="#一、工厂模式" class="headerlink" title="一、工厂模式"></a>一、工厂模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：function createPerson(name,age,job) &#123;</span><br><span class="line">          var o = new Object( );</span><br><span class="line">          o.name = name;</span><br><span class="line">          o.age = age;</span><br><span class="line">          o.job = job;</span><br><span class="line">          o.sayName = function ( ) &#123;</span><br><span class="line">               alert(this.name);</span><br><span class="line">          &#125;;</span><br><span class="line">          return o;</span><br><span class="line">     &#125;</span><br><span class="line">var person1 = createPerson(&quot;jim&quot;,29,&quot;teacher&quot;);</span><br><span class="line">var person2 = createPerson(&quot;tom&quot;,29,&quot;doctor&quot;);</span><br><span class="line">工厂模式虽然解决了创建多个对象的问题，但却没有解决对象识别的问题（即怎么知道一个对象的类型）；</span><br></pre></td></tr></table></figure>

<h2 id="二、构造函数模式"><a href="#二、构造函数模式" class="headerlink" title="二、构造函数模式"></a>二、构造函数模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：function Person(name,age,job) &#123;</span><br><span class="line">          this.name = name;</span><br><span class="line">          this.age = age;</span><br><span class="line">          this .job = job;</span><br><span class="line">          this .sayName = function ( ) &#123;</span><br><span class="line">               alert(this.name);</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">var person1 = new Person(&quot;jim&quot;,29,&quot;teacher&quot;);</span><br><span class="line">var person2 = new Person(&quot;tom&quot;,29,&quot;doctor&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>  ①、没有显示地创建对象；<br>  ②、直接将属性和方法赋给了this对象；<br>  ③、没有return语句<br>  创建Person的新实例，必须通过new操作符，以这种方式调用构造函数会经历以下四个步骤：<br>  ①、创建一个新对象；<br>  ②、将构造函数的作用域赋给新对象（因此this就指向了这个新对象）；<br>  ③、执行构造函数中的代码（初始化对象）；<br>  ④、返回新对象<br>  这样就能够通过instanceof检测实例了，对象也就具备了类型</p>
<h2 id="三、原型模式"><a href="#三、原型模式" class="headerlink" title="三、原型模式"></a>三、原型模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person( ) &#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = &quot;jim&quot;;</span><br><span class="line">Person.prototype.age = 29;</span><br><span class="line">Person.prototype.job = teacher&quot;;</span><br><span class="line">Person.prototype.sayName = function ( ) &#123;</span><br><span class="line">          alert(this.name);</span><br><span class="line">     &#125;;</span><br><span class="line">var person1 = new Person( );</span><br><span class="line">person1.sayName( );</span><br><span class="line">var person2 = new Person( );</span><br><span class="line">person2.sayName( );</span><br><span class="line">alert(person1.sayName === person2.sayName) //true</span><br></pre></td></tr></table></figure>

<p>缺点：原型模式的最大问题是由其共享的本性所导致的，这种共享对于函数非常合适，对于那些包含基本值的属性倒也还说得过去，通过在实例中添加一个同名属性，可以隐藏原型中的属性，然后对于引用类型值的属性来说，问题就比较突出了，只要一个实例改变，则所有是例都会发生同样的改变，因为实例只是有一个指针指向这个共享的引用类型，所以在开发中经常采用下面的这种组合模式；</p>
<h2 id="四、组合使用构造函数模式和原型模式"><a href="#四、组合使用构造函数模式和原型模式" class="headerlink" title="四、组合使用构造函数模式和原型模式"></a>四、组合使用构造函数模式和原型模式</h2><p>&nbsp;&nbsp;&nbsp;构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时共享着对方法的引用，最大限度地节省了内存，另外，这种模式还支持向构造函数传参，可以说是集两种模式之长；</p>
<h2 id="五、动态原型模式"><a href="#五、动态原型模式" class="headerlink" title="五、动态原型模式"></a>五、动态原型模式</h2><p>&nbsp;&nbsp;&nbsp;它把所有的信息都封装在了构造函数中，而通过在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点，换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型；<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name,age,job) &#123;</span><br><span class="line">              //属性</span><br><span class="line">          this.name = name;</span><br><span class="line">          this.age = age;</span><br><span class="line">          this .job = job;</span><br><span class="line">          //方法</span><br><span class="line">          if(typeof this.sayName != &quot;function&quot;)&#123;</span><br><span class="line">              Person.prototype.sayName = function ( ) &#123;</span><br><span class="line">               alert(this.name);</span><br><span class="line">             &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">var person1 = new Person(&quot;jim&quot;,29,&quot;teacher&quot;);</span><br><span class="line">person1.sayName( );</span><br></pre></td></tr></table></figure>

<p>这里只会在sayName( )方法不存在的情况下，才会将它添加到原型中，其中，if语句检查的可以是初始化之后应该存在的任何属性和方法-不必用一大堆if语句检查每个属性和每个方法，只要检查其中一个即可，对于采用这种模式创建的对象，还可以使用instanceof操作符确定它的类型；<br>注意：使用这种动态原型模式时，不能使用对象字面量重写原型，如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系；</p>
<h2 id="六、寄生构造函数模式"><a href="#六、寄生构造函数模式" class="headerlink" title="六、寄生构造函数模式"></a>六、寄生构造函数模式</h2><p>&nbsp;&nbsp;&nbsp;这种模式的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的象，从表面上看，这个函数很像典型的构造函数；</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name,age,job) &#123;</span><br><span class="line">          var o = new Object( );</span><br><span class="line">          o.name = name;</span><br><span class="line">          o.age = age;</span><br><span class="line">          o.job = job;</span><br><span class="line">          o.sayName = function ( ) &#123;</span><br><span class="line">               alert(this.name);</span><br><span class="line">          &#125;;</span><br><span class="line">          return o;</span><br><span class="line">     &#125;</span><br><span class="line">var friend = new Person(&quot;jim&quot;,29,&quot;teacher&quot;);</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;在这个例子中，除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的。构造函数在不返回值的情况下，默认会返回新对象实例，而通过在构造函数末尾添加一个return语句，可以重写调用构造函数时返回的值，如果是简单数据类型直接忽略，是引用类型的话是直接返回这个对象。<br>&nbsp;&nbsp;&nbsp;这个模式可以在特殊情况下用来为对象构造函数，注意一下接下来的说明：返回的对象和构造函数或与构造函数的原型属性之间没有关系，也可以说，构造函数返回的对象与构造函数外部创建的对象没有什么不同，也就不能一栏instanceof操作符来确定对象类型了。只是应用一些很少的特殊情况（可以起到保护内部数据的作用）<br>假设我们想创建一个具有额外方法的特殊数组，由于不能直接修改Array构造函数，因此可以使用这个模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function SpecialArray( ) &#123;</span><br><span class="line">     //创建数组</span><br><span class="line">     var values = new Array( );</span><br><span class="line">     //添加值</span><br><span class="line">     values.push.apply(values,arguments);</span><br><span class="line">     //添加方法</span><br><span class="line">     values.toPipedString = function ( ) &#123;</span><br><span class="line">          return this.join(&quot;|&quot;);</span><br><span class="line">     &#125;;</span><br><span class="line">     //返回数组</span><br><span class="line">     return values;</span><br><span class="line">&#125;</span><br><span class="line">var colors = new SpecialArray(&quot;red&quot;,&quot;blue&quot;.&quot;green&quot;);</span><br><span class="line">alert(colors.toPipedString());  //red|blue|green;</span><br><span class="line">//这样就能确保这个方法只应用这个特殊数组，而不是所有数组了</span><br></pre></td></tr></table></figure>

<h2 id="七、稳妥构造函数模式"><a href="#七、稳妥构造函数模式" class="headerlink" title="七、稳妥构造函数模式"></a>七、稳妥构造函数模式</h2><p>&nbsp;&nbsp;&nbsp;道格拉斯.克罗克福德发明了Javascript中的稳妥对象这个概念，指的是没有公共属性，而且其方法也不引用this的对象。稳妥对象最适合在一些安全的环境中（这些环境中会禁止this和new）或者防止被其他应用程序（如Mashup程序）改动时使用。稳妥构造函数与寄生构造函数模式类似，但有两点不同：一是新创建对象的实例方法不引用this；二是不使用new操作符调用构造函数；</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> function Person(name,age,job) &#123;</span><br><span class="line">     //创建要返回的对象</span><br><span class="line">          var o = new Object( );</span><br><span class="line">          o.sayName = function( ) &#123;</span><br><span class="line">               alert(name);</span><br><span class="line">          &#125;;</span><br><span class="line">               return o;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">var friend = Person(&quot;jim&quot;,29,&quot;teacher&quot;);</span><br><span class="line">friend.sayName( ); //jim</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;这样变量friend中保存的是一个稳妥对象，而除了调用sayName（）方法以外，没有别的方式可以访问其数据成员，即使有其他代码会给这个对象添加方法或数据成员，但也不可能有别的方法访问传到构造函数中的原始数据。这种模式提供的这种安全性，使得它非常适合在某些安全执行环境提供的环境下使用，与寄生构造函数模式类似，使用稳妥构造函数创建的对象与构造函数之间也没有关系，因此instanceof操作符对这种对象也没有意义，其实我现在理解主要也是利用了闭包的思想，用函数包起来之后去保护一些私有变量；</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Browsersync-省时的浏览器同步测试工具</title>
    <url>/2016/01/10/160110Browsersync-%E7%9C%81%E6%97%B6%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%AD%A5%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p>BrowserSync是基于Node.js的, 是一个Node模块， 如果您想要快速使用它，需要先安装一下Node.js<br>安装适用于Mac OS，Windows和Linux。</p>
<h3 id="2-安装-BrowserSync"><a href="#2-安装-BrowserSync" class="headerlink" title="2. 安装 BrowserSync"></a>2. 安装 BrowserSync</h3><p>您可以选择从Node.js的包管理（NPM）库中 安装BrowserSync。打开一个终端窗口，运行以下命令：</p>
<p>npm install -g browser-sync<br>上面的是在全局下安装它们，这样你就可以在所有项目(任何目录)中使用。</p>
<p>当然您也可以结合gulpjs或gruntjs构建工具来使用，在您需要构建的项目里运行下面的命令:</p>
<p>npm install –save-dev browser-sync</p>
<h3 id="3-启动-BrowserSync"><a href="#3-启动-BrowserSync" class="headerlink" title="3. 启动 BrowserSync"></a>3. 启动 BrowserSync</h3><p>一个基本用途是，如果您只希望在对某个css文件进行修改后会同步到浏览器里。那么您只需要运行命令行工具，进入到该项目（目录）下，并运行相应的命令：</p>
<ul>
<li>静态网站</li>
</ul>
<p>如果您想要监听.css文件, 您需要使用服务器模式。 BrowserSync 将启动一个小型服务器，并提供一个URL来查看您的网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// --files 路径是相对于运行该命令的项目（目录）</span><br><span class="line">browser-sync start --server --files &quot;css/*.css&quot;</span><br><span class="line">如果您需要监听多个类型的文件，您只需要用逗号隔开。例如我们再加入一个.html文件</span><br><span class="line"></span><br><span class="line">// --files 路径是相对于运行该命令的项目（目录）</span><br><span class="line">browser-sync start --server --files &quot;css/*.css, *.html&quot;</span><br><span class="line">// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。</span><br><span class="line">browser-sync start --server --files &quot;**/*.css, **/*.html&quot;</span><br></pre></td></tr></table></figure>

<p>不能是中文路径。打开您的命令行工具，进入到BrowsersyncExample目录下，运行以下其中一条命令。Browsersync将创建一个本地服务器并自动打开你的浏览器后访问<a href="http://localhost:3000地址，这一切都会在命令行工具里显示。" target="_blank" rel="noopener">http://localhost:3000地址，这一切都会在命令行工具里显示。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 监听css文件</span><br><span class="line">browser-sync start --server --files &quot;css/*.css&quot;</span><br><span class="line">// 监听css和html文件</span><br><span class="line">browser-sync start --server --files &quot;css/*.css, *.html&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态网站</li>
</ul>
<p>如果您已经有其他本地服务器环境PHP或类似的，您需要使用代理模式。 BrowserSync将通过代理URL(localhost:3000)来查看您的网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 主机名可以是ip或域名</span><br><span class="line">browser-sync start --proxy &quot;主机名&quot; &quot;css/*.css&quot;</span><br></pre></td></tr></table></figure>

<p>在本地创建了一个PHP服务器环境，并通过绑定Browsersync.cn来访问本地服务器，使用以下命令方式，Browsersync将提供一个新的地址localhost:3000来访问Browsersync.cn，并监听其css目录下的所有css文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">browser-sync start --proxy &quot;Browsersync.cn&quot; &quot;css/*.css&quot;</span><br></pre></td></tr></table></figure>

<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>你可以用它来创建简单的开发任务或与其他工具配合使用完成复杂的任务。你要使用它， 只需要 require Browsersync 模块，就像使用其他模块那样。以下是常用方法的详细说明：</p>
<p>在 2.0.0 版本之前<br>直接引用Browsersync模块后即可使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 引用 browserSync 模块</span><br><span class="line">var browserSync = require(&quot;browser-sync&quot;);</span><br><span class="line"></span><br><span class="line">// 启动服务器</span><br><span class="line">browserSync(&#123;server: &quot;./app&quot;&#125;);</span><br><span class="line"></span><br><span class="line">// 调用reload方法</span><br><span class="line">browserSync.reload(&quot;core.css&quot;);</span><br></pre></td></tr></table></figure>

<p>在2.0.0+版本（推荐）<br>虽然上述方式依然支持，但现在我们推荐以下方式代替。调用 .create() 意味着你得到一个唯一的实例并允许您创建多个服务器或代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// require 加载 browser-sync 模块</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// .init 启动服务器</span><br><span class="line">bs.init(&#123;</span><br><span class="line">    server: &quot;./app&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 主Browsersync模块出口</span><br><span class="line">bs.reload(&quot;*.html&quot;);</span><br><span class="line">.create( name )</span><br></pre></td></tr></table></figure>

<h3 id="create-name"><a href="#create-name" class="headerlink" title=".create( name )"></a>.create( name )</h3><p>创建Browsersync实例</p>
<p><strong>name</strong><br>Type: String<br>可稍后用于检索的标识符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个未命名的实例</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 创建一个命名实例</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).create(&apos;My server&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建多个</span><br><span class="line">var bs1 = require(&quot;browser-sync&quot;).create(&apos;Server 1&apos;);</span><br><span class="line">var bs2 = require(&quot;browser-sync&quot;).create(&apos;Server 2&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="get-name"><a href="#get-name" class="headerlink" title=".get( name )"></a>.get( name )</h3><p>通过名称获取单个实例。如果你有其他构建脚本在单独的文件，这很有用。</p>
<p><strong>name</strong><br>Type: String</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在一个文件中创建一个命名实例...</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).create(&apos;My Server&apos;);</span><br><span class="line"></span><br><span class="line">// 初始化Browsersync服务器</span><br><span class="line">bs.init(&#123;</span><br><span class="line">    server: true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 现在，获取另一个实例。</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).get(&apos;My server&apos;);</span><br><span class="line"></span><br><span class="line">// 并调用它的任何方法。</span><br><span class="line">bs.watch(&apos;*.html&apos;).on(&apos;change&apos;, bs.reload);</span><br></pre></td></tr></table></figure>

<h3 id="init-config-cb"><a href="#init-config-cb" class="headerlink" title=".init( config, cb )"></a>.init( config, cb )</h3><p>启动Browsersync服务。这将启动一个服务器，代理服务器或静态服务器，这取决于你实际需要。</p>
<p><strong>config</strong><br>Type: Object [optional]<br>这是你的Browsersync实例的主配置，并且可以包含任何可用的选项。如果你不使用已有的配置参数，Browsersync仍将运行; 但只能在 snippet 模式下</p>
<p><strong>cb</strong><br>Type: Function [optional]<br>如果你传递一个回调函数，它会在Browsersync已完成全部安装任务，并准备使用时被调用。或同步执行其他任务：当你需要等待信息（网址，端口等），这非常有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 开始一个Browsersync静态文件服务器</span><br><span class="line">bs.init(&#123;</span><br><span class="line">    server: &quot;./app&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 开始一个Browsersync代理</span><br><span class="line">bs.init(&#123;</span><br><span class="line">    proxy: &quot;http://www.bbc.co.uk&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="reload-arg"><a href="#reload-arg" class="headerlink" title=".reload( arg )"></a>.reload( arg )</h3><p>该 reload  方法会通知所有的浏览器相关文件被改动，要么导致浏览器刷新，要么注入文件，实时更新改动。</p>
<p><strong>arg</strong><br>Type: String | Array | Object [optional]<br>一个或多个文件被重新加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 浏览器重载</span><br><span class="line">bs.reload();</span><br><span class="line"></span><br><span class="line">// 单个文件</span><br><span class="line">bs.reload(&quot;styles.css&quot;);</span><br><span class="line"></span><br><span class="line">// 多个文件</span><br><span class="line">bs.reload([&quot;styles.css&quot;, &quot;ie.css&quot;]);</span><br><span class="line"></span><br><span class="line">// 在2.6.0里 - 通配符来重新加载所有的CSS文件</span><br><span class="line">bs.reload(&quot;*.css&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="stream-opts"><a href="#stream-opts" class="headerlink" title=".stream( opts )"></a>.stream( opts )</h3><p>该 stream 方法返回一个变换流，并且可以充当一次或多个文件。</p>
<p><strong>opts</strong><br>Type: Object [optional]<br>配置流的方法</p>
<p>注: 至少需要2.6.0版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 编译SASS且自动注入到浏览器</span><br><span class="line">gulp.task(&apos;sass&apos;, function () &#123;</span><br><span class="line">    return gulp.src(&apos;scss/styles.scss&apos;)</span><br><span class="line">        .pipe(sass(&#123;includePaths: [&apos;scss&apos;]&#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;css&apos;))</span><br><span class="line">        .pipe(bs.stream());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 提供 `once: true` 限制每个流重装一次</span><br><span class="line">gulp.task(&apos;templates&apos;, function () &#123;</span><br><span class="line">    return gulp.src(&apos;*.jade&apos;)</span><br><span class="line">        .pipe(jade())</span><br><span class="line">        .pipe(gulp.dest(&apos;app&apos;))</span><br><span class="line">        .pipe(bs.stream(&#123;once: true&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 提供过滤器以被重新加载阻止不需要的文件</span><br><span class="line">gulp.task(&apos;less&apos;, function () &#123;</span><br><span class="line">    return gulp.src(&apos;*.less&apos;)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(&apos;css&apos;))</span><br><span class="line">        .pipe(bs.stream(&#123;match: &quot;**/*.css&quot;&#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="notify-msg-timeout"><a href="#notify-msg-timeout" class="headerlink" title=".notify( msg, timeout )"></a>.notify( msg, timeout )</h3><p>浏览器消息助手</p>
<p><strong>msg</strong><br>Type: String | HTML<br>可以是一个简单的消息，如“连接”或HTML</p>
<p><strong>timeout</strong><br>Type: Number [optional]<br>消息将保存在浏览器里时间设置。1.3.0版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 文本信息</span><br><span class="line">bs.notify(&quot;Compiling, please wait!&quot;);</span><br><span class="line"></span><br><span class="line">// HTML信息</span><br><span class="line">bs.notify(&quot;HTML &lt;span color=&apos;green&apos;&gt;is supported&lt;/span&gt; too!&quot;);</span><br><span class="line"></span><br><span class="line">// 1.3.0版本，指定超时</span><br><span class="line">bs.notify(&quot;This message will only last a second&quot;, 1000);</span><br></pre></td></tr></table></figure>

<h3 id="exit"><a href="#exit" class="headerlink" title=".exit()"></a>.exit()</h3><p>此方法将关闭所有正在运行的服务器，停止文件并退出当前进程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 启动服务器</span><br><span class="line">bs.init(&#123;server: &quot;./app&quot;&#125;);</span><br><span class="line"></span><br><span class="line">// 5秒后退出服务器</span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line">    bs.exit();</span><br><span class="line">&#125;, 5000);</span><br></pre></td></tr></table></figure>

<h3 id="watch-patterns-opts-fn"><a href="#watch-patterns-opts-fn" class="headerlink" title=".watch( patterns, opts, fn )"></a>.watch( patterns, opts, fn )</h3><p>单个文件监听。使用此连同Browsersync创建自己的，最小的构建系统</p>
<p><strong>patterns</strong><br>Type: String<br>需要监听的文件</p>
<p><strong>opts</strong><br>Type: Object [optional]<br>选择要传递给Chokidar对象的参数 - 可设置匹配规则 参考文档</p>
<p><strong>fn</strong><br>Type: Function [optional]<br>每个事件的回调函数</p>
<p>注: 至少需要2.6.0版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个Browsersync实例</span><br><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 监听HTML更改事件并重新加载</span><br><span class="line">bs.watch(&quot;*.html&quot;).on(&quot;change&quot;, bs.reload);</span><br><span class="line"></span><br><span class="line">// 提供一个回调来捕获所有事件的CSS</span><br><span class="line">// files - 然后筛选的&apos;change&apos;和重载所有</span><br><span class="line">// css文件在页面上</span><br><span class="line">bs.watch(&quot;css/*.css&quot;, function (event, file) &#123;</span><br><span class="line">    if (event === &quot;change&quot;) &#123;</span><br><span class="line">        bs.reload(&quot;*.css&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 现在初始化的Browsersync服务器</span><br><span class="line">bs.init(&#123;</span><br><span class="line">    server: &quot;./app&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="pause"><a href="#pause" class="headerlink" title=".pause()"></a>.pause()</h3><p>暂停文件执行事件</p>
<h3 id="resume"><a href="#resume" class="headerlink" title=".resume()"></a>.resume()</h3><p>恢复暂停的事件</p>
<h3 id="emitter"><a href="#emitter" class="headerlink" title=".emitter"></a>.emitter</h3><p>所使用的运行Browsersync实例（如果存在的话）的内部事件辐射源。你可以用它来发出自己的事件，如更改的文件，记录等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// 监听 `init` 事件</span><br><span class="line">bs.emitter.on(&quot;init&quot;, function () &#123;</span><br><span class="line">    console.log(&quot;Browsersync is running!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bs.init(config);</span><br></pre></td></tr></table></figure>

<h3 id="active"><a href="#active" class="headerlink" title=".active"></a>.active</h3><p>一个简单的true/false标志，你可以用它来确定是否有一个当前运行Browsersync实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bs = require(&quot;browser-sync&quot;).create();</span><br><span class="line"></span><br><span class="line">// -&gt; false, init尚未被执行</span><br><span class="line">console.log(bs.active);</span><br><span class="line"></span><br><span class="line">bs.init(config, function (err, bs) &#123;</span><br><span class="line"></span><br><span class="line">    // -&gt; true，因为BS现在正在运行</span><br><span class="line">    console.log(bs.active);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="paused"><a href="#paused" class="headerlink" title=".paused"></a>.paused</h3><p>一个简单的true/false标志来确定是否当前实例暂停</p>
<blockquote>
<p>更多信息可以查看<a href="http://www.browsersync.cn/" target="_blank" rel="noopener">Browsersync</a>;</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Browsersync</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>2015-2016前端知识体系</title>
    <url>/2016/03/05/160305-2015-2016%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p><img src="/2016/03/05/160305-2015-2016前端知识体系/%E5%89%8D%E7%AB%AF%E4%BD%93%E7%B3%BB-%E6%B8%85%E6%99%B0.jpg" alt></p>
<blockquote>
<p>一篇很好的技术栈文章，也是激励自己一定要时刻保持学习的状态！<a id="more"></a></p>
</blockquote>
<h2 id="一、框架与组件"><a href="#一、框架与组件" class="headerlink" title="一、框架与组件"></a>一、框架与组件</h2><h4 id="bootstrap等UI框架设计与实现"><a href="#bootstrap等UI框架设计与实现" class="headerlink" title="bootstrap等UI框架设计与实现"></a>bootstrap等UI框架设计与实现</h4><ul>
<li>伸缩布局：grid网格布局</li>
</ul>
<ul>
<li>基础UI样式：元素reset、按钮、图片、菜单、表单</li>
</ul>
<ul>
<li>组件UI样式：按钮组、字体图标、下拉菜单、输入框组、导航组、面包屑、分页、标签、轮播、弹出框、列表、多媒体、警告</li>
</ul>
<ul>
<li>响应式布局：布局、结构、样式、媒体、javascript响应式</li>
</ul>
<ul>
<li>第三方插件：插件管理</li>
</ul>
<h4 id="jQuery、zepto使用原理以及插件开发"><a href="#jQuery、zepto使用原理以及插件开发" class="headerlink" title="jQuery、zepto使用原理以及插件开发"></a>jQuery、zepto使用原理以及插件开发</h4><ul>
<li>支持amd、cmd、全局变量的模块化封装</li>
</ul>
<ul>
<li>$.fn.method = function(){}</li>
</ul>
<h4 id="mvc-mvvm框架原理设计，vue-angular-avalon等"><a href="#mvc-mvvm框架原理设计，vue-angular-avalon等" class="headerlink" title="mvc/mvvm框架原理设计，vue/angular/avalon等"></a>mvc/mvvm框架原理设计，vue/angular/avalon等</h4><ul>
<li>directive设计：html、text、class、html、attr、repeat、ref，可扩展</li>
</ul>
<ul>
<li>filter设计：bool、upperCase、lowerCase，可扩展</li>
</ul>
<ul>
<li>表达式设计：if-else等实现</li>
</ul>
<ul>
<li>viewmodel结构设计：例如数据，元素，方法的挂载与作用域</li>
</ul>
<ul>
<li>数据更变检测：函数触发，脏数据检测、对象hijacking</li>
</ul>
<h4 id="polymer-angular2思想与设计思路"><a href="#polymer-angular2思想与设计思路" class="headerlink" title="polymer/angular2思想与设计思路"></a>polymer/angular2思想与设计思路</h4><ul>
<li>import技术</li>
</ul>
<ul>
<li>template和script引入方式</li>
</ul>
<ul>
<li>css样式命名空间隔离</li>
</ul>
<ul>
<li>简单复用第三方库</li>
</ul>
<h4 id="reactjs原理与使用"><a href="#reactjs原理与使用" class="headerlink" title="reactjs原理与使用"></a>reactjs原理与使用</h4><ul>
<li>virtual dom单向数据绑定</li>
</ul>
<ul>
<li>js执行语法方式</li>
</ul>
<ul>
<li>UI由状态控制</li>
</ul>
<h4 id="commonJS-AMD-CMD"><a href="#commonJS-AMD-CMD" class="headerlink" title="commonJS/AMD/CMD"></a>commonJS/AMD/CMD</h4><ul>
<li>模块引入</li>
</ul>
<ul>
<li>模块定义</li>
</ul>
<ul>
<li>模块标识</li>
</ul>
<ul>
<li>UMD解决不同规范兼容性的问题，例如webpack封装</li>
</ul>
<ul>
<li>模块懒执行(CMD)与与预执行(AMD)</li>
</ul>
<h4 id="loadJs模块化加载原理与实现"><a href="#loadJs模块化加载原理与实现" class="headerlink" title="loadJs模块化加载原理与实现"></a>loadJs模块化加载原理与实现</h4><ul>
<li>创建script标签，需要id映射到资源url</li>
</ul>
<ul>
<li>onload加载模块队列判断</li>
</ul>
<ul>
<li>全部加载完成后触发</li>
</ul>
<ul>
<li>加载失败问题优化</li>
</ul>
<ul>
<li>requirejs、modjs、seajs</li>
</ul>
<h4 id="polyfill、shim原理与实现"><a href="#polyfill、shim原理与实现" class="headerlink" title="polyfill、shim原理与实现"></a>polyfill、shim原理与实现</h4><ul>
<li>polyfill提供了开发者们希望浏览器原生提供支持的功能特性</li>
</ul>
<ul>
<li>shim将新的API引入到旧的环境中,且仅靠旧环境中已有的手段实现</li>
</ul>
<h4 id="virtual-Dom、Incremental-DOM"><a href="#virtual-Dom、Incremental-DOM" class="headerlink" title="virtual Dom、Incremental DOM"></a>virtual Dom、Incremental DOM</h4><ul>
<li>1.用js对象树表示dom树结构，根据该对象树构建dom树</li>
</ul>
<ul>
<li>2.状态改变时，重新构建对象，和旧的对象对比，记录两个对象树差异</li>
</ul>
<ul>
<li>3.将对象树差异应用到dom中</li>
</ul>
<ul>
<li>小结:js对象模拟dom(elem.js)，virtual dom diff算法(diff.js)、差异渲染dom(patch.js)</li>
</ul>
<ul>
<li>incremental dom在状态改变时扫描旧对象树将差异直接应用到dom中</li>
</ul>
<h4 id="shadow-dom"><a href="#shadow-dom" class="headerlink" title="shadow dom"></a>shadow dom</h4><ul>
<li>隔离外部环境用于封装组件：结构、样式、行为</li>
</ul>
<ul>
<li>实现形式：新标签、class类属性 + 构建编译</li>
</ul>
<h4 id="webwork与service-Worker"><a href="#webwork与service-Worker" class="headerlink" title="webwork与service Worker"></a>webwork与service Worker</h4><ul>
<li>webwork与主线程机制，on/post</li>
</ul>
<ul>
<li>serviceworker可作为浏览器请求代理</li>
</ul>
<ul>
<li>应用场景</li>
</ul>
<h4 id="ES6转ES5、Babel与ES6开发规范体系"><a href="#ES6转ES5、Babel与ES6开发规范体系" class="headerlink" title="ES6转ES5、Babel与ES6开发规范体系"></a>ES6转ES5、Babel与ES6开发规范体系</h4><ul>
<li>ES6编码规范全</li>
</ul>
<ul>
<li>ES6在babel下兼容性</li>
</ul>
<ul>
<li>ES6在node下兼容性与性能</li>
</ul>
<ul>
<li>ES6新特性：看编码规范</li>
</ul>
<ul>
<li>aurelia ES6前端框架</li>
</ul>
<h4 id="Isomorphic-JavaScript"><a href="#Isomorphic-JavaScript" class="headerlink" title="Isomorphic JavaScript"></a>Isomorphic JavaScript</h4><ul>
<li>同构原理</li>
</ul>
<ul>
<li>同构方案 Rendr</li>
</ul>
<ul>
<li>nodejs: 服务器</li>
</ul>
<ul>
<li>hapi: 应用服务</li>
</ul>
<ul>
<li>backbone.js: 后台mvc</li>
</ul>
<ul>
<li>requirejs: 模块加载</li>
</ul>
<ul>
<li>jquery: dom处理</li>
</ul>
<ul>
<li>reactjs同构:React + Flux + Koa</li>
</ul>
<h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><ul>
<li>函数触发:vuejs</li>
</ul>
<ul>
<li>脏数据检测:angular</li>
</ul>
<ul>
<li>对象hijacking:avalon</li>
</ul>
<h4 id="browserify运行原理"><a href="#browserify运行原理" class="headerlink" title="browserify运行原理"></a>browserify运行原理</h4><ul>
<li>1.从入口模块开始分析require函数调用</li>
</ul>
<ul>
<li>2.根据依赖生成AST</li>
</ul>
<ul>
<li>3.根据AST找到每个模块的模块名</li>
</ul>
<ul>
<li>4.得到每个模块的依赖关系，生成一个依赖字典</li>
</ul>
<ul>
<li>5.包装每个模块（传入依赖字典以及export和require函数），生成执行的js</li>
</ul>
<h4 id="performance-timing"><a href="#performance-timing" class="headerlink" title="performance timing"></a>performance timing</h4><ul>
<li>performance timing api</li>
</ul>
<ul>
<li>performance timing 过程</li>
</ul>
<ul>
<li>performance timing 性能计算</li>
</ul>
<ul>
<li>performanceTrace库</li>
</ul>
<h4 id="组件UI与js组件规范化"><a href="#组件UI与js组件规范化" class="headerlink" title="组件UI与js组件规范化"></a>组件UI与js组件规范化</h4><ul>
<li>组件编码规范</li>
</ul>
<ul>
<li>组件目录规范：组件目录与公用目录</li>
</ul>
<ul>
<li>组件构建规范：构建环境支持</li>
</ul>
<ul>
<li>组件模块化管理：spm，bowserify</li>
</ul>
<ul>
<li>组件复用性管理</li>
</ul>
<ul>
<li>第三方组件接入成本</li>
</ul>
<h4 id="immutable-JavaScript"><a href="#immutable-JavaScript" class="headerlink" title="immutable JavaScript"></a>immutable JavaScript</h4><h4 id="generator与promise原理与使用"><a href="#generator与promise原理与使用" class="headerlink" title="generator与promise原理与使用"></a>generator与promise原理与使用</h4><h2 id="二、构建生态"><a href="#二、构建生态" class="headerlink" title="二、构建生态"></a>二、构建生态</h2><h4 id="grunt-gulp开发环境任务编写"><a href="#grunt-gulp开发环境任务编写" class="headerlink" title="grunt/gulp开发环境任务编写"></a>grunt/gulp开发环境任务编写</h4><ul>
<li>文件处理插件：html、scss、js、image、font、其它</li>
</ul>
<ul>
<li>优化插件：雪碧图、图片压缩、iconfont构建</li>
</ul>
<ul>
<li>发布替换插件</li>
</ul>
<ul>
<li>打包、压缩包插件：组件自动分析</li>
</ul>
<ul>
<li>白名单配置</li>
</ul>
<ul>
<li>自定义插件编写</li>
</ul>
<h4 id="npm、jspm、bower包管理工具"><a href="#npm、jspm、bower包管理工具" class="headerlink" title="npm、jspm、bower包管理工具"></a>npm、jspm、bower包管理工具</h4><h4 id="r-js、browserify、webpack、Rollup打包工具使用"><a href="#r-js、browserify、webpack、Rollup打包工具使用" class="headerlink" title="r.js、browserify、webpack、Rollup打包工具使用"></a>r.js、browserify、webpack、Rollup打包工具使用</h4><ul>
<li>原理：根据依赖配置文件对文件进行依赖打包</li>
</ul>
<ul>
<li>webpack支持更多的规范打包，AMD,Commonjs</li>
</ul>
<ul>
<li>webpack+babel/reactjs+reflux</li>
</ul>
<h4 id="fis3构建与插件开发、构建环境、fis3构建离线包"><a href="#fis3构建与插件开发、构建环境、fis3构建离线包" class="headerlink" title="fis3构建与插件开发、构建环境、fis3构建离线包"></a>fis3构建与插件开发、构建环境、fis3构建离线包</h4><h4 id="web-Component：rosetta-org、x-view、Q、riot、nova"><a href="#web-Component：rosetta-org、x-view、Q、riot、nova" class="headerlink" title="web Component：rosetta-org、x-view、Q、riot、nova"></a>web Component：rosetta-org、x-view、Q、riot、nova</h4><h4 id="brunch构建工具"><a href="#brunch构建工具" class="headerlink" title="brunch构建工具"></a>brunch构建工具</h4><h2 id="三、开发技巧与调试"><a href="#三、开发技巧与调试" class="headerlink" title="三、开发技巧与调试"></a>三、开发技巧与调试</h2><h4 id="fiddler加willow基础组合调试"><a href="#fiddler加willow基础组合调试" class="headerlink" title="fiddler加willow基础组合调试"></a>fiddler加willow基础组合调试</h4><ul>
<li>常见配置与分析</li>
</ul>
<ul>
<li>结合浏览器调试</li>
</ul>
<h4 id="werien、vorlonjs远程调试，chrome-inspect"><a href="#werien、vorlonjs远程调试，chrome-inspect" class="headerlink" title="werien、vorlonjs远程调试，chrome inspect"></a>werien、vorlonjs远程调试，chrome inspect</h4><h4 id="mockjs，F-M-S-Front-Mock-Server-模拟调试使用与cgi自动调试"><a href="#mockjs，F-M-S-Front-Mock-Server-模拟调试使用与cgi自动调试" class="headerlink" title="mockjs，F.M.S(Front Mock Server)模拟调试使用与cgi自动调试"></a>mockjs，F.M.S(Front Mock Server)模拟调试使用与cgi自动调试</h4><h4 id="macha-phantomjs-casperjs-karma测试自动化任务使用"><a href="#macha-phantomjs-casperjs-karma测试自动化任务使用" class="headerlink" title="macha/phantomjs/casperjs/karma测试自动化任务使用"></a>macha/phantomjs/casperjs/karma测试自动化任务使用</h4><h4 id="自动化UI测试，海豚"><a href="#自动化UI测试，海豚" class="headerlink" title="自动化UI测试，海豚"></a>自动化UI测试，海豚</h4><h4 id="node-supervior、node-inspector、karma"><a href="#node-supervior、node-inspector、karma" class="headerlink" title="node-supervior、node-inspector、karma"></a>node-supervior、node-inspector、karma</h4><h4 id="开发发布系统流程"><a href="#开发发布系统流程" class="headerlink" title="开发发布系统流程"></a>开发发布系统流程</h4><h4 id="sublime高效插件"><a href="#sublime高效插件" class="headerlink" title="sublime高效插件"></a>sublime高效插件</h4><ul>
<li>emmet工具使用、  sublimelinter、 babel snippets、 sublimeLint、 SassBeautify 、 emmet 快速编辑、 jsxlint、 SideBarEnhancements、 SnippetsMaker、 SublimeCodeIntel、 css snippets、 ColorPicker、 html/css/js Pretty、 SpinnetMacker、 DocBlockr、 MultiEditUtils、 javascript &amp; node spinnet、 JavaScript &amp; NodeJS Snippets、 jsLint、cssLint</li>
</ul>
<h4 id="代码自动化检查fecs"><a href="#代码自动化检查fecs" class="headerlink" title="代码自动化检查fecs"></a>代码自动化检查fecs</h4><h2 id="四、html、css与重构"><a href="#四、html、css与重构" class="headerlink" title="四、html、css与重构"></a>四、html、css与重构</h2><h4 id="jpeg、webp、apng、bpg图片"><a href="#jpeg、webp、apng、bpg图片" class="headerlink" title="jpeg、webp、apng、bpg图片"></a>jpeg、webp、apng、bpg图片</h4><ul>
<li>编码原理</li>
</ul>
<ul>
<li>特点与优劣势</li>
</ul>
<ul>
<li>适用场景</li>
</ul>
<h4 id="iconfont使用与实现原理"><a href="#iconfont使用与实现原理" class="headerlink" title="iconfont使用与实现原理"></a>iconfont使用与实现原理</h4><ul>
<li>自动打包构建方法</li>
</ul>
<ul>
<li>iconfont兼容性写法</li>
</ul>
<ul>
<li>fonthello、fontawesome、icomoon.io、iconfont.cn线上工具</li>
</ul>
<h4 id="页面响应式设计"><a href="#页面响应式设计" class="headerlink" title="页面响应式设计"></a>页面响应式设计</h4><ul>
<li>layout布局响应式</li>
</ul>
<ul>
<li>html结构响应式</li>
</ul>
<ul>
<li>css样式响应式</li>
</ul>
<ul>
<li>image媒体响应式</li>
</ul>
<ul>
<li>javascript响应式</li>
</ul>
<ul>
<li>media query与平台判断</li>
</ul>
<h4 id="css重置"><a href="#css重置" class="headerlink" title="css重置"></a>css重置</h4><ul>
<li>reset</li>
</ul>
<ul>
<li>nomalize</li>
</ul>
<ul>
<li>neat</li>
</ul>
<h4 id="sass-compass-less-postcss常用语法与使用"><a href="#sass-compass-less-postcss常用语法与使用" class="headerlink" title="sass/compass/less/postcss常用语法与使用"></a>sass/compass/less/postcss常用语法与使用</h4><ul>
<li>常用语法功能</li>
</ul>
<ul>
<li>组件化UI设计管理</li>
</ul>
<ul>
<li>构建工具实现方案</li>
</ul>
<ul>
<li>雪碧图自动合成</li>
</ul>
<ul>
<li>iconfont自动接入等等</li>
</ul>
<h4 id="media-query与常见页面尺寸了解"><a href="#media-query与常见页面尺寸了解" class="headerlink" title="media query与常见页面尺寸了解"></a>media query与常见页面尺寸了解</h4><ul>
<li>媒体类型引入和媒体特性引入</li>
</ul>
<ul>
<li>device-width适应</li>
</ul>
<ul>
<li>retina屏幕适应</li>
</ul>
<h4 id="em-rem原理与实现"><a href="#em-rem原理与实现" class="headerlink" title="em,rem原理与实现"></a>em,rem原理与实现</h4><ul>
<li>rem计算：width*retina/10，相当于屏幕宽度为10rem</li>
</ul>
<ul>
<li>字体在rem情况下仍然使用px</li>
</ul>
<h4 id="code4ui、code4app、初页、maka等"><a href="#code4ui、code4app、初页、maka等" class="headerlink" title="code4ui、code4app、初页、maka等"></a>code4ui、code4app、初页、maka等</h4><ul>
<li>前端dom操作即使刷新前端页面</li>
</ul>
<ul>
<li>根据dom操作生成组件config配置保存到db</li>
</ul>
<ul>
<li>根据config配置使用r.js或webpack打包</li>
</ul>
<ul>
<li>发布打包后输出文件</li>
</ul>
<h4 id="css3动画"><a href="#css3动画" class="headerlink" title="css3动画"></a>css3动画</h4><ul>
<li>transform</li>
</ul>
<ul>
<li>animation</li>
</ul>
<ul>
<li>transiction</li>
</ul>
<ul>
<li>3D加速与动画加速</li>
</ul>
<ul>
<li>动画库</li>
</ul>
<ul>
<li>缓动函数速查表： <a href="http://www.xuanfengge.com/easeing/easeing/" target="_blank" rel="noopener">http://www.xuanfengge.com/easeing/easeing/</a></li>
</ul>
<ul>
<li>Ceaser： <a href="http://xuanfengge.com/easeing/ceaser/" target="_blank" rel="noopener">http://xuanfengge.com/easeing/ceaser/</a></li>
</ul>
<ul>
<li>cubic-bezier：<a href="http://cubic-bezier.com/" target="_blank" rel="noopener">http://cubic-bezier.com/</a></li>
</ul>
<h4 id="css网格布局"><a href="#css网格布局" class="headerlink" title="css网格布局"></a>css网格布局</h4><ul>
<li>susy</li>
</ul>
<ul>
<li>Responsive Grid System</li>
</ul>
<ul>
<li>Fluid 960 Grid(adaptjs)</li>
</ul>
<ul>
<li>Simple Grid</li>
</ul>
<h4 id="搜索引擎与前端SEO"><a href="#搜索引擎与前端SEO" class="headerlink" title="搜索引擎与前端SEO"></a>搜索引擎与前端SEO</h4><ul>
<li>tdk优化</li>
</ul>
<ul>
<li>页面内容优化</li>
</ul>
<ul>
<li>唯一的H1标题</li>
</ul>
<ul>
<li>img设置alt属性</li>
</ul>
<ul>
<li>nofollow</li>
</ul>
<ul>
<li>url优化</li>
</ul>
<ul>
<li>统一链接</li>
</ul>
<ul>
<li>301跳转</li>
</ul>
<ul>
<li>canonical</li>
</ul>
<ul>
<li>robot优化</li>
</ul>
<ul>
<li>robots.txt</li>
</ul>
<ul>
<li>meta robots</li>
</ul>
<ul>
<li>sitemap</li>
</ul>
<ul>
<li>SEO工具</li>
</ul>
<ul>
<li>各种站长工具等</li>
</ul>
<h4 id="浏览器缓存种类，resources-webSQL-indexDB-localstorage-cookie-app-cache-cache-storage"><a href="#浏览器缓存种类，resources-webSQL-indexDB-localstorage-cookie-app-cache-cache-storage" class="headerlink" title="浏览器缓存种类，resources,webSQL,indexDB, localstorage,cookie,app cache,cache storage"></a>浏览器缓存种类，resources,webSQL,indexDB, localstorage,cookie,app cache,cache storage</h4><ul>
<li>store.js、cookie.js</li>
</ul>
<h4 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h4><ul>
<li>bootstrap、jqwidgets、semantic ui、amaze ui</li>
</ul>
<ul>
<li>微信手Q ui: frozenui、weui、blend ui</li>
</ul>
<ul>
<li>extjs、echart图表ui</li>
</ul>
<h2 id="五、native-hybrid-桌面开发"><a href="#五、native-hybrid-桌面开发" class="headerlink" title="五、native/hybrid/桌面开发"></a>五、native/hybrid/桌面开发</h2><h4 id="ionic移动开发方案"><a href="#ionic移动开发方案" class="headerlink" title="ionic移动开发方案"></a>ionic移动开发方案</h4><ul>
<li>运行架构</li>
</ul>
<ul>
<li>hybrid混合开发</li>
</ul>
<ul>
<li>cordova交互</li>
</ul>
<ul>
<li>离线包更新</li>
</ul>
<ul>
<li>性能瓶颈</li>
</ul>
<h4 id="nativescript移动开发方案"><a href="#nativescript移动开发方案" class="headerlink" title="nativescript移动开发方案"></a>nativescript移动开发方案</h4><h4 id="react-Native移动开发方案"><a href="#react-Native移动开发方案" class="headerlink" title="react Native移动开发方案"></a>react Native移动开发方案</h4><ul>
<li>运行架构：js引擎</li>
</ul>
<ul>
<li>性能缺陷与内存泄露</li>
</ul>
<ul>
<li>更新机制</li>
</ul>
<ul>
<li>使用场景</li>
</ul>
<h4 id="android-ios原生开发与框架"><a href="#android-ios原生开发与框架" class="headerlink" title="android/ios原生开发与框架"></a>android/ios原生开发与框架</h4><ul>
<li>java</li>
</ul>
<ul>
<li>oc、swift</li>
</ul>
<ul>
<li>web与native交互</li>
</ul>
<ul>
<li>屏幕旋转</li>
</ul>
<ul>
<li>摇一摇</li>
</ul>
<ul>
<li>录像，拍照，选取本地图片</li>
</ul>
<ul>
<li>打电话，发短信</li>
</ul>
<ul>
<li>电池电量</li>
</ul>
<ul>
<li>地理位置</li>
</ul>
<ul>
<li>日期选择</li>
</ul>
<ul>
<li>开启硬件加速</li>
</ul>
<h4 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h4><ul>
<li>nodewebkit</li>
</ul>
<ul>
<li>atom-shell(后改名为electron)</li>
</ul>
<ul>
<li>网易Hex </li>
</ul>
<ul>
<li>pomelo(游戏服务器框架)</li>
</ul>
<ul>
<li>react desktop</li>
</ul>
<ul>
<li>appjs:appjs.com</li>
</ul>
<h2 id="六、前端-H5优化-另一个图已给出"><a href="#六、前端-H5优化-另一个图已给出" class="headerlink" title="六、前端/H5优化(另一个图已给出)"></a>六、前端/H5优化(另一个图已给出)</h2><h4 id="yslow、pagespeed"><a href="#yslow、pagespeed" class="headerlink" title="yslow、pagespeed"></a>yslow、pagespeed</h4><h4 id="移动web性能优化"><a href="#移动web性能优化" class="headerlink" title="移动web性能优化"></a>移动web性能优化</h4><ul>
<li>手机浏览器”省流量”原理</li>
</ul>
<ul>
<li>增量更新原理及注意事项</li>
</ul>
<ul>
<li>本地存储的应用</li>
</ul>
<ul>
<li>加载优化</li>
</ul>
<ul>
<li>图片优化</li>
</ul>
<ul>
<li>单页面及路由实现</li>
</ul>
<ul>
<li>业内著名站点案例分析</li>
</ul>
<h2 id="七、全栈-全端开发"><a href="#七、全栈-全端开发" class="headerlink" title="七、全栈/全端开发"></a>七、全栈/全端开发</h2><h4 id="express-node-club-mongodb、thinkjs等框架"><a href="#express-node-club-mongodb、thinkjs等框架" class="headerlink" title="express/node club + mongodb、thinkjs等框架"></a>express/node club + mongodb、thinkjs等框架</h4><h4 id="node-js直出"><a href="#node-js直出" class="headerlink" title="node.js直出"></a>node.js直出</h4><h4 id="实时web开发，meteor-express-io"><a href="#实时web开发，meteor-express-io" class="headerlink" title="实时web开发，meteor/express.io"></a>实时web开发，meteor/express.io</h4><h4 id="MEAN-mongodb-express-angular-nodejs"><a href="#MEAN-mongodb-express-angular-nodejs" class="headerlink" title="MEAN(mongodb/express/angular/nodejs)"></a>MEAN(mongodb/express/angular/nodejs)</h4><h4 id="http与http2协议、bigpipe、pipeline"><a href="#http与http2协议、bigpipe、pipeline" class="headerlink" title="http与http2协议、bigpipe、pipeline"></a>http与http2协议、bigpipe、pipeline</h4><h4 id="离线缓存，cookie、localstorage、indexdb"><a href="#离线缓存，cookie、localstorage、indexdb" class="headerlink" title="离线缓存，cookie、localstorage、indexdb"></a>离线缓存，cookie、localstorage、indexdb</h4><h4 id="cdn与dns"><a href="#cdn与dns" class="headerlink" title="cdn与dns"></a>cdn与dns</h4><ul>
<li>动态域名加速</li>
</ul>
<ul>
<li>cdn原理与cdn combo</li>
</ul>
<h2 id="八、研究实验"><a href="#八、研究实验" class="headerlink" title="八、研究实验"></a>八、研究实验</h2><h4 id="WebAssembly、webTRC、typescript"><a href="#WebAssembly、webTRC、typescript" class="headerlink" title="WebAssembly、webTRC、typescript"></a>WebAssembly、webTRC、typescript</h4><h4 id="Material-design规范的前端框架"><a href="#Material-design规范的前端框架" class="headerlink" title="Material design规范的前端框架"></a>Material design规范的前端框架</h4><ul>
<li>交互动效库</li>
</ul>
<h4 id="AMP-HTML规范"><a href="#AMP-HTML规范" class="headerlink" title="AMP-HTML规范"></a>AMP-HTML规范</h4><ul>
<li>使用受限HTML以及缓存技术来提高移动网络中静态内容的性能</li>
</ul>
<ul>
<li>添加自定义的元素代替禁用掉的元素：amp-audio, amp-img、amp-video等</li>
</ul>
<h2 id="九、数据分析与监控"><a href="#九、数据分析与监控" class="headerlink" title="九、数据分析与监控"></a>九、数据分析与监控</h2><h4 id="badjs数据上报"><a href="#badjs数据上报" class="headerlink" title="badjs数据上报"></a>badjs数据上报</h4><ul>
<li>捕获错误两种方法：onerror、try-catch。抽样上报，先onerror统计语法错误，如果是script error，再使用tryjs。</li>
</ul>
<ul>
<li>后台统计方法、不同业务接入体系、抽样统计</li>
</ul>
<ul>
<li>onerror:可以捕捉语法错误和运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；当前页面执行的js脚本出错都会捕捉到；跨域的资源需要特殊头部支持。</li>
</ul>
<ul>
<li>try-catch:无法捕捉语法错误，只能捕捉运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；需要借助工具把function块以及文件块加入try,catch，可以在这个阶段打入更多的静态信息。</li>
</ul>
<h4 id="点击热力图clickHeat、heatMap"><a href="#点击热力图clickHeat、heatMap" class="headerlink" title="点击热力图clickHeat、heatMap"></a>点击热力图clickHeat、heatMap</h4><h4 id="js加载失败优化方案"><a href="#js加载失败优化方案" class="headerlink" title="js加载失败优化方案"></a>js加载失败优化方案</h4><ul>
<li>失败重发机制</li>
</ul>
<ul>
<li>加载源域名服务器文件</li>
</ul>
<ul>
<li>https反劫持</li>
</ul>
<h4 id="百度alog数据上报"><a href="#百度alog数据上报" class="headerlink" title="百度alog数据上报"></a>百度alog数据上报</h4><h2 id="十、其它软技能"><a href="#十、其它软技能" class="headerlink" title="十、其它软技能"></a>十、其它软技能</h2><h4 id="axure-原型图设计"><a href="#axure-原型图设计" class="headerlink" title="axure 原型图设计"></a>axure 原型图设计</h4><h4 id="xmind脑图管理"><a href="#xmind脑图管理" class="headerlink" title="xmind脑图管理"></a>xmind脑图管理</h4><h4 id="效率管理"><a href="#效率管理" class="headerlink" title="效率管理"></a>效率管理</h4><h4 id="can-i-use、github"><a href="#can-i-use、github" class="headerlink" title="can i use、github"></a>can i use、github</h4><h4 id="知识管理-总结分享"><a href="#知识管理-总结分享" class="headerlink" title="知识管理/总结分享"></a>知识管理/总结分享</h4><h4 id="产品思维与技能"><a href="#产品思维与技能" class="headerlink" title="产品思维与技能"></a>产品思维与技能</h4><h2 id="十一、前端技术网站"><a href="#十一、前端技术网站" class="headerlink" title="十一、前端技术网站"></a>十一、前端技术网站</h2><h4 id="技术社区"><a href="#技术社区" class="headerlink" title="技术社区"></a>技术社区</h4><ul>
<li>w3c tech、w3c plus、w3 help</li>
</ul>
<ul>
<li>div.io、nodeParty</li>
</ul>
<ul>
<li>稀土掘金、前端早读课</li>
</ul>
<ul>
<li>alloyteam、html5基地</li>
</ul>
<ul>
<li>W3 help</li>
</ul>
<h4 id="行业会议"><a href="#行业会议" class="headerlink" title="行业会议"></a>行业会议</h4><ul>
<li>segmentfault会议</li>
</ul>
<ul>
<li>深js、杭js</li>
</ul>
<ul>
<li>GMIC(全球移动互联网大会)</li>
</ul>
<ul>
<li>D2、webrebuild</li>
</ul>
<ul>
<li>infoQ内容、Qcon、velocity</li>
</ul>
<p>reference: <a href="http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html" target="_blank" rel="noopener">http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html</a></p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>知识体系</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS-API之path模块</title>
    <url>/2016/03/07/160307NodeJS-API%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这个模块包含处理和转换文件路径的一套工具集，这些方法的大部分主要用于字符串变换。不会调用文件系统去检验路径是否合法。<br>&nbsp;&nbsp;&nbsp;&nbsp;你只需要<code>require(&#39;path&#39;)</code>即可使用这个模块，下面的这些方法是所被提供的：</p>
<h2 id="1-path-basename-p-ext"><a href="#1-path-basename-p-ext" class="headerlink" title="1.path.basename(p[, ext])"></a>1.path.basename(p[, ext])</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;返回一个路径中的最后一部分. 与Unix 的 basename 命令很相似。<br>第二个参数是可选项，只能传后缀名，如果未传则是情况一，会得到带后缀名的文件名；如果传了则是情况二，则会得到不带后缀名的文件名，<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)</span><br><span class="line">// returns &apos;quux.html&apos;</span><br><span class="line"></span><br><span class="line">path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)</span><br><span class="line">// returns &apos;quux&apos;</span><br></pre></td></tr></table></figure>

<h2 id="2-path-delimiter"><a href="#2-path-delimiter" class="headerlink" title="2.path.delimiter"></a>2.path.delimiter</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;特定平台的路径分隔符, <code>;</code>或者<code>&#39;:&#39;</code>.<br>*nix上的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(process.env.PATH)</span><br><span class="line">// &apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;</span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter)</span><br><span class="line">// returns [&apos;/usr/bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin&apos;, &apos;/sbin&apos;, &apos;/usr/local/bin&apos;]</span><br></pre></td></tr></table></figure>

<p>Windows上的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(process.env.PATH)</span><br><span class="line">// &apos;C:\Windows\system32;C:\Windows;C:\Program Files\node\&apos;</span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter)</span><br><span class="line">// returns [&apos;C:\\Windows\\system32&apos;, &apos;C:\\Windows&apos;, &apos;C:\\Program Files\\node\\&apos;]</span><br></pre></td></tr></table></figure>

<h2 id="3-path-dirname-p"><a href="#3-path-dirname-p" class="headerlink" title="3.path.dirname(p)"></a>3.path.dirname(p)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;返回一个路径的文件夹名，相当于Unix中的<code>dirname</code>命令。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)</span><br><span class="line">// returns &apos;/foo/bar/baz/asdf&apos;</span><br></pre></td></tr></table></figure>

<h2 id="4-path-extname-p"><a href="#4-path-extname-p" class="headerlink" title="4.path.extname(p)"></a>4.path.extname(p)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;返回路径中文件的扩展名,在从路径最后一部分中的最后一个’.’到字符串的末尾。如果在路径的最后一部分没有’.’，或者第一个字符是’.’，就返回一个 空字符串。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.extname(&apos;index.html&apos;)</span><br><span class="line">// returns &apos;.html&apos;</span><br><span class="line"></span><br><span class="line">path.extname(&apos;index.coffee.md&apos;)</span><br><span class="line">// returns &apos;.md&apos;</span><br><span class="line"></span><br><span class="line">path.extname(&apos;index.&apos;)</span><br><span class="line">// returns &apos;.&apos;</span><br><span class="line"></span><br><span class="line">path.extname(&apos;index&apos;)</span><br><span class="line">// returns &apos;&apos;</span><br><span class="line"></span><br><span class="line">path.extname(&apos;.index&apos;)</span><br><span class="line">// returns &apos;&apos;</span><br></pre></td></tr></table></figure>

<h2 id="5-path-format-pathObject"><a href="#5-path-format-pathObject" class="headerlink" title="5.path.format(pathObject)"></a>5.path.format(pathObject)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从一个路径对象中返回一个路径字符串，它刚好跟<code>path.prase</code>相反。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果<code>pathObject</code>有<code>dir</code>和<code>base</code>属性，那么返回的字符串将会是<code>dir</code>属性、所在平台的路径分隔符以及<code>base</code>属性三者链接起来。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果没有提供<code>dir</code>属性，<code>root</code>属性将会被当做<code>dir</code>属性来用。然而，假设当<code>root</code>属性以所依赖的平台分隔符所结束时，在这种情况下，返回的字符串将会是<code>root</code>属性和<code>base</code>属性的链接起来的字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果dir和root属性都没有被提供的话，那么返回的字符串将会是base属性的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果base属性没有被提供，那么base属性将会是name属性和ext（后缀名）属性的结合。<br>下面看几个官方实例就会很清楚了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 当提供dir和base的时候，将会返回 `dir + platform separator + base`</span><br><span class="line">path.format(&#123;</span><br><span class="line">    dir: &apos;/home/user/dir&apos;,</span><br><span class="line">    base: &apos;file.txt&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// returns &apos;/home/user/dir/file.txt&apos;</span><br><span class="line"></span><br><span class="line">// 当dir没有指定的时候root将会被使用，当base没有指定的时候name和ext将会被使用；如果仅仅是root被提供，或者是dir跟root相等，那么这时候就不会包含平台的分隔符了</span><br><span class="line">path.format(&#123;</span><br><span class="line">    root: &apos;/&apos;,</span><br><span class="line">    base: &apos;file.txt&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// returns &apos;/file.txt&apos;</span><br><span class="line"></span><br><span class="line">path.format(&#123;</span><br><span class="line">    dir: &apos;/&apos;,</span><br><span class="line">    root: &apos;/&apos;,</span><br><span class="line">    name: &apos;file&apos;,</span><br><span class="line">    ext: &apos;.txt&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// returns &apos;/file.txt&apos;</span><br><span class="line"></span><br><span class="line">// 如果dir或者root没有提供的时候会直接将base对应的字符串返回</span><br><span class="line">path.format(&#123;</span><br><span class="line">    base: &apos;file.txt&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// returns &apos;file.txt&apos;</span><br><span class="line"></span><br><span class="line">Windows当中的例子:</span><br><span class="line"></span><br><span class="line">path.format(&#123;</span><br><span class="line">    root : &quot;C:\\&quot;,</span><br><span class="line">    dir : &quot;C:\\path\\dir&quot;,</span><br><span class="line">    base : &quot;file.txt&quot;,</span><br><span class="line">    ext : &quot;.txt&quot;,</span><br><span class="line">    name : &quot;file&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// returns &apos;C:\\path\\dir\\file.txt&apos;</span><br></pre></td></tr></table></figure>

<h2 id="6-path-isAbsolute-path"><a href="#6-path-isAbsolute-path" class="headerlink" title="6.path.isAbsolute(path)"></a>6.path.isAbsolute(path)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;判断path是否是一个绝对路径，绝对路径经常会被用来处理同一个地址，不管是在哪一个目录下。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.isAbsolute(&apos;/foo/bar&apos;) // true</span><br><span class="line">path.isAbsolute(&apos;/baz/..&apos;)  // true</span><br><span class="line">path.isAbsolute(&apos;qux/&apos;)     // false</span><br><span class="line">path.isAbsolute(&apos;.&apos;)        // false</span><br><span class="line"></span><br><span class="line">Windows 中的例子:</span><br><span class="line"></span><br><span class="line">path.isAbsolute(&apos;//server&apos;)  // true</span><br><span class="line">path.isAbsolute(&apos;C:/foo/..&apos;) // true</span><br><span class="line">path.isAbsolute(&apos;bar\\baz&apos;)  // false</span><br><span class="line">path.isAbsolute(&apos;.&apos;)         // false</span><br></pre></td></tr></table></figure>

<p>注意：如果这个路径字符串传一个长度为0的字符串，那么不像其他路径模块函数，它将会被照样输出，并返回一个false。</p>
<h2 id="7-path-join-path1-path2-…"><a href="#7-path-join-path1-path2-…" class="headerlink" title="7.path.join([path1][, path2][, …])"></a>7.path.join([path1][, path2][, …])</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;连接所有的参数到一起并且格式化这个生成的路径，所以以后只要涉及到拼接路径字符串，就采用它，这样就不易出错了，你多写了<code>/</code>它也会自动帮你处理掉，大大提高容错率。<br>这些参数必须是字符串的格式，在v0.8，不是字符串格式的参数会被默默地忽略掉。在v0.10以及以上，会抛出一个异常。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)</span><br><span class="line">// returns &apos;/foo/bar/baz/asdf&apos;</span><br><span class="line"></span><br><span class="line">path.join(&apos;foo&apos;, &#123;&#125;, &apos;bar&apos;)</span><br><span class="line">// throws exception</span><br><span class="line">TypeError: Arguments to path.join must be strings</span><br></pre></td></tr></table></figure>

<p>注意：如果这个参数添加一个长度为0的字符串，不像其他路径模块函数，它将会被忽略。如果连接的路径字符串是一个长度为0的字符串，接下来会返回一个代表自己当前的工作目录的路径。<br>这个API的一个重要的应用场景，是将相对路径转为绝对路径，通过path.join(__dirname,’相对路径’) =&gt; 就会将这个相对路径转为绝对路径，在某些场景下极为有用。</p>
<h2 id="8-path-normalize-p"><a href="#8-path-normalize-p" class="headerlink" title="8.path.normalize(p)"></a>8.path.normalize(p)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;规范规范化字符串路径，注意 ‘..’ 和 `’.’ 部分。<br>&nbsp;&nbsp;&nbsp;&nbsp;多个斜杠会被替换成一个；路径末尾的斜杠会被保留； Windows 系统上, 会使用反斜杠。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)</span><br><span class="line">// returns &apos;/foo/bar/baz/asdf&apos;</span><br></pre></td></tr></table></figure>

<p>注意：如果路径字符串中传入了一个长度为0的字符串，那么将会返回当前工作文件目录名。</p>
<h2 id="9-path-parse-pathString"><a href="#9-path-parse-pathString" class="headerlink" title="9. path.parse(pathString)"></a>9. path.parse(pathString)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从传入的一个路径字符串中返回一个对象。<br>例如在*nix上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.parse(&apos;/home/user/dir/file.txt&apos;)</span><br><span class="line">// returns</span><br><span class="line">// &#123;</span><br><span class="line">//    root : &quot;/&quot;,</span><br><span class="line">//    dir : &quot;/home/user/dir&quot;,</span><br><span class="line">//    base : &quot;file.txt&quot;,</span><br><span class="line">//    ext : &quot;.txt&quot;,</span><br><span class="line">//    name : &quot;file&quot;</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>

<p>在Windows上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.parse(&apos;C:\\path\\dir\\index.html&apos;)</span><br><span class="line">// returns</span><br><span class="line">// &#123;</span><br><span class="line">//    root : &quot;C:\\&quot;,</span><br><span class="line">//    dir : &quot;C:\\path\\dir&quot;,</span><br><span class="line">//    base : &quot;index.html&quot;,</span><br><span class="line">//    ext : &quot;.html&quot;,</span><br><span class="line">//    name : &quot;index&quot;</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>

<p> 类Unix系统不像Windows系统那样具有好几个盘符</p>
<h2 id="10-path-posix"><a href="#10-path-posix" class="headerlink" title="10. path.posix"></a>10. path.posix</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;提供上述的路径方法,并且总是以posix兼容的方式进行交互。</p>
<blockquote>
<p>POSIX 表示可移植操作系统接口（Portable Operating System Interface ，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准，是IEEE为要在各种UNIX操作系统上运行的软件而定义的一系列API标准的总称，其正式称呼为IEEE 1003，而国际标准名称为ISO/IEC 9945。</p>
</blockquote>
<h2 id="11-path-relative-from-to"><a href="#11-path-relative-from-to" class="headerlink" title="11. path.relative(from, to)"></a>11. path.relative(from, to)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;解决从from到to的相对路径。<br>&nbsp;&nbsp;&nbsp;&nbsp;有时候我们有两个绝对路径，我们需要从中找出相对目录的起源目录。这其实就是path.resolve的相反实现,我们可以看看是什么意思:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.resolve(from, path.relative(from, to)) == path.resolve(to)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.relative(&apos;C:\\orandea\\test\\aaa&apos;, &apos;C:\\orandea\\impl\\bbb&apos;)</span><br><span class="line">// returns &apos;..\\..\\impl\\bbb&apos;</span><br><span class="line"></span><br><span class="line">path.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)</span><br><span class="line">// returns &apos;../../impl/bbb&apos;</span><br></pre></td></tr></table></figure>

<p>注意：如果相对路径中有长度为0的字符串，那么当前的工作目录将会被用来代替那个长度为0的字符串。如果两个路径<br>一样，那么将会返回一个长度为0的字符串，其实就是一个空字符串；</p>
<h2 id="12-path-resolve-from-…-to"><a href="#12-path-resolve-from-…-to" class="headerlink" title="12. path.resolve([from …], to)"></a>12. path.resolve([from …], to)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将<code>to</code>解析为一个绝对路径。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果to不是一个相对于from 参数的绝对路径，to会被添加到from的右边，直到找出一个绝对路径为止。如果使用from路径且仍没有找到绝对路径时，使用当时路径作为目录。返回的结果已经规范化，得到的路径会去掉结尾的斜杠，除非得到的当前路径为root目录。非字符串参数将被忽略。<br>&nbsp;&nbsp;&nbsp;&nbsp;其实还有一种便于记忆的方法就是把它看做一系列 cd 命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</span><br></pre></td></tr></table></figure>

<p>相似与：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd foo/bar</span><br><span class="line">cd /tmp/file/</span><br><span class="line">cd ..</span><br><span class="line">cd a/../subfile</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure>

<p>不同的是，有时候不同的路径也是不需要存在的，也可能是文件。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)</span><br><span class="line">// returns &apos;/foo/bar/baz&apos;</span><br><span class="line"></span><br><span class="line">path.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)</span><br><span class="line">// returns &apos;/tmp/file&apos;</span><br><span class="line"></span><br><span class="line">path.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)</span><br><span class="line">// 如果当前在  /home/myself/node, it returns</span><br><span class="line">// &apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;</span><br></pre></td></tr></table></figure>

<p>注意：如果参数中需要解析长度为0的字符串，那么将会返回当前的工作目录来代替它们。</p>
<h2 id="13-path-sep"><a href="#13-path-sep" class="headerlink" title="13. path.sep"></a>13. path.sep</h2><p>特定操作系统的分隔符。如 ‘\‘ or ‘/‘.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如在 *nix上:</span><br><span class="line"></span><br><span class="line">&apos;foo/bar/baz&apos;.split(path.sep)</span><br><span class="line">// returns [&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</span><br><span class="line"></span><br><span class="line">在Windows上:</span><br><span class="line"></span><br><span class="line">&apos;foo\\bar\\baz&apos;.split(path.sep)</span><br><span class="line">// returns [&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</span><br></pre></td></tr></table></figure>

<h2 id="14-path-win32"><a href="#14-path-win32" class="headerlink" title="14. path.win32"></a>14. path.win32</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;提供上述的路径方法,但目前是只兼容win32的方式进行交互。</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Bower中文API</title>
    <url>/2016/05/03/160503Bower%E4%B8%AD%E6%96%87API/</url>
    <content><![CDATA[<h2 id="1-cache"><a href="#1-cache" class="headerlink" title="1. cache"></a>1. cache</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;管理你已经缓存的包，最后的参数可传可不传，不传默认操作的是所有包，如果传了就是对指定的包进行操作,格式如下,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower cache &lt;command&gt; [&lt;args&gt;]</span><br></pre></td></tr></table></figure>

<ul>
<li>cache clean<br>清除你所缓存的包，一共有三种形式的操作，代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 清理所有缓存的包</span><br><span class="line">$ bower cache clean</span><br><span class="line"></span><br><span class="line"># 清理指定名字的包的缓存，也可指定多个，中间加上空格即可</span><br><span class="line">$ bower cache clean &lt;name&gt; [&lt;name&gt; ...]</span><br><span class="line"></span><br><span class="line"># 清理指定名字和版本的包的缓存，也可指定多个，中间加上空格即可，跟第二种类似，只是多加了指定版本</span><br><span class="line">$ bower cache clean &lt;name&gt;#&lt;version&gt; [&lt;name&gt;#&lt;version&gt; ..]</span><br></pre></td></tr></table></figure>

<ul>
<li>cache list<br>列出你所缓存的包，也就是缓存包的列表，包含每个包的名字以及这个包对应的github地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出了所有你所缓存包的列表</span><br><span class="line">$ bower cache list</span><br><span class="line"># 列出你所缓存的指定名字的包，可以多个，后面加空格即可</span><br><span class="line">$ bower cache list &lt;name&gt; [&lt;name&gt; ...]</span><br></pre></td></tr></table></figure>

<p>例如我电脑上列出的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816&gt;bower cache list</span><br><span class="line">bootstrap=https://github.com/twbs/bootstrap.git#3.2.6</span><br><span class="line">jquery=https://github.com/jquery/jquery-dist.git#1.7.2</span><br><span class="line">jquery=https://github.com/jquery/jquery-dist.git#1.8.3</span><br></pre></td></tr></table></figure>

<h2 id="2-help"><a href="#2-help" class="headerlink" title="2. help"></a>2. help</h2><p>显示关于bower的帮助信息,后面可以加上具体的帮助类型名称，比如可以<code>$ bower help search</code>则会显示出对应search的一些说明和操作信息，如果不加则会显示出所有的类型的说明和操作信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower help &lt;command&gt;</span><br></pre></td></tr></table></figure>

<p>  例：输入<code>$ bower help search</code>，将会显示如下帮助信息，包括用法和描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Usage:</span><br><span class="line"></span><br><span class="line">    bower search &lt;name&gt; [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -h, --help              Show this help message</span><br><span class="line">    Additionally all global options listed in &apos;bower help&apos; are available</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">    Finds all packages or a specific package.</span><br></pre></td></tr></table></figure>

<p>只输入 <code>$ bower help</code>,将会显示出所有的用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Usage:</span><br><span class="line"></span><br><span class="line">    bower &lt;command&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">    cache                   Manage bower cache # 管理你缓存的包</span><br><span class="line">    help                    Display help information about Bower # 显示关于Bower的帮助信息</span><br><span class="line">    home                    Opens a package homepage into your favorite browser # 在你默认浏览器中打开一个包的主页</span><br><span class="line">    info                    Info of a particular package # 一个包的详细信息说明</span><br><span class="line">    init                    Interactively create a bower.json file # 初始化一个bower.json文件</span><br><span class="line">    install                 Install a package locally # 在本地安装一个包</span><br><span class="line">    link                    Symlink a package folder # 建立一个包文件夹的链接</span><br><span class="line">    list                    List local packages - and possible updates 列出本地所有的包以及可以更新的包</span><br><span class="line">    login                   Authenticate with GitHub and store credentials # 用github账号登陆</span><br><span class="line">    lookup                  Look up a package URL by name # 打开一个指定名字的包的官网</span><br><span class="line">    prune                   Removes local extraneous packages # 移除本地没有用的包</span><br><span class="line">    register                Register a package # 注册一个包</span><br><span class="line">    search                  Search for a package by name # 根据名字搜索一个包</span><br><span class="line">    update                  Update a local package # 更新一个本地的宝</span><br><span class="line">    uninstall               Remove a local package # 卸载一个本地的包</span><br><span class="line">    unregister              Remove a package from the registry # 从注册表中移除一个包</span><br><span class="line">    version                 Bump a package version # 显示一个包的版本</span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -f, --force             Makes various commands more forceful # 是各种命令行工具更加强大</span><br><span class="line">    -j, --json              Output consumable JSON # 将帮助信息以JSON格式的输出</span><br><span class="line">    -l, --loglevel          What level of logs to report # 生成日志级别</span><br><span class="line">    -o, --offline           Do not hit the network # 离线模式</span><br><span class="line">    -q, --quiet             Only output important information # 只输出重要信息</span><br><span class="line">    -s, --silent            Do not output anything, besides errors # 除了错误，不要输出任何信息</span><br><span class="line">    -V, --verbose           Makes output more verbose # 让输入信息更加详细</span><br><span class="line">    --allow-root            Allows running commands as root # 允许以管理员权限在命令行运行</span><br><span class="line">    -v, --version           Output Bower version # 输出bower的版本</span><br><span class="line">    --no-color              Disable colors # 颜色不可用</span><br><span class="line">See &apos;bower help &lt;command&gt;&apos; for more information on a specific command.</span><br></pre></td></tr></table></figure>

<h2 id="3-home"><a href="#3-home" class="headerlink" title="3. home"></a>3. home</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower home</span><br><span class="line">$ bower home &lt;package&gt;</span><br><span class="line">$ bower home &lt;package&gt;#&lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>在你的默认浏览器中打开一个包，或者指定版本的包的官方地址，一般都是github地址。<br>如果没有包通过，那么将会打开你本地包的主页。</p>
<h2 id="4-info"><a href="#4-info" class="headerlink" title="4. info"></a>4. info</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower info &lt;package&gt;</span><br><span class="line">$ bower info &lt;package&gt; [&lt;property&gt;]</span><br><span class="line">$ bower info &lt;package&gt;#&lt;version&gt; [&lt;property&gt;]</span><br></pre></td></tr></table></figure>

<p>显示一个包（或者指定版本的包）的整体详细信息，也可指定属性查看</p>
<h2 id="5-init"><a href="#5-init" class="headerlink" title="5. init"></a>5. init</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower init</span><br></pre></td></tr></table></figure>

<p>一步一步提示你初始化一个bower.json文件</p>
<h2 id="6-install"><a href="#6-install" class="headerlink" title="6. install"></a>6. install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install [&lt;options&gt;]</span><br><span class="line">$ bower install &lt;endpoint&gt; [&lt;endpoint&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure>

<p>安装一个项目的依赖项（dependencies）中列出的包<br>一个项目的依赖项有以下这些部分组成：</p>
<ol>
<li>在项目中的<code>bower.json</code>中指定的<code>dependencies</code></li>
<li>所有外部的依赖项，虽然没有在<code>bower.json</code>当中指定，但是出现在<code>bower_components</code>中</li>
<li>任何在命令行终端作为参数增加的项<br>当使用<code>--save</code>标识符的时候，所有增加的包的名字将会添加到<code>bower.json</code>中的<code>dependencies</code>中。<br>Bower建议经常使用<code>--save</code>标识符去实现两个用户之间能够复用安装，也就是以后如果你将你的项目需要跟同事一起开发，那么无需将你所有依赖项的实体包都拷给同事，Bower会自动帮你安装<code>bower.json</code>中<code>dependencies</code>所列出的依赖项，并且后续万一你丢失了依赖项，那么bower也会自动按照<code>dependencies</code>帮你安装好丢失的依赖项，这一点无疑会很大程度的提高你的工作效率。<br>终端可以有多种形式的输入：</li>
</ol>
<ul>
<li><code>&lt;package&gt;</code></li>
<li><code>&lt;package&gt;#&lt;version&gt;</code></li>
<li><code>&lt;name&gt;=&lt;package&gt;#&lt;version&gt;</code><br>在上面</li>
<li><code>&lt;package&gt;</code>是一个包的URL路径，实际位置或者注册的名字</li>
<li><code>&lt;version&gt;</code>是一个可用的版本和分支等。</li>
<li><code>&lt;name&gt;</code>是一个本地应该有的名字</li>
</ul>
<h3 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h3><ul>
<li>-F, –force-latest: Force latest version on conflict。强制更新到最新版本</li>
<li>-p, –production: Do not install project devDependencies。不要安装到开发依赖项当中，其实也就是生产环境环境当中</li>
<li>-S, –save: Save installed packages into the project’s bower.json dependencies。保存所安装包到项目中bower.json的dependencies中。</li>
<li>-D, –save-dev: Save installed packages into the project’s bower.json devDependencies。保存所安装包到项目中bower.json的devDependencies中，其实也就是开发环境当中</li>
<li>-E, –save-exact: Configure installed packages with an exact version rather than semver。明确安装一个指定版本的包，而不是依赖项当中的。</li>
</ul>
<h2 id="7-link"><a href="#7-link" class="headerlink" title="7.link"></a>7.link</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower link</span><br><span class="line">$ bower link &lt;name&gt; [&lt;local name&gt;]</span><br></pre></td></tr></table></figure>

<p>这个link的功能可以让开发者们非常容易的测试他们的包，只需要两步。<br>使用<code>bower link</code>在项目文件夹目录当中将会创建一个全局link。在其他一些包中，<code>bower link &lt;name&gt;</code>将会创建一个<code>link</code>在<code>components</code>文件夹当中并且指向先前创建的<code>link</code>.<br>Using ‘bower link’ in a project folder will create a global link. Then, in some other package, bower link <name> will create a link in the components folder pointing to the previously created link.<br>它将会允许你特别容易的测试因为它们将会很快地反应。当一个<code>link</code>不再需要的时候，你仅仅需要通过<code>bower uninstall &lt;name&gt;</code>就可以将其移除。</name></p>
<blockquote>
<p>上述<code>link</code>是也可以理解为链接的意思,能够快速链接指定的包。</p>
</blockquote>
<h2 id="8-list"><a href="#8-list" class="headerlink" title="8. list"></a>8. list</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower list [&lt;options&gt;]</span><br></pre></td></tr></table></figure>

<p>列出本地的包以及可以更新的包；</p>
<p>list options（列表选项）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p, --paths:  # 生成一个JSON格式的路径地图</span><br><span class="line">-r, --relative:  # 使路径相对于目录的`config`属性，默认为`bower components`</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;bower list -p</span><br><span class="line"></span><br><span class="line">  jquery: &apos;bower_components/jquery/dist/jquery.js&apos;,</span><br><span class="line">  bootstrap: [</span><br><span class="line">    &apos;bower_components/bootstrap/less/bootstrap.less&apos;,</span><br><span class="line">    &apos;bower_components/bootstrap/dist/js/bootstrap.js&apos;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">C:\Users\92816\Desktop\testprogramming&gt;bower list -r</span><br><span class="line">bower check-new     Checking for new versions of the project dependencies...</span><br><span class="line">test C:\Users\92816\Desktop\testprogramming</span><br><span class="line">└─┬ bootstrap#3.3.6 (latest is 4.0.0-alpha.2)</span><br><span class="line">  └── jquery#2.2.3 (latest is 3.0.0-beta1)</span><br></pre></td></tr></table></figure>

<h2 id="9-lookup"><a href="#9-lookup" class="headerlink" title="9. lookup"></a>9. lookup</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower lookup &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>通过一个包的名字查看其官方的github地址，然后你就可以复制下来去访问了<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;bower lookup underscore</span><br><span class="line">underscore https://github.com/jashkenas/underscore.git</span><br></pre></td></tr></table></figure>

<h2 id="10-login"><a href="#10-login" class="headerlink" title="10. login"></a>10. login</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower login</span><br></pre></td></tr></table></figure>

<p>用github账号登陆</p>
<p>login options</p>
<p>-t, –token: 通过现有的GitHub身份验证令牌登陆,不用再提示输入用户名和密码</p>
<h2 id="11-prune"><a href="#11-prune" class="headerlink" title="11. prune"></a>11. prune</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower prune</span><br></pre></td></tr></table></figure>

<p>卸载本地无用的包</p>
<h2 id="12-register"><a href="#12-register" class="headerlink" title="12. register"></a>12. register</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower register &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p>注册一个包</p>
<h2 id="13-search"><a href="#13-search" class="headerlink" title="13. search"></a>13. search</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower search</span><br><span class="line">$ bower search &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>搜索你需要的包</p>
<h2 id="14-update"><a href="#14-update" class="headerlink" title="14. update"></a>14. update</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower update &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure>

<p>根据<code>bower.json</code>更新你所安装的包到最新版本</p>
<p>update options</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-F, --force-latest: 强制更新</span><br><span class="line">-p, --production: 生产环境</span><br><span class="line">-S, --save: 更新`bower.json`中的`dependencies`列处的项</span><br><span class="line">-D, --save-dev: 更新`bower.json`中的`devDependencies`列处的项,即更新开发版依赖的项。</span><br></pre></td></tr></table></figure>

<h2 id="15-uninstall"><a href="#15-uninstall" class="headerlink" title="15. uninstall"></a>15. uninstall</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure>

<p>从你本地的<code>bower_components</code>文件目录下卸载指定的包<br>注意，默认情况下，会连所依赖的模块一起卸 载。比如，<br>如果卸载jquery-ui，会连jquery一起卸载，除非还有别的模块依赖jquery,这一点大家可以留意一下</p>
<p>uninstall options（卸载选项）</p>
<p>-S, –save: 也将会从项目的<code>bower.json</code>中<code>dependencies</code>移除该项<br>-D, –save-dev: 也将会从项目的<code>bower.json</code>中<code>devDependencies</code>移除该项</p>
<h2 id="16-version"><a href="#16-version" class="headerlink" title="16. version"></a>16. version</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower version [&lt;newversion&gt; | major | minor | patch]</span><br></pre></td></tr></table></figure>

<p>在这个包的目录下运行显示出它的版本并且在<code>bower.json</code>中写入一个新的数据。</p>
<h2 id="17-Using-local-cache"><a href="#17-Using-local-cache" class="headerlink" title="17. Using local cache"></a>17. Using local cache</h2><p>当你没有网的时候，只要你以前安装过，就可以从本地缓存中安装所需要的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install &lt;package&gt; --offline</span><br></pre></td></tr></table></figure>

<p>你可以通过以下命令列出你所缓存的包的列表：<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;bower cache list</span><br><span class="line">bootstrap=https://github.com/twbs/bootstrap.git#3.3.6</span><br><span class="line">jquery=https://github.com/jquery/jquery-dist.git#2.2.3</span><br></pre></td></tr></table></figure>

<p>当然你也可以通过这个命令来将你所缓存包清除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower cache clean</span><br></pre></td></tr></table></figure>

<p>这样之后你再输入<code>bower cache list</code>就没有内容了；<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\92816\Desktop\testprogramming&gt;bower cache list</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Bower</tag>
        <tag>包管理工具</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6编码风格及规范</title>
    <url>/2016/05/03/160503ES6%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%8F%8A%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h1><p><img src="/2016/05/03/160503ES6编码风格及规范/ES6.jpg" alt="ES6"><br>ES6的新特性足以让每一个前端开发者感到欣喜，也看到了Javascript构建大型应用的潜力，下面这些新的编码风格绝对值得好好去研究学习并运用到项目当中，与传统的JavaScript语法结合在一起，去体会ES6的魅力。<a id="more"></a></p>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>（1）let取代var</strong></p>
<p>ES6提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码如果用<code>var</code>替代<code>let</code>，实际上就声明了一个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code>命令做不到这一点。</p>
<p><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>
<p>所以，建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代。</p>
<p><strong>（2）全局常量和线程安全</strong></p>
<p>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时<code>let</code>表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<p><strong>（3）严格模式</strong></p>
<p>V8引擎只在严格模式之下，支持<code>let</code>。结合前两点，这实际上意味着，将来所有的编程都是针对严格模式的。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">`foobar`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure>

<p>函数的参数如果是对象的成员，优先使用解构赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用<code>Object.assign</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if reshape unavoidable</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，对象<code>obj</code>的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建<code>obj</code>的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>
<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref: ref,</span><br><span class="line"></span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref,</span><br><span class="line"></span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>使用扩展运算符（…）拷贝数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>

<p>使用Array.from方法，将类似数组的对象转为数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>立即执行函数可以写成箭头函数的形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure>

<p>箭头函数取代<code>Function.prototype.bind</code>，不应再用self/_this/that绑定 this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> method.apply(self, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>, params);</span><br></pre></td></tr></table></figure>

<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>
<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="keyword">function</span> divide(a, b, option = <span class="literal">false</span> ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">function</span> divide(a, b, &#123; option = <span class="literal">false</span> &#125; = &#123;&#125;) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用默认值语法设置函数参数的默认值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h2><p>注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要<code>key: value</code>的数据结构，使用Map结构。因为Map有内建的遍历机制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>extends</code>实现继承，因为这样更简单，不会有破坏<code>instanceof</code>运算的危险。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用<code>import</code>取代<code>require</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.func1;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.func2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>export</code>取代<code>module.exports</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// commonJS的写法</span></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Breadcrumbs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Breadcrumbs</span><br></pre></td></tr></table></figure>

<p>如果模块只有一个输出值，就使用<code>export default</code>，如果模块有多个输出值，就不使用<code>export default</code>，不要<code>export default</code>与普通的<code>export</code>同时使用。</p>
<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="string">'./importModule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br></pre></td></tr></table></figure>

<p>如果模块默认输出一个函数，函数名的首字母应该小写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure>

<p>如果模块默认输出一个对象，对象名的首字母应该大写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> StyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</span><br></pre></td></tr></table></figure>

<h2 id="ESLint的使用"><a href="#ESLint的使用" class="headerlink" title="ESLint的使用"></a>ESLint的使用</h2><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p>
<p>首先，安装ESLint。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g eslint</span><br></pre></td></tr></table></figure>

<p>然后，安装Airbnb语法规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g eslint-config-airbnb</span><br></pre></td></tr></table></figure>

<p>最后，在项目的根目录下新建一个<code>.eslintrc</code>文件，配置ESLint。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"eslint-config-airbnb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在就可以检查，当前项目的代码是否符合预设的规则。</p>
<p><code>index.js</code>文件的代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> unusued = <span class="string">'I have no purpose!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">'Hello, World!'</span>;</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure>

<p>使用ESLint检查这个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ eslint index.js</span><br><span class="line">index.js</span><br><span class="line">  1:5  error  unusued is defined but never used                 no-unused-vars</span><br><span class="line">  4:5  error  Expected indentation of 2 characters but found 4  indent</span><br><span class="line">  5:5  error  Expected indentation of 2 characters but found 4  indent</span><br><span class="line"></span><br><span class="line">✖ 3 problems (3 errors, 0 warnings)</span><br></pre></td></tr></table></figure>

<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>
<blockquote>
<p>reference: <a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>git技巧汇总</title>
    <url>/2016/07/13/160713git%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>Git是一个“分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过“回撤”这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用“回撤”是找不回来的。而“版本管理工具”能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。<a id="more"></a></p>
<p>下面的内容就是列举了常用的git命令和一些小技巧，可以通过”页面内查找”的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>
<h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过Git，可以学习<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖老师的免费Git教程</a>入门</em></p>
<ol>
<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>
<li>统一概念：<ul>
<li>工作区：改动（增删文件和内容）</li>
<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了‘暂存区’</li>
<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了’本地仓库’，每个commit，我叫它为一个‘版本’。</li>
<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了‘远程仓库’（github等)</li>
<li>commit-id：输出命令：<code>git log</code>，最上面那行<code>commit xxxxxx</code>，后面的字符串就是commit-id</li>
</ul>
</li>
<li>如果喜欢这个项目，欢迎Star、提交Pr、<a href="https://github.com/521xueweihan/git-tips/issues" target="_blank" rel="noopener">反馈问题</a>😊</li>
</ol>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#展示帮助信息">展示帮助信息</a></li>
<li><a href="#回到远程仓库的状态">回到远程仓库的状态</a></li>
<li><a href="#重设第一个commit">重设第一个commit</a></li>
<li><a href="#展示工作区和暂存区的不同">展示工作区和暂存区的不同</a></li>
<li><a href="#展示暂存区和最近版本的不同">展示暂存区和最近版本的不同</a></li>
<li><a href="#展示暂存区工作区和最近版本的不同">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#快速切换分支">快速切换分支</a></li>
<li><a href="#删除已经合并到master的分支">删除已经合并到master的分支</a></li>
<li><a href="#展示所有的分支关联的远程仓库">展示所有的分支关联的远程仓库</a></li>
<li><a href="#关联远程分支">关联远程分支</a></li>
<li><a href="#删除本地分支">删除本地分支</a></li>
<li><a href="#删除远程分支">删除远程分支</a></li>
<li><a href="#查看标签">查看标签</a></li>
<li><a href="#本地创建标签">本地创建标签</a></li>
<li><a href="#推送标签到远程仓库">推送标签到远程仓库</a></li>
<li><a href="#删除本地标签">删除本地标签</a></li>
<li><a href="#删除远程标签">删除远程标签</a></li>
<li><a href="#放弃工作区的修改">放弃工作区的修改</a></li>
<li><a href="#回到某一个commit的状态并重新增添一个commit">回到某一个commit的状态，并重新增添一个commit</a></li>
<li><a href="#回到某个commit的状态并删除后面的commit">回到某个commit的状态，并删除后面的commit</a></li>
<li><a href="#修改上一个commit的描述">修改上一个commit的描述</a></li>
<li><a href="#查看commit历史">查看commit历史</a></li>
<li><a href="#显示本地执行过git命令">显示本地执行过git命令</a></li>
<li><a href="#修改作者名">修改作者名</a></li>
<li><a href="#修改远程仓库的url">修改远程仓库的url</a></li>
<li><a href="#列出所有远程仓库">列出所有远程仓库</a></li>
<li><a href="#列出本地和远程分支">列出本地和远程分支</a></li>
<li><a href="#列出远程分支">列出远程分支</a></li>
<li><a href="#查看两个星期内的改动">查看两个星期内的改动</a></li>
<li><a href="#把A分支的某一个commit放到B分支上">把A分支的某一个commit，放到B分支上</a></li>
<li><a href="#给git命令起别名">给git命令起别名</a></li>
<li><a href="#存储当前的修改但不用提交commit">存储当前的修改，但不用提交commit</a></li>
<li><a href="#保存当前状态包括untracked的文件">保存当前状态，包括untracked的文件</a></li>
<li><a href="#展示所有stashes">展示所有stashes</a></li>
<li><a href="#回到某个stash的状态">回到某个stash的状态</a></li>
<li><a href="#回到最后一个stash的状态并删除这个stash">回到最后一个stash的状态，并删除这个stash</a></li>
<li><a href="#删除所有的stash">删除所有的stash</a></li>
<li><a href="#从stash中拿出某个文件的修改">从stash中拿出某个文件的修改</a></li>
<li><a href="#展示所有tracked的文件">展示所有tracked的文件</a></li>
<li><a href="#展示所有untracked的文件">展示所有untracked的文件</a></li>
<li><a href="#展示所有忽略的文件">展示所有忽略的文件</a></li>
<li><a href="#强制删除untracked的文件">强制删除untracked的文件</a></li>
<li><a href="#强制删除untracked的目录">强制删除untracked的目录</a></li>
<li><a href="#重命名分支">重命名分支</a></li>
<li><a href="#展示简化的commit历史">展示简化的commit历史</a></li>
<li><a href="#查看某段代码是谁写的">查看某段代码是谁写的</a></li>
<li><a href="#把某一个分支到导出成一个文件">把某一个分支到导出成一个文件</a></li>
<li><a href="#从包中导入分支">从包中导入分支</a></li>
<li><a href="#执行rebase之前自动stash">执行rebase之前自动stash</a></li>
<li><a href="#从远程仓库根据ID拉下某一状态-到本地分支">从远程仓库根据ID，拉下某一状态，到本地分支</a></li>
<li><a href="#详细展示一行中的修改">详细展示一行中的修改</a></li>
<li><a href="#清除gitignore文件中记录的文件">清除<code>.gitignore</code>文件中记录的文件</a></li>
<li><a href="#展示所有alias和configs">展示所有alias和configs</a></li>
<li><a href="#展示忽略的文件">展示忽略的文件</a></li>
<li><a href="#commit历史中显示Branch1有的但是Branch2没有commit">commit历史中显示Branch1有的，但是Branch2没有commit</a></li>
<li><a href="#在commit-log中显示GPG签名">在commit log中显示GPG签名</a></li>
<li><a href="#删除全局设置">删除全局设置</a></li>
<li><a href="#新建并切换到新分支上同时这个分支没有任何commit">新建并切换到新分支上，同时这个分支没有任何commit</a></li>
<li><a href="#展示任意分支某一文件的内容">展示任意分支某一文件的内容</a></li>
<li><a href="#clone下来指定的单一分支">clone下来指定的单一分支</a></li>
<li><a href="#创建并切换到该分支">创建并切换到该分支</a></li>
<li><a href="#忽略文件的权限变化">忽略文件的权限变化</a></li>
<li><a href="#展示本地所有的分支的commit">展示本地所有的分支的commit</a></li>
<li><a href="#在commit-log中查找相关内容">在commit log中查找相关内容</a></li>
<li><a href="#把暂存区的指定file放到工作区中">把暂存区的指定file放到工作区中</a></li>
<li><a href="#强制推送">强制推送</a></li>
<li><a href="#增加远程仓库">增加远程仓库</a></li>
<li><a href="#联系我">联系我</a></li>
</ul>
<h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure>

<h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地仓库的所有版本(commit)，回到远程仓库的状态。  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="重设第一个commit"><a href="#重设第一个commit" class="headerlink" title="重设第一个commit"></a>重设第一个commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的commit</strong>，这样就可以重新提交第一个commit了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>

<h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的different(不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>还可以展示本地仓库中任意两个commit之间的文件变动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本(commit)的different(不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>

<h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本(commit)的different(不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>

<h2 id="快速切换分支"><a href="#快速切换分支" class="headerlink" title="快速切换分支"></a>快速切换分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>

<h2 id="删除已经合并到master的分支"><a href="#删除已经合并到master的分支" class="headerlink" title="删除已经合并到master的分支"></a>删除已经合并到master的分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">'^\*\|  master'</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>

<h2 id="展示所有的分支关联的远程仓库"><a href="#展示所有的分支关联的远程仓库" class="headerlink" title="展示所有的分支关联的远程仓库"></a>展示所有的分支关联的远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>

<h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code>就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure>

<p>或者在push时加上<code>-u</code>参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;<span class="built_in">local</span>-branchname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>

<p>或者  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p>展示当前分支的最近的tag</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>

<h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>

<p>默认tag是打在最近的一次commit上，如果需要指定commit打tag：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">"v1.0 发布(描述)"</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin &lt;<span class="built_in">local</span>-version-number&gt;</span><br></pre></td></tr></table></figure>

<p>一次性推送所有标签，同步到远程仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<p>放弃所有修改：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h2 id="回到某一个commit的状态，并重新增添一个commit"><a href="#回到某一个commit的状态，并重新增添一个commit" class="headerlink" title="回到某一个commit的状态，并重新增添一个commit"></a>回到某一个commit的状态，并重新增添一个commit</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回到某个commit的状态，并删除后面的commit"><a href="#回到某个commit的状态，并删除后面的commit" class="headerlink" title="回到某个commit的状态，并删除后面的commit"></a>回到某个commit的状态，并删除后面的commit</h2><p>和revert的区别：reset命令会抹去某个commit id之后的所有commit</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改上一个commit的描述"><a href="#修改上一个commit的描述" class="headerlink" title="修改上一个commit的描述"></a>修改上一个commit的描述</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="查看commit历史"><a href="#查看commit历史" class="headerlink" title="查看commit历史"></a>查看commit历史</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame的意思为‘责怪’，你懂的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="显示本地执行过git命令"><a href="#显示本地执行过git命令" class="headerlink" title="显示本地执行过git命令"></a>显示本地执行过git命令</h2><p>就像shell的history一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">'Author Name &lt;email@address.com&gt;'</span></span><br></pre></td></tr></table></figure>

<h2 id="修改远程仓库的url"><a href="#修改远程仓库的url" class="headerlink" title="修改远程仓库的url"></a>修改远程仓库的url</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>

<h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a参数相当于：all</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h2 id="列出远程分支"><a href="#列出远程分支" class="headerlink" title="列出远程分支"></a>列出远程分支</h2><p>-r参数相当于：remote</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">'2 weeks ago'</span></span><br></pre></td></tr></table></figure>

<h2 id="把A分支的某一个commit，放到B分支上"><a href="#把A分支的某一个commit，放到B分支上" class="headerlink" title="把A分支的某一个commit，放到B分支上"></a>把A分支的某一个commit，放到B分支上</h2><p>这个过程需要<code>cherry-pick</code>命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="给git命令起别名"><a href="#给git命令起别名" class="headerlink" title="给git命令起别名"></a>给git命令起别名</h2><p>简化命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<h2 id="存储当前的修改，但不用提交commit"><a href="#存储当前的修改，但不用提交commit" class="headerlink" title="存储当前的修改，但不用提交commit"></a>存储当前的修改，但不用提交commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="noopener">廖雪峰老师的git教程</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<h2 id="保存当前状态，包括untracked的文件"><a href="#保存当前状态，包括untracked的文件" class="headerlink" title="保存当前状态，包括untracked的文件"></a>保存当前状态，包括untracked的文件</h2><p>untracked文件：新建的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure>

<h2 id="展示所有stashes"><a href="#展示所有stashes" class="headerlink" title="展示所有stashes"></a>展示所有stashes</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<h2 id="回到某个stash的状态"><a href="#回到某个stash的状态" class="headerlink" title="回到某个stash的状态"></a>回到某个stash的状态</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回到最后一个stash的状态，并删除这个stash"><a href="#回到最后一个stash的状态，并删除这个stash" class="headerlink" title="回到最后一个stash的状态，并删除这个stash"></a>回到最后一个stash的状态，并删除这个stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h2 id="删除所有的stash"><a href="#删除所有的stash" class="headerlink" title="删除所有的stash"></a>删除所有的stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<h2 id="从stash中拿出某个文件的修改"><a href="#从stash中拿出某个文件的修改" class="headerlink" title="从stash中拿出某个文件的修改"></a>从stash中拿出某个文件的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示所有tracked的文件"><a href="#展示所有tracked的文件" class="headerlink" title="展示所有tracked的文件"></a>展示所有tracked的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure>

<h2 id="展示所有untracked的文件"><a href="#展示所有untracked的文件" class="headerlink" title="展示所有untracked的文件"></a>展示所有untracked的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure>

<h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>

<h2 id="强制删除untracked的文件"><a href="#强制删除untracked的文件" class="headerlink" title="强制删除untracked的文件"></a>强制删除untracked的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的untracked文件。<code>clean</code>命令，<strong>注意两点</strong>：  </p>
<ol>
<li>clean后，删除的文件无法找回</li>
<li>不会影响tracked的文件的改动，只会删除untracked的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>

<h2 id="强制删除untracked的目录"><a href="#强制删除untracked的目录" class="headerlink" title="强制删除untracked的目录"></a>强制删除untracked的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除untracked的文件。详情见上一条</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure>

<h2 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示简化的commit历史"><a href="#展示简化的commit历史" class="headerlink" title="展示简化的commit历史"></a>展示简化的commit历史</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>

<h2 id="把某一个分支到导出成一个文件"><a href="#把某一个分支到导出成一个文件" class="headerlink" title="把某一个分支到导出成一个文件"></a>把某一个分支到导出成一个文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面<code>git bundle create</code>命令导出的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="执行rebase之前自动stash"><a href="#执行rebase之前自动stash" class="headerlink" title="执行rebase之前自动stash"></a>执行rebase之前自动stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure>

<h2 id="从远程仓库根据ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据ID，拉下某一状态，到本地分支"></a>从远程仓库根据ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure>

<h2 id="清除gitignore文件中记录的文件"><a href="#清除gitignore文件中记录的文件" class="headerlink" title="清除gitignore文件中记录的文件"></a>清除gitignore文件中记录的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure>

<h2 id="展示所有alias和configs"><a href="#展示所有alias和configs" class="headerlink" title="展示所有alias和configs"></a>展示所有alias和configs</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure>

<h2 id="commit历史中显示Branch1有的，但是Branch2没有commit"><a href="#commit历史中显示Branch1有的，但是Branch2没有commit" class="headerlink" title="commit历史中显示Branch1有的，但是Branch2没有commit"></a>commit历史中显示Branch1有的，但是Branch2没有commit</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>

<h2 id="在commit-log中显示GPG签名"><a href="#在commit-log中显示GPG签名" class="headerlink" title="在commit log中显示GPG签名"></a>在commit log中显示GPG签名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure>

<h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="新建并切换到新分支上，同时这个分支没有任何commit"><a href="#新建并切换到新分支上，同时这个分支没有任何commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何commit"></a>新建并切换到新分支上，同时这个分支没有任何commit</h2><p>相当于保存修改，但是重写commit历史  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="clone下来指定的单一分支"><a href="#clone下来指定的单一分支" class="headerlink" title="clone下来指定的单一分支"></a>clone下来指定的单一分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<h2 id="创建并切换到该分支"><a href="#创建并切换到该分支" class="headerlink" title="创建并切换到该分支"></a>创建并切换到该分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="展示本地所有的分支的commit"><a href="#展示本地所有的分支的commit" class="headerlink" title="展示本地所有的分支的commit"></a>展示本地所有的分支的commit</h2><p>最新的放在最上面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">for</span>-each-ref --sort=-committerdate --format=<span class="string">'%(refname:short)'</span> refs/heads/</span><br></pre></td></tr></table></figure>

<h2 id="在commit-log中查找相关内容"><a href="#在commit-log中查找相关内容" class="headerlink" title="在commit log中查找相关内容"></a>在commit log中查找相关内容</h2><p>通过grep查找，given-text：所需要查找的字段</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">'&lt;given-text&gt;'</span></span><br></pre></td></tr></table></figure>

<h2 id="把暂存区的指定file放到工作区中"><a href="#把暂存区的指定file放到工作区中" class="headerlink" title="把暂存区的指定file放到工作区中"></a>把暂存区的指定file放到工作区中</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>

<p><strong><a href="#目录">⬆ 返回顶部</a></strong></p>
<blockquote>
<p>reference: <a href="https://github.com/521xueweihan/git-tips" target="_blank" rel="noopener">https://github.com/521xueweihan/git-tips</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>React性能优化总结</title>
    <url>/2021/08/26/20210826React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对在React应用中可以采用的一些性能优化方式做一下总结整理</p>
</blockquote>
<p><img src="https://img.lsqy.tech/react.png" alt="react.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>目前在工作中，大量的项目都是使用react来进行开展的，了解掌握下react的性能优化对项目的体验和可维护性都有很大的好处，下面介绍下在react中可以运用的一些性能优化方式；<a id="more"></a></p>
<h3 id="性能优化思路"><a href="#性能优化思路" class="headerlink" title="性能优化思路"></a>性能优化思路</h3><blockquote>
<p>对于类式组件和函数式组件来看，都可以从以下几个方面去思考如何能够进行性能优化</p>
</blockquote>
<ul>
<li>减少重新render的次数</li>
<li>减少渲染的节点</li>
<li>降低渲染计算量</li>
<li>合理设计组件</li>
</ul>
<h2 id="减少重新render的次数"><a href="#减少重新render的次数" class="headerlink" title="减少重新render的次数"></a>减少重新render的次数</h2><blockquote>
<p>在react里时间耗时最多的一个地方是reconciliation（reconciliation 的最终目标是以最有效的方式，根据新的状态来更新 UI，我们可以简单地理解为 diff），如果不执行render，也就不需要reconciliation，所以可以看出减少render在性能优化过程中的重要程度了。</p>
</blockquote>
<h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p>React.PureComponent 与 React.Component 很相似。两者的区别在于 React.Component 并未实现 shouldComponentUpdate()，而 React.PureComponent 中以浅层对比 prop 和 state 的方式来实现了该函数。<br><strong>需要注意</strong>的是在使用PureComponent的组件中，在props或者state的属性值是对象的情况下，并不能阻止不必要的渲染，是因为自动加载的shouldComponentUpdate里面做的只是浅比较，所以想要用PureComponent的特性，应该遵守原则：</p>
<ul>
<li>确保数据类型是值类型</li>
<li>如果是引用类型，不应当有深层次的数据变化(解构)</li>
</ul>
<h3 id="ShouldComponentUpdate"><a href="#ShouldComponentUpdate" class="headerlink" title="ShouldComponentUpdate"></a>ShouldComponentUpdate</h3><p>可以利用此事件来决定何时需要重新渲染组件。如果组件 props 更改或调用 setState，则此函数返回一个 Boolean 值，为true则会重新渲染组件，反之则不会重新渲染组件。<br>在这两种情况下组件都会重新渲染。我们可以在这个生命周期事件中放置一个自定义逻辑，以决定是否调用组件的 render 函数。<br>下面举一个小的例子来辅助理解下：<br>比如要在你的应用中展示学生的详细资料，每个学生都包含有多个属性，如姓名、年龄、爱好、身高、体重、家庭住址、父母姓名等；在这个组件场景中，只需要展示学生的姓名、年龄、住址，其他的信息不需要在这里展示，所以在理想情况下，除去姓名、年龄、住址以外的信息变化组件是不需要重新渲染的；<br>示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ShouldComponentUpdateUsage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">"小明"</span>,</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      address: <span class="string">"xxxxxx"</span>,</span><br><span class="line">      height: <span class="number">165</span>,</span><br><span class="line">      weight: <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        height: <span class="number">168</span>,</span><br><span class="line">        weight: <span class="number">45</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">5000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nextState.name !== <span class="keyword">this</span>.state.name || nextState.age !== <span class="keyword">this</span>.state.age || nextState.address !== <span class="keyword">this</span>.state.address) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, address &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;Student name: &#123;name&#125; &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;Student age:&#123;age&#125; &lt;/</span>p&gt;</span><br><span class="line">      	&lt;p&gt;Student address:&#123;address&#125; &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照 React 团队的说法，shouldComponentUpdate是保证性能的紧急出口，既然是紧急出口，那就意味着我们轻易用不到它。但既然有这样一个紧急出口，那说明有时候它还是很有必要的。所以我们要搞清楚到底什么时候才需要使用这个紧急出口。</p>
<h4 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h4><p>当你觉得，被改变的state或者props，不需要更新视图时，你就应该思考要不要使用它。<br>需要注意的一个地方是：改变之后，又不需要更新视图的状态，也不应该放在state中。<br>shouldComponentUpdate的使用，也是有代价的。如果处理得不好，甚至比多render一次更消耗性能，另外也会使组件的复杂度增大，一般情况下使用PureComponent即可；</p>
<h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h3><p>如果你的组件在相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。<br>React.memo <strong>仅检查 props 变更</strong>。如果函数组件被 React.memo 包裹，且其实现中拥有 useState，useReducer 或 useContext 的 Hook，当 state 或 context 发生变化时，它仍会重新渲染。<br>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 使用 props 渲染 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果把 nextProps 传入 render 方法的返回结果与</span></span><br><span class="line"><span class="comment">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span></span><br><span class="line"><span class="comment">  否则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong><br>与 class 组件中 shouldComponentUpdate() 方法不同的是，如果 props 相等，areEqual 会返回 true；如果 props 不相等，则返回 false。这与 shouldComponentUpdate 方法的返回值相反。</p>
</blockquote>
<h3 id="合理使用Context"><a href="#合理使用Context" class="headerlink" title="合理使用Context"></a>合理使用Context</h3><p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。正是因为其这个特点，它是可以穿透React.memo或者shouldComponentUpdate的比对的，也就是说，一旦 Context 的 Value 变动，所有依赖该 Context 的组件会全部 forceUpdate.这个和 Mobx 和 Vue 的响应式系统不同，Context API 并不能细粒度地检测哪些组件依赖哪些状态。</p>
<h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ul>
<li>Context中只定义被大多数组件所共用的属性，例如当前用户的信息、主题或者选择的语言。</li>
</ul>
<h3 id="避免使用匿名函数"><a href="#避免使用匿名函数" class="headerlink" title="避免使用匿名函数"></a>避免使用匿名函数</h3><p>首先来看下下面这段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MenuContainer = <span class="function">(<span class="params">&#123; list &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Menu&gt;</span><br><span class="line">    &#123;list.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (</span><br><span class="line">      &lt;MenuItem key=&#123;i.id&#125; onClick=&#123;() =&gt; handleClick(i.id)&#125; value=&#123;i.value&#125; /&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">  &lt;<span class="regexp">/Menu&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<p>上面这个写法看起来是比较简洁，但是有一个潜在问题是匿名函数在每次渲染时都会有不同的引用，这样就会导致Menu组件会出现重复渲染的问题；可以使用useCallback来进行优化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MenuContainer = <span class="function">(<span class="params">&#123; list &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = useCallback(</span><br><span class="line">    (id) =&gt; <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Menu&gt;</span><br><span class="line">      &#123;list.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (</span><br><span class="line">        &lt;MenuItem key=&#123;i.id&#125; id=&#123;i.id&#125; onClick=&#123;handleClick(i.id)&#125; value=&#123;i.value&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/Menu&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="减少渲染的节点"><a href="#减少渲染的节点" class="headerlink" title="减少渲染的节点"></a>减少渲染的节点</h2><h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><blockquote>
<p>组件懒加载可以让react应用在真正需要展示这个组件的时候再去展示，可以比较有效的减少渲染的节点数提高页面的加载速度</p>
</blockquote>
<p>React官方在16.6版本后引入了新的特性：React.lazy 和 React.Suspense,这两个组件的配合使用可以比较方便进行组件懒加载的实现；<br><strong>React.lazy</strong><br>该方法主要的作用就是可以定义一个动态加载的组件，这可以直接缩减打包后bundle的体积，并且可以延迟加载在初次渲染时不需要渲染的组件，代码示例如下：<br>使用之前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SomeComponent <span class="keyword">from</span> <span class="string">'./SomeComponent'</span>;</span><br></pre></td></tr></table></figure>

<p>使用之后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SomeComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./SomeComponent'</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 React.lazy 的动态引入特性需要 JS 环境支持 Promise。在 IE11 及以下版本的浏览器中需要通过引入 polyfill 来使用该特性。</p>
</blockquote>
<p><strong>React.Suspense</strong><br>该组件目前主要的作用就是配合渲染lazy组件，这样就可以在等待加载lazy组件时展示loading元素，不至于直接空白，提升用户体验；<br>Suspense组件中的 fallback 属性接受任何在组件加载过程中你想展示的 React 元素。你可以将 Suspense 组件置于懒加载组件之上的任何位置，你甚至可以用一个 Suspense 组件包裹多个懒加载组件。<br>代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OtherComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./OtherComponent'</span>));</span><br><span class="line"><span class="keyword">const</span> AnotherComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./AnotherComponent'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;section&gt;</span></span><br><span class="line"><span class="regexp">          &lt;OtherComponent /</span>&gt;</span><br><span class="line">          &lt;AnotherComponent /&gt;</span><br><span class="line">        &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Suspense&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有一点要特别注意的是：React.lazy 和 Suspense 技术还不支持服务端渲染。如果你想要在使用服务端渲染的应用中使用，推荐使用 <a href="https://github.com/gregberge/loadable-components" target="_blank" rel="noopener">Loadable Components</a> 这个库，可以结合这个文档<a href="https://loadable-components.com/docs/server-side-rendering/" target="_blank" rel="noopener">服务端渲染打包指南</a>来进行查看。</p>
</blockquote>
<p>另外在业内也有一些比较成熟的react组件懒加载开源库：<a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a>和<a href="https://github.com/twobin/react-lazyload" target="_blank" rel="noopener">react-lazyload</a>，感兴趣的可以结合看下；<br>​<br></p>
<h3 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h3><p>虚拟列表是一种根据滚动容器元素的可视区域来渲染长列表数据中某一个部分数据的技术，在开发一些项目中，会遇到一些不是直接分页来加载列表数据的场景，在这种情况下可以考虑结合虚拟列表来进行优化，可以达到根据容器元素的高度以及列表项元素的高度来显示长列表数据中的某一个部分，而不是去完整地渲染长列表，以提高无限滚动的性能。<br>可以关注下放两个比较常用的类库来进行深入了解</p>
<ul>
<li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fbvaughn%2Freact-virtualized" target="_blank" rel="noopener">react-virtualized</a></li>
<li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fbvaughn%2Freact-window" target="_blank" rel="noopener">react-window</a></li>
</ul>
<h2 id="降低渲染计算量"><a href="#降低渲染计算量" class="headerlink" title="降低渲染计算量"></a>降低渲染计算量</h2><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>先来看下useMemo的基本使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpensiveValue</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算量很大的一些逻辑</span></span><br><span class="line">  <span class="keyword">return</span> xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(computeExpensiveValue, [a, b]);</span><br></pre></td></tr></table></figure>

<p>useMemo 的第一个参数就是一个函数，这个函数返回的值会被缓存起来，同时这个值会作为 useMemo 的返回值，第二个参数是一个数组依赖，如果数组里面的值有变化，那么就会重新去执行第一个参数里面的函数，并将函数返回的值缓存起来并作为 useMemo 的返回值 。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值；</li>
<li>计算量如果很小的计算函数，也可以选择不使用 useMemo，因为这点优化并不会作为性能瓶颈的要点，反而可能使用错误还会引起一些性能问题。</li>
</ul>
</blockquote>
<h3 id="遍历展示视图时使用key"><a href="#遍历展示视图时使用key" class="headerlink" title="遍历展示视图时使用key"></a>遍历展示视图时使用key</h3><p>key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">    &#123;number&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<p>使用key注意事项：</p>
<ul>
<li>最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用数据中的 id 来作为元素的 key，当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key</li>
<li>元素的 key 只有放在就近的数组上下文中才有意义。例如，如果你提取出一个 ListItem 组件，你应该把 key 保留在数组中的这个 <listitem> 元素上，而不是放在 ListItem 组件中的 <li> 元素上。</li>
</listitem></li></ul>
<h2 id="合理设计组件"><a href="#合理设计组件" class="headerlink" title="合理设计组件"></a>合理设计组件</h2><h3 id="简化props"><a href="#简化props" class="headerlink" title="简化props"></a>简化props</h3><p>如果一个组件的props比较复杂的话，会影响shallowCompare的效率，也会使这个组件变得难以维护，另外也与“单一职责”的原则不符合，可以考虑进行拆解。</p>
<h3 id="简化State"><a href="#简化State" class="headerlink" title="简化State"></a>简化State</h3><p>在设计组件的state时，可以按照这个原则来：需要组件响应它的变动或者需要渲染到视图中的数据，才放到 state 中；这样可以避免不必要的数据变动导致组件重新渲染。</p>
<h3 id="减少组件嵌套"><a href="#减少组件嵌套" class="headerlink" title="减少组件嵌套"></a>减少组件嵌套</h3><p>一般不必要的节点嵌套都是滥用高阶组件/RenderProps 导致的。所以还是那句话‘只有在必要时才使用 xxx’。 有很多种方式来代替高阶组件/RenderProps，例如优先使用 props、React Hooks<br></p>
<blockquote>
<p>参考<br><a href="https://react.docschina.org/docs/optimizing-performance.html" target="_blank" rel="noopener">https://react.docschina.org/docs/optimizing-performance.html</a><br><a href="https://www.infoq.cn/article/2016/07/react-shouldcomponentupdate" target="_blank" rel="noopener">https://www.infoq.cn/article/2016/07/react-shouldcomponentupdate</a></p>
</blockquote>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>YAHOO前端优化35条黄金法则</title>
    <url>/2015/11/14/151114YAHOO%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%9635%E6%9D%A1%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/</url>
    <content><![CDATA[<p>Yahoo!的Excetional Performance 团队总结出了一系列可以提高网站速度的方法。可以分为 7大类 35条。<br>包括内容 、服务器 、 <code>CSS</code> 、 <code>JavaScript</code> 、<code>Cookie</code> 、图片 、移动应用 ，七部分。</p>
<h1 id="一、内容部分"><a href="#一、内容部分" class="headerlink" title="一、内容部分"></a>一、内容部分</h1><ul>
<li>尽量减少 HTTP请求</li>
<li>减少 DNS查找</li>
<li>避免跳转</li>
<li>缓存 Ajxa</li>
<li>推迟加载</li>
<li>提前加载</li>
<li>减少 DOM元素数量</li>
<li>用域名划分页面内容</li>
<li>使 frame数量最少</li>
<li>避免 404错误</li>
</ul>
<h2 id="1、尽量减少-HTTP请求次数"><a href="#1、尽量减少-HTTP请求次数" class="headerlink" title="1、尽量减少 HTTP请求次数"></a>1、尽量减少 HTTP请求次数</h2><p> 终端用户响应的时间中，有 80%用于下载各项内容。这部分时间包括下载页面中的图像、样式表、脚本、 Flash等。通过减少页面中的元素可以减少 HTTP请求的次数。这是提高网页速度的关键步骤。</p>
<p> 减少页面组件的方法其实就是简化页面设计。那么有没有一种方法既能保持页面内容的丰富性又能达到加快响应时间的目的呢？这里有几条减少HTTP请求次数同时又可能保持页面内容丰富的技术。</p>
<p>合并文件是通过把所有的脚本放到一个文件中来减少 HTTP请求的方法，如可以简单地把所有的 CSS文件都放入一个样式表中。当脚本或者样式表在不同页面中使用时需要做不同的修 改，这可能会相对麻烦点，但即便如此也要把这个方法作为改善页面性能的重要一步。</p>
<p><code>CSS Sprites</code>是减少图像请求的有效方法。把所有的背景图像都放到一个图片文件中，然后通过<code>CSS</code>的 <code>background-image</code>和 <code>background-position</code>属性来显示图片的不同部分；</p>
<p>图片地图是把多张图片整合到一张图片中。虽然文件的总体大小不会改变，但是可 以减少 HTTP请求次数。图片地图只有在图片的所有组成部分在页面中是紧挨在一起的时候才能 使用，如导航栏。确定图片的坐标和可能会比较繁琐且容易出错，同时使用图片地图导航也不具有可读性，因此不推荐这种方法；</p>
<p>内联图像是使用 <code>data:URL scheme</code>的方法把图像数据加载页面中。这可能会增加页面的大 小。把内联图像放到样式表（可缓存）中可以减少 <code>HTTP</code>请求同时又避免增加页面文件的大小。但是内联图像现在还没有得到主流浏览器的 支持。</p>
<p>  减少页面的<code>HTTP</code>请求次数是你首先要做的一步。这是改进首次访问用户等待时间的最重要的方法。 如同 <code>Tenni Theurer</code>的他的博客 <code>Browser Cahe Usage - Exposed!</code>中所说， HTTP请求在无缓存情况下占去了 40%到 60%的响应时间。让那些初次访问你网站的人获得更加快速的体验吧！</p>
<h2 id="2、减少-DNS查找次数"><a href="#2、减少-DNS查找次数" class="headerlink" title="2、减少 DNS查找次数"></a>2、减少 DNS查找次数</h2><p>  域名系统（ DNS）提供了域名和 IP的对应关系，就像电话本中人名和他们的电话号码的关系一样。当你在浏览器地址栏中 输入 <a href="http://www.yahoo.com" target="_blank" rel="noopener">www.yahoo.com</a> 时， DNS解析服务器就会返回这个域名对应的 IP地址。 DNS解析的过程同样也是需要时间的。一般情况下返回给定域名对应的 IP地址会花费 20到 120毫秒的时间。而且在这个过程中浏览器什么都不会做直到 DNS查找完毕。</p>
<p>   缓存 DNS查找可以改善页面性能。这种缓存需要一个特定的缓存服务器，这种服务器一般属于用户的 ISP提供商或者本地局域网控制，但是它同样会在用户使用的计算机上产生缓存。 DNS信息会保留在操作系统的 DNS缓存中（微软 Windows系统中 DNS Client Service）。大多数浏览器有独立于操作系统以外的自己的缓存。由于浏览器有自己的缓存记录，因此在一次请求中它不会受到操作系统的影响。</p>
<p>  <code>Internet Explorer</code> 默认情况下对 DNS查找记录的缓存时间为 30分钟，它在注册表中的键值为 <code>DnsCacheTimeout</code>。 <code>Firefox</code>对 DNS的查找记录缓存时间为 1分钟，它在配置文件中的选项为<code>network.dnsCacheExpiration</code>（ Fasterfox把这个选项改为了 1小时）。</p>
<p>  当客户端中的 DNS缓存都为空时（浏览器和操作系统都为空）， DNS查找的次数和页面中主机名的数量相同。这其中包括页面中 URL、图片、脚本文件、样式表、Flash对象等包含的主机名。减少主机名的数量可以减少DNS查找次数。</p>
<p>  减少主机名的数量还可以减少页面中并行下载的数量。减少 DNS查找次数可以节省响应时间，但是减少并行下载却会增加响应时间。我的指导原则是 把这些页面中的内容分割成至少两部分但不超过四部分。这种结果就是在减少 DNS查找次数和保持较高程度并行下载两者之间的权衡了。</p>
<h2 id="3、避免跳转"><a href="#3、避免跳转" class="headerlink" title="3、避免跳转"></a>3、避免跳转</h2><p>跳转是使用 301和 302代码实现的。下面是一个响应代码为 301的 HTTP头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line"></span><br><span class="line">Location: http://example.com/newuri</span><br><span class="line"></span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure>

<p>  浏览器会把用户指向到 Location中指定的 URL。头文件中的所有信息在一次跳转中都是必需的，内容部分可以为空。不管他们的名 称， 301和 302响应都不会被缓存除非增加一个额外的头选项，如 Expires或者 Cache-Control来指定它缓存。<code>&lt;meat /&gt;</code>元素的刷新标签和<code>JavaScript</code>也可以实现 URL的跳转，但是如果你必须要跳转的时候，最好的方法就是使用标准的 <code>3XXHTTP</code>状态代码，这主要是为了确保“后退”按钮可以正确地使用。</p>
<p>  但是要记住跳转会降低用户体验。在用户和 HTML文档中间增加一个跳转，会拖延页面中所有元素的显示，因为在 HTML文件被加载前任何文件（图像、 Flash等）都不会被下载。</p>
<p>  有一种经常被网页开发者忽略却往往十分浪费响应时间的跳转现象。 这种现象发生在当 URL本该有斜杠（ /）却被忽略掉时。例如，当我们要访问 <code>http://astrology.yahoo.com/astrology</code> 时，实际上返回的是一个包含 301代码的跳转，它指向的是<code>http://astrology.yahoo.com/astrology/</code> （注意末尾的斜杠）。在 Apache服务器中可以使用 Alias 或者 mod_rewrite或者 the DirectorySlash来避免。</p>
<p>  连接新网站和旧网站是跳转功能经常被用到的另一种情况。这种情况 下往往要连接网站的不同内容然后根据用户的不同类型（如浏览器类型、用户账号所属类型）来进行跳转。使用跳转来实现两个网站的切换十分简单，需要的代码量 也不多。尽管使用这种方法对于开发者来说可以降低复杂程度，但是它同样降低用户体验。一个可替代方法就是如果两者在同一台服务器上时使用 Alias和 mod_rewrite和实现。如果是因为域名的不同而采用跳转，那么可以通过使用 Alias或者 mod_rewirte建立 CNAME（保存一个域名和另外一个域名之间关系的DNS记录）来替代。</p>
<h2 id="4、可缓存的-AJAX"><a href="#4、可缓存的-AJAX" class="headerlink" title="4、可缓存的 AJAX"></a>4、可缓存的 AJAX</h2><p>  Ajax 经常被提及的一个好处就是由于其从后台服务器传输信息 的异步性而为用户带来的反馈的即时性。但是，使用 Ajax并不能保证用户不会在等待异步的 JavaScript和 XML响应上花费时间。在很多应用中，用户是否需要等待响应取决于 Ajax如何来使用。例如，在一个基于 Web的 Email客户端中，用户必须等待 Ajax返回符合他们条件的邮件查询结果。记住一点，“异步”并不异味着“即时”，这 很重要。</p>
<p>  为了提高性能，优化 Ajax响应是很重要的。提高 Ajxa性能的措施中最重要的方法就是使响应具有可缓存性，具体的讨论可以查看 <code>Add an Expires or a Cache-Control Header</code>。 其它的几条规则也同样适用于Ajax：</p>
<pre><code>Gizp 压缩文件

减少 DNS查找次数

精简 JavaScript

避免跳转

配置 ETags</code></pre><p>  让我们来看一个例子：一个 Web2.0的 Email客户端会使用 Ajax来自动完成对用户地址薄的下载。如果用户在上次使用过 <code>Email web</code>应用程序后没有对地址薄作任何的修改，而且 Ajax响应通过 <code>Expire</code>或者<code>Cacke-Control</code>头来实现缓存，那么就可以直接从上一次的缓存中读取地址薄 了。必须告知浏览器是使用缓存中的地址薄还是发送一个新的请求。这可以通过为读取地址薄的 Ajax URL增加一个含有上次编辑时间的时间戳来实现，例如， <code>&amp;t=11900241612</code>等。如果地址薄在上次下载后没有被编辑过，时间 戳就不变，则从浏览器的缓存中加载从而减少了一次 HTTP请求过程。如果用户修改过地址薄，时间戳就会用来确定新的 URL和缓存响应并不匹配，浏览器就会重要请求更新地址薄。</p>
<p>  即使你的 Ajxa响应是动态生成的，哪怕它只适用于一个用户，那么它也应该被缓存起来。这样做 可以使你的 Web2.0应用程序更加快捷。</p>
<h2 id="5、推迟加载内容"><a href="#5、推迟加载内容" class="headerlink" title="5、推迟加载内容"></a>5、推迟加载内容</h2><p>  你可以仔细看一下你的网页，问问自己“哪些内容是页面呈现时 所必需首先加载的？哪些内容和结构可以稍后再加载？</p>
<p>  把整个过程按照 onload事件分隔成两部分， JavaScript是一个理想的选择。例如，如果你有用于实现拖放和动画的 JavaScript，那么它就以等待稍后加载，因为页面上的拖放元素是在初始化呈现 之后才发生的。其它的例如隐藏部分的内容（用户操作之后才显现的内容）和处于折叠部分的图像也可以推迟加载</p>
<p>  工具可以节省你的工作量：<code>YUI Image Loader</code>可以帮你推迟加载折叠部分的图片，<code>YUI Get utility</code>是包含 JS和 <code>CSS</code>的便捷方法。比如你可以打开 <code>Firebug</code>的 <code>Net</code>选项卡看一下 <code>Yahoo</code>的首页。</p>
<p>  当性能目标和其它网站开发实践一致时就会相得益彰。这种情况 下，通过程序提高网站性能的方法告诉我们，在支持 <code>JavaScript</code>的情况下，可以先去除用户体验，不过这要保证你的网站在没有 <code>JavaScript</code>也可以正常运行。在确定页面运行正常后，再加载脚本来实现如拖放和动画等更加花哨的效果。</p>
<h2 id="6、预加载"><a href="#6、预加载" class="headerlink" title="6、预加载"></a>6、预加载</h2><p>  预加载和后加载看起来似乎恰恰相反，但实际上预加载是为了实 现另外一种目标。预加载是在浏览器空闲时请求将来可能会用到的页面内容（如图像、样式表和脚本）。使用这种方法，当用户要访问下一个页面时，页面中的内容 大部分已经加载到缓存中了，因此可以大大改善访问速度。</p>
<p>下面提供了几种预加载方法：</p>
<p>  无条件加载：触发 onload事件时，直接加载额外的页面内容。以 Google.com为例，你可以看一下它的 spirit image图像是怎样在 onload中加载的。这个 spirit image图像在 google.com主页中是不需要的，但是却可以在搜索结果页面中用到它。</p>
<p>有条件加载：根据用户的操作来有根据地判断用户下面可能去往的页面并相应的预 加载页面内容。在 search.yahoo.com中你可以看到如何在你输入内容时加载额外的页面内容。</p>
<p>  有预期的加载：载入重新设计过的页面时使用预加载。这种情况经常出现在页面经过重新设计后用户抱怨“新的页面看起来很酷，但是却比以前慢”。问题可能出在 用户对于你的旧站点建立了完整的缓存，而对于新站点却没有任何缓存内容。因此你可以在访问新站之前就加载一部内容来避免这种结果的出现。在你的旧站中利用 浏览器的空余时间加载新站中用到的图像的和脚本来提高访问速度。</p>
<h2 id="7、减少-DOM元素数量"><a href="#7、减少-DOM元素数量" class="headerlink" title="7、减少 DOM元素数量"></a>7、减少 DOM元素数量</h2><p>  一个复杂的页面意味着需要下载更多数据，同时也意味着 JavaScript遍历 DOM的效率越慢。比如当你增加一个事件句柄时在 500和 5000个 DOM元素中循环效果肯定是不一样的。</p>
<p>  大量的 DOM元素的存在意味着页面中有可以不用移除内容只需要替换元素标签就可以精简的部分。你在页面布局中使用表格了吗？你有没有仅仅为了布局而引入更多的 <div>元素呢？也许会存在一个适合或者在语意是更贴切的标签可以供你使用。</div></p>
<p>  YUI CSS utilities 可以给你的布局带来巨大帮助： <code>grids.css</code>可以帮你实现整体布局，<code>font.css</code>和 <code>reset.css</code>可以帮助你移除浏览器默认格式。它提供了一个重新审视你页面中标签 的机会，比如只有在语意上有意义时才使用 <code>&lt;div&gt;</code>，而不是因为它具有换行效果才使用它。</p>
<p>  DOM 元素数量很容易计算出来，只需要在 Firebug的控制台内输入：</p>
<p><code>document.getElementsByTagName(&#39;*&#39;).length</code></p>
<p>  那么多少个 DOM元素算是多呢？这可以对照有很好标记使用的类似页面。比如 Yahoo!主页是一个内容非常多的页面，但是它只使用了 700个元素（ HTML标签）。</p>
<h2 id="8、根据域名划分页面内容"><a href="#8、根据域名划分页面内容" class="headerlink" title="8、根据域名划分页面内容"></a>8、根据域名划分页面内容</h2><p>把页面内容划分成若干部分可以使你最大限度地实现平行下载。由于 DNS查找带来的影响你首先要确保你使用的域名数量在 2个到 4个之间。例如，你可以把用到的 HTML内容和动态内容放在 <code>http://www.example.org/</code>上，而把页面各种组件（图片、脚本、 CSS)分别存放在 <code>statics1.example.org</code>和 <code>statics.example.org</code>上。</p>
<p>你可在<code>Tenni Theurer</code>和 <code>Patty Chi</code>合写的文章 <code>Maximizing Parallel Downloads in the Carpool Lane</code>找到更多相关信息。</p>
<h2 id="9、使-iframe的数量最小"><a href="#9、使-iframe的数量最小" class="headerlink" title="9、使 iframe的数量最小"></a>9、使 iframe的数量最小</h2><p>  ifrmae 元素可以在父文档中插入一个新的 HTML文档。了解 iframe的工作理然后才能更加有效地使用它，这一点很重要。</p>
<p><code>&lt;iframe&gt;</code>优点：</p>
<p>解决加载缓慢的第三方内容如图标和广告等的加载问题</p>
<p><code>Security sandbox</code></p>
<p>并行加载脚本</p>
<p><code>&lt;iframe&gt;</code>的缺点：</p>
<p>即时内容为空，加载也需要时间</p>
<p>会阻止页面加载</p>
<p>没有语意</p>
<h2 id="10、不要出现-404错误"><a href="#10、不要出现-404错误" class="headerlink" title="10、不要出现 404错误"></a>10、不要出现 404错误</h2><p>   HTTP 请求时间消耗是很大的，因此使用 HTTP请求来获得一个没有用处的响应（例如 404没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。</p>
<p>  有些站点把 404错误响应页面改为“你是不是要找 ***”，这虽然改进了用户体验但是同样也会浪费服务器资源（如数据库等）。最糟糕的 情况是指向外部 JavaScript的链接出现问题并返回 404代码。首先，这种加载会破坏并行加载；其次浏览器会把试图在返回的404响应内容中找到可能有用的部分当作 JavaScript代码来执行。</p>
<h1 id="二、服务器部分"><a href="#二、服务器部分" class="headerlink" title="二、服务器部分"></a>二、服务器部分</h1><ul>
<li>使用内容分发网络</li>
<li>为文件头指定Expires或Cache-Control</li>
<li>Gzip压缩文件内容</li>
<li>配置ETag</li>
<li>尽早刷新输出缓冲</li>
<li>使用GET来完成AJAX请求</li>
<li>避免空的图像来源</li>
</ul>
<h2 id="11、使用内容分发网络"><a href="#11、使用内容分发网络" class="headerlink" title="11、使用内容分发网络"></a>11、使用内容分发网络</h2><p>  用户与你网站服务器的接近程度会影响响应时间的长短。把你的网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。但是首先我们应该做些什么呢？<br>  按地域布置网站内容的第一步并不是要尝试重新架构你的网站让他们在分发服务器上正常运行。根据应用的需求来改变网站结构，这可能会包括一些比较复杂的任 务，如在服务器间同步Session状态和合并数据库更新等。要想缩短用户和内容服务器的距离，这些架构步骤可能是不可避免的。<br>  要记住，在终端用户的响应时间中有80%到90%的响应时间用于下载图像、样式表、脚本、Flash等页面内容。这就是网站性能黄金守则。和重新设计你的 应用程序架构这样比较困难的任务相比，首先来分布静态内容会更好一点。这不仅会缩短响应时间，而且对于内容分发网络来说它更容易实现。<br>  内容分发网络（<code>Content Delivery Network，CDN</code>）是由一系列分散到各个不同地理位置上的Web服务器组成的，它提高了网站内容的传输速度。用于向用户传输内容的服务器主要是根据 和用户在网络上的靠近程度来指定的。例如，拥有最少网络跳数（<code>network hops</code>）和响应速度最快的服务器会被选定。<br>  一些大型的网络公司拥有自己的CDN，但是使用像<code>Akamai Technologies，Mirror Image Internet</code>，或者<code>Limelight Networks</code>这样的CDN服务成本却非常高。对于刚刚起步的企业和个人网站来说，可能没有使用CDN的成本预算，但是随着目标用户群的不断扩大和更加 全球化，CDN就是实现快速响应所必需的了。以Yahoo来说，他们转移到CDN上的网站程序静态内容节省了终端用户20%以上的响应时间。使用CDN是一个只需要相对简单地修改代码实现显著改善网站访问速度的方法。</p>
<h2 id="12、为文件头指定Expires或Cache-Control"><a href="#12、为文件头指定Expires或Cache-Control" class="headerlink" title="12、为文件头指定Expires或Cache-Control"></a>12、为文件头指定<code>Expires</code>或<code>Cache-Control</code></h2><p>  这条守则包括两方面的内容：<br>对于静态内容：设置文件头过期时间<code>Expires</code>的值为<code>“Never expire”</code>（永不过期）<br>对于动态内容：使用恰当的<code>Cache-Control</code>文件头来帮助浏览器进行有条件的请求<br>  网页内容设计现在越来越丰富，这就意味着页面中要包含更多的脚本、样式表、图片和Flash。第一次访问你页面的用户就意味着进行多次的<code>HTTP</code>请求，但 是通过使用<code>Expires</code>文件头就可以使这样内容具有缓存性。它避免了接下来的页面访问中不必要的HTTP请求。<code>Expires</code>文件头经常用于图像文件， 但是应该在所有的内容都使用他，包括脚本、样式表和Flash等。<br>  浏览器（和代理）使用缓存来减少HTTP请求的大小和次数以加快页面访问速度。Web服务器在HTTP响应中使用Expires文件头来告诉客户端内容需 要缓存多长时间。下面这个例子是一个较长时间的Expires文件头，它告诉浏览器这个响应直到2010年4月15日才过期。<br>     <code>Expires: Thu, 15 Apr 2010 20:00:00 GMT</code><br>  如果你使用的是Apache服务器，可以使用ExpiresDefault来设定相对当前日期的过期时间。下面这个例子是使用 ExpiresDefault来设定请求时间后10年过期的文件头：<br>      <code>ExpiresDefault &quot;access plus 10 years&quot;</code><br>  要切记，如果使用了Expires文件头，当页面内容改变时就必须改变内容的文件名。依Yahoo!来说我们经常使用这样的步骤：在内容的文件名中加上版 本号，如<code>yahoo_2.0.6.js</code>。<br>  使用Expires文件头只有会在用户已经访问过你的网站后才会起作用。当用户首次访问你的网站时这对减少HTTP请求次数来说是无效的，因为浏览器的缓 存是空的。因此这种方法对于你网站性能的改进情况要依据他们“预缓存”存在时对你页面的点击频率（“预缓存”中已经包含了页面中的所有内容）。 Yahoo!建立了一套测量方法，我们发现所有的页面浏览量中有75~85%都有“预缓存”。通过使用Expires文件头，增加了缓存在浏览器中内容的 数量，并且可以在用户接下来的请求中再次使用这些内容，这甚至都不需要通过用户发送一个字节的请求。</p>
<h2 id="13、Gzip压缩文件内容"><a href="#13、Gzip压缩文件内容" class="headerlink" title="13、Gzip压缩文件内容"></a>13、Gzip压缩文件内容</h2><p>  网络传输中的HTTP请求和应答时间可以通过前端机制得到显著改善。的确，终端用户的带宽、互联网提供者、与对等交换点的靠近程度等都不是网站开发者所能 决定的。但是还有其他因素影响着响应时间。通过减小HTTP响应的大小可以节省HTTP响应时间。<br>  从<code>HTTP/1.1</code>开始，web客户端都默认支持HTTP请求中有<code>Accept-Encoding</code>文件头的压缩格式：<br>      <code>Accept-Encoding: gzip, deflate</code><br>  如果web服务器在请求的文件头中检测到上面的代码，就会以客户端列出的方式压缩响应内容。Web服务器把压缩方式通过响应文件头中的<code>Content- Encoding</code>来返回给浏览器。<br>      <code>Content-Encoding: gzip</code><br>  <code>Gzip</code>是目前最流行也是最有效的压缩方式。这是由GNU项目开发并通过RFC 1952来标准化的。另外仅有的一个压缩格式是deflate，但是它的使用范围有限效果也稍稍逊色。<br>  <code>Gzip</code>大概可以减少70%的响应规模。目前大约有90%通过浏览器传输的互联网交换支持<code>gzip</code>格式。如果你使用的是<code>Apache</code>，<code>gzip</code>模块配置和 你的版本有关：<code>Apache 1.3</code>使用<code>mod_zip</code>，而<code>Apache 2.x</code>使用<code>moflate</code>。<br>  浏览器和代理都会存在这样的问题：浏览器期望收到的和实际接收到的内容会存在不匹配的现象。幸好，这种特殊情况随着旧式浏览器使用量的减少在减少。 <code>Apache</code>模块会通过自动添加适当的<code>Vary</code>响应文件头来避免这种状况的出现。<br>  服务器根据文件类型来选择需要进行gzip压缩的文件，但是这过于限制了可压缩的文件。大多数web服务器会压缩HTML文档。对脚本和样式表进行压缩同 样也是值得做的事情，但是很多web服务器都没有这个功能。实际上，压缩任何一个文本类型的响应，包括XML和JSON，都值得的。图像和PDF文件由于 已经压缩过了所以不能再进行gzip压缩。如果试图gizp压缩这些文件的话不但会浪费CPU资源还会增加文件的大小。<br>   Gzip压缩所有可能的文件类型是减少文件体积增加用户体验的简单方法。</p>
<h2 id="14、配置ETag"><a href="#14、配置ETag" class="headerlink" title="14、配置ETag"></a>14、配置ETag</h2><p>  <code>Entity tags（ETags）</code>（实体标签）是web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制（“实体”就是所说的“内 容”，包括图片、脚本、样式表等）。增加ETag为实体的验证提供了一个比使用“last-modified date（上次编辑时间）”更加灵活的机制。Etag是一个识别内容版本号的唯一字符串。唯一的格式限制就是它必须包含在双引号内。原始服务器通过含有 ETag文件头的响应指定页面内容的ETag。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">Content-Length: 12195</span><br></pre></td></tr></table></figure>

<p>  稍后，如果浏览器要验证一个文件，它会使用<code>If-None-Match</code>文件头来把ETag传回给原始服务器。在这个例子中，如果ETag匹配，就会返回一 个304状态码，这就节省了12195字节的响应。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /i/yahoo.gif HTTP/1.1</span><br><span class="line">Host: us.yimg.com</span><br><span class="line">If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">HTTP/1.1 304 Not Modified</span><br></pre></td></tr></table></figure>

<p>  ETag的问题在于，它是根据可以辨别网站所在的服务器的具有唯一性的属性来生成的。当浏览器从一台服务器上获得页面内容后到另外一台服务器上进行验证时 ETag就会不匹配，这种情况对于使用服务器组和处理请求的网站来说是非常常见的。默认情况下，Apache和IIS都会把数据嵌入ETag中，这会显著 减少多服务器间的文件验证冲突。<br>   Apache 1.3和2.x中的ETag格式为<code>inode-size-timestamp</code>。即使某个文件在不同的服务器上会处于相同的目录下，文件大小、权限、时间戳 等都完全相同，但是在不同服务器上他们的内码也是不同的。<br>  IIS 5.0和IIS 6.0处理ETag的机制相似。IIS中的ETag格式为<code>Filetimestamp:ChangeNumber</code>。用<code>ChangeNumber</code>来跟踪 IIS配置的改变。网站所用的不同IIS服务器间ChangeNumber也不相同。不同的服务器上的Apache和IIS即使对于完全相同的内容产生的 ETag在也不相同，用户并不会接收到一个小而快的304响应；相反他们会接收一个正常的200响应并下载全部内容。如果你的网站只放在一台服务器上，就 不会存在这个问题。但是如果你的网站是架设在多个服务器上，并且使用Apache和 IIS产生默认的ETag配置，你的用户获得页面就会相对慢一点，服务器会传输更多的内容，占用更多的带宽，代理也不会有效地缓存你的网站内容。即使你的 内容拥有Expires文件头，无论用户什么时候点击“刷新”或者“重载”按钮都会发送相应的GET请求。<br>   如果你没有使用ETag提供的灵活的验证模式，那么干脆把所有的ETag都去掉会更好。Last-Modified文件头验证是基于内容的时间戳的。去掉 ETag文件头会减少响应和下次请求中文件的大小。微软的这篇支持文稿讲述了如何去掉ETag。在Apache中，只需要在配置文件中简单添加下面一行代 码就可以了：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FileETag none</span><br></pre></td></tr></table></figure>

<h2 id="15、尽早刷新输出缓冲"><a href="#15、尽早刷新输出缓冲" class="headerlink" title="15、尽早刷新输出缓冲"></a>15、尽早刷新输出缓冲</h2><p>  当用户请求一个页面时，无论如何都会花费200到500毫秒用于后台组织HTML文件。在这期间，浏览器会一直空闲等待数据返回。在PHP中，你可以使用 flush()方法，它允许你把已经编译的好的部分HTML响应文件先发送给浏览器，这时浏览器就会可以下载文件中的内容（脚本等）而后台同时处理剩余的 HTML页面。这样做的效果会在后台烦恼或者前台较空闲时更加明显。<br>  输出缓冲应用最好的一个地方就是紧跟在<head><meta name="generator" content="Hexo 3.9.0">之后，因为HTML的头部分容易生成而且头部往往包含CSS和JavaScript文件，这样浏览器就可以在后台编译剩余HTML的同时并行下 载它们。 例子：</head></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!-- css, js --&gt;</span><br><span class="line">     `&lt;/head&gt;`</span><br><span class="line">     &lt;?php flush(); ?&gt;</span><br><span class="line">     `&lt;body&gt;`</span><br><span class="line">&lt;!-- content --&gt;</span><br></pre></td></tr></table></figure>

<p>为了证明使用这项技术的好处，Yahoo!搜索率先研究并完成了用户测试。</p>
<h2 id="16、使用GET来完成AJAX请求"><a href="#16、使用GET来完成AJAX请求" class="headerlink" title="16、使用GET来完成AJAX请求"></a>16、使用GET来完成AJAX请求</h2><p>  Yahoo!Mail团队发现，当使用<code>XMLHttpRequest</code>时，浏览器中的POST方法是一个“两步走”的过程：首先发送文件头，然后才发送数 据。因此使用GET最为恰当，因为它只需发送一个TCP包（除非你有很多cookie）。IE中URL的最大长度为2K，因此如果你要发送一个超过2K的 数据时就不能使用GET了。<br>  一个有趣的不同就是POST并不像GET那样实际发送数据。根据HTTP规范，GET意味着“获取”数据，因此当你仅仅获取数据时使用GET更加有意义 （从语意上讲也是如此），相反，发送并在服务端保存数据时使用POST。</p>
<p>除此之外，JavaScript和CSS也是我们页面中经常用到的内容，对它们的优化也提高网站性能的重要方面：</p>
<h1 id="三、CSS部分"><a href="#三、CSS部分" class="headerlink" title="三、CSS部分"></a>三、CSS部分</h1><ul>
<li>把样式表置于顶部</li>
<li>避免使用CSS表达式（）</li>
<li>用<link>代替@import</li>
<li>避免使用滤镜</li>
</ul>
<h2 id="17、把样式表置于顶部"><a href="#17、把样式表置于顶部" class="headerlink" title="17、把样式表置于顶部"></a>17、把样式表置于顶部</h2><p>  在研究Yahoo!的性能表现时，我们发现把样式表放到文档的<head><meta name="generator" content="Hexo 3.9.0">内部似乎会加快页面的下载速度。这是因为把样式表放到<head><meta name="generator" content="Hexo 3.9.0">内会使页面有步骤的加载显示。<br>  注重性能的前端服务器往往希望页面有秩序地加载。同时，我们也希望浏览器把已经接收到内容尽可能显示出来。这对于拥有较多内容的页面和网速较慢的用户来说 特别重要。向用户返回可视化的反馈，比如进程指针，已经有了较好的研究并形成了正式文档。在我们的研究中HTML页面就是进程指针。当浏览器有序地加载文 件头、导航栏、顶部的logo等对于等待页面加载的用户来说都可以作为可视化的反馈。这从整体上改善了用户体验。<br>  把样式表放在文档底部的问题是在包括<code>Internet Explorer</code>在内的很多浏览器中这会中止内容的有序呈现。浏览器中止呈现是为了避免样式改变引起的页面元素重绘。用户不得不面对一个空白页面。<br>   HTML规范清楚指出样式表要放包含在页面的<code>&lt;head /&gt;</code>区域内,和<code>&lt;a /&gt;</code>不同，<code>&lt;link /&gt;</code>只能出现在文档的<code>&lt;head /&gt;</code>区域内，尽管它可以多次使用它”。无论是引起白屏还是出现没有样式化的内容都不值得去尝试。最好的方案就是按照HTML规范在文档<code>&lt;head /&gt;</code>内加载你的样式表。</head></head></p>
<h2 id="18、避免使用CSS表达式（）"><a href="#18、避免使用CSS表达式（）" class="headerlink" title="18、避免使用CSS表达式（）"></a>18、避免使用CSS表达式（）</h2><p>  CSS表达式是动态设置CSS属性的强大（但危险）方法。<code>Internet Explorer</code>从第5个版本开始支持CSS表达式。下面的例子中，使用CSS表达式可以实现隔一个小时切换一次背景颜色：<br>      <code>background-color: ( (new Date()).getHours()%2 ? &quot;#B8D4FF&quot; : &quot;#F08A00&quot; )</code>;<br>如上所示，中使用了JavaScript表达式。CSS属性根据JavaScript表达式的计算结果来设置。 方法在其它浏览器中不起作用，因此在跨浏览器的设计中单独针对Internet Explorer设置时会比较有用。<br>  表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给CSS表达式增加 一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到10000次以上的计算量。<br>  一个减少CSS表达式计算次数的方法就是使用一次性的表达式，它在第一次运行时将结果赋给指定的样式属性，并用这个属性来代替CSS表达式。如果样式属性 必须在页面周期内动态地改变，使用事件句柄来代替CSS表达式是一个可行办法。如果必须使用CSS表达式，一定要记住它们要计算成千上万次并且可能会对你 页面的性能产生影响。</p>
<h2 id="19、用代替-import"><a href="#19、用代替-import" class="headerlink" title="19、用代替@import"></a>19、用<link>代替@import</h2><p>  前面的最佳实现中提到CSS应该放置在顶端以利于有序加载呈现。<br>  在IE中，页面底部@import和使用<link>作用是一样的，因此最好不要使用它。</p>
<h2 id="20、避免使用滤镜"><a href="#20、避免使用滤镜" class="headerlink" title="20、避免使用滤镜"></a>20、避免使用滤镜</h2><p>  IE独有属性AlphaImageLoader用于修正7.0以下版本中显示PNG图片的半透明效果。这个滤镜的问题在于浏览器加载图片时它会终止内容的 呈现并且冻结浏览器。在每一个元素（不仅仅是图片）它都会运算一次，增加了内存开支，因此它的问题是多方面的。<br>  完全避免使用AlphaImageLoader的最好方法就是使用PNG8格式来代替，这种格式能在IE中很好地工作。如果你确实需要使用 AlphaImageLoader，请使用下划线_filter又使之对IE7以上版本的用户无效。</p>
<h1 id="四、-JavaScript部分"><a href="#四、-JavaScript部分" class="headerlink" title="四、 JavaScript部分"></a>四、 JavaScript部分</h1><ul>
<li>把脚本置于页面底部</li>
<li>使用外部JavaScript和CSS</li>
<li>削减JavaScript和CSS</li>
<li>剔除重复脚本</li>
<li>减少DOM访问</li>
<li>开发智能事件处理程序</li>
</ul>
<h2 id="21、把脚本置于页面底部"><a href="#21、把脚本置于页面底部" class="headerlink" title="21、把脚本置于页面底部"></a>21、把脚本置于页面底部</h2><p>脚本带来的问题就是它阻止了页面的平行下载。HTTP/1.1 规范建议，浏览器每个主机名的并行下载内容不超过两个。如果你的图片放在多个主机名上，你可以在每个并行下载中同时下载2个以上的文件。但是当下载脚本 时，浏览器就不会同时下载其它文件了，即便是主机名不相同。<br>在某些情况下把脚本移到页面底部可能不太容易。比如说，如果脚本中使用了document.write来插入页面内容，它就不能被往下移动了。这里可能还 会有作用域的问题。很多情况下，都会遇到这方面的问题。<br>一个经常用到的替代方法就是使用延迟脚本。DEFER属性表明脚本中没有包含document.write，它告诉浏览器继续显示。不幸的 是，Firefox并不支持DEFER属性。在Internet Explorer中，脚本可能会被延迟但效果也不会像我们所期望的那样。如果脚本可以被延迟，那么它就可以移到页面的底部。这会让你的页面加载的快一点。</p>
<h2 id="22、使用外部JavaScript和CSS"><a href="#22、使用外部JavaScript和CSS" class="headerlink" title="22、使用外部JavaScript和CSS"></a>22、使用外部JavaScript和CSS</h2><p>很多性能规则都是关于如何处理外部文件的。但是，在你采取这些措施前你可能会问到一个更基本的问题：JavaScript和CSS是应该放在外部文件中呢 还是把它们放在页面本身之内呢？<br>在实际应用中使用外部文件可以提高页面速度，因为JavaScript和CSS文件都能在浏览器中产生缓存。内置在HTML文档中的JavaScript 和CSS则会在每次请求中随HTML文档重新下载。这虽然减少了HTTP请求的次数，却增加了HTML文档的大小。从另一方面来说，如果外部文件中的 JavaScript和CSS被浏览器缓存，在没有增加HTTP请求次数的同时可以减少HTML文档的大小。<br>关键问题是，外部JavaScript和CSS文件缓存的频率和请求HTML文档的次数有关。虽然有一定的难度，但是仍然有一些指标可以一测量它。如果一 个会话中用户会浏览你网站中的多个页面，并且这些页面中会重复使用相同的脚本和样式表，缓存外部文件就会带来更大的益处。<br>许多网站没有功能建立这些指标。对于这些网站来说，最好的坚决方法就是把JavaScript和CSS作为外部文件引用。比较适合使用内置代码的例外就是 网站的主页，如Yahoo!主页和My Yahoo!。主页在一次会话中拥有较少（可能只有一次）的浏览量，你可以发现内置JavaScript和CSS对于终端用户来说会加快响应时 间。<br>对于拥有较大浏览量的首页来说，有一种技术可以平衡内置代码带来的HTTP请求减少与通过使用外部文件进行缓存带来的好处。其中一个就是在首页中内置 JavaScript和CSS，但是在页面下载完成后动态下载外部文件，在子页面中使用到这些文件时，它们已经缓存到浏览器了。</p>
<h2 id="23、削减JavaScript和CSS"><a href="#23、削减JavaScript和CSS" class="headerlink" title="23、削减JavaScript和CSS"></a>23、削减JavaScript和CSS</h2><p>精简是指从去除代码不必要的字符减少文件大小从而节省下载时间。消减代码时，所有的注释、不需要的空白字符（空格、换行、tab缩进）等都要去掉。在 JavaScript中，由于需要下载的文件体积变小了从而节省了响应时间。精简<code>JavaScript</code>中目前用到的最广泛的两个工具是<code>JSMin</code>和<code>YUI Compressor</code>。<code>YUI Compressor</code>还可用于精简CSS。<br>混淆是另外一种可用于源代码优化的方法。这种方法要比精简复杂一些并且在混淆的过程更易产生问题。在对美国前10大网站的调查中发现，精简也可以缩小原来 代码体积的21%，而混淆可以达到25%。尽管混淆法可以更好地缩减代码，但是对于JavaScript来说精简的风险更小。<br>除消减外部的脚本和样式表文件外，<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>代码块也可以并且应该进行消减。即使你用Gzip压缩过脚本 和样式表，精简这些文件仍然可以节省5%以上的空间。由于JavaScript和CSS的功能和体积的增加 ，消减代码将会获得益处。</p>
<h2 id="24、剔除重复脚本"><a href="#24、剔除重复脚本" class="headerlink" title="24、剔除重复脚本"></a>24、剔除重复脚本</h2><p>在同一个页面中重复引用<code>JavaScript</code>文件会影响页面的性能。你可能会认为这种情况并不多见。对于美国前10大网站的调查显示其中有两家存在重复引 用脚本的情况。有两种主要因素导致一个脚本被重复引用的奇怪现象发生：团队规模和脚本数量。如果真的存在这种情况，重复脚本会引起不必要的HTTP请求和 无用的JavaScript运算，这降低了网站性能。<br>在<code>Internet Explorer</code>中会产生不必要的HTTP请求，而在Firefox却不会。在<code>Internet Explorer</code>中，如果一个脚本被引用两次而且它又不可缓存，它就会在页面加载过程中产生两次HTTP请求。即时脚本可以缓存，当用户重载页面时也会产 生额外的HTTP请求。<br>除增加额外的HTTP请求外，多次运算脚本也会浪费时间。在Internet Explorer和Firefox中不管脚本是否可缓存，它们都存在重复运算JavaScript的问题。<br>一个避免偶尔发生的两次引用同一脚本的方法是在模板中使用脚本管理模块引用脚本。在HTML页面中使用<code>&lt;script /&gt;</code>标签引用脚本的最常见方法就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;menu_1.0.17.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在PHP中可以通过创建名为insertScript的方法来替代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php insertScript(&quot;menu.js&quot;) ?&gt;</span><br></pre></td></tr></table></figure>

<p>为了防止多次重复引用脚本，这个方法中还应该使用其它机制来处理脚本，如检查所属目录和为脚本文件名中增加版本号以用于Expire文件头等。</p>
<h2 id="25、减少DOM访问"><a href="#25、减少DOM访问" class="headerlink" title="25、减少DOM访问"></a>25、减少DOM访问</h2><p>使用JavaScript访问DOM元素比较慢，因此为了获得更多的应该页面，应该做到：<br>缓存已经访问过的有关元素<br>线下更新完节点之后再将它们添加到文档树中<br>避免使用JavaScript来修改页面布局<br>有关此方面的更多信息请查看Julien Lecomte在YUI专题中的文章“高性能Ajax应该程序”。</p>
<h2 id="26、开发智能事件处理程序"><a href="#26、开发智能事件处理程序" class="headerlink" title="26、开发智能事件处理程序"></a>26、开发智能事件处理程序</h2><p>有时候我们会感觉到页面反应迟钝，这是因为DOM树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用event delegation（事件代理）是一种好方法了。如果你在一个div中有10个按钮，你只需要在div上附加一次事件句柄就可以了，而不用去为每一个按 钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。<br>你同样也不用为了操作DOM树而等待onload事件的发生。你需要做的就是等待树结构中你要访问的元素出现。你也不用等待所有图像都加载完毕。<br>你可能会希望用DOMContentLoaded事件来代替 事件应用程序中的onAvailable方法。<br>有关此方面的更多信息请查看Julien Lecomte在YUI专题中的文章“高性能Ajax应该程序”。</p>
<p>图片和Coockie也是我们网站中几乎不可缺少组成部分，此外随着移动设备的流行，对于移动应用的优化也十分重要。这主要包括：</p>
<h1 id="五、Coockie部分"><a href="#五、Coockie部分" class="headerlink" title="五、Coockie部分"></a>五、Coockie部分</h1><ul>
<li>减小Cookie体积</li>
<li>对于页面内容使用无coockie域名</li>
</ul>
<h2 id="27、减小Cookie体积"><a href="#27、减小Cookie体积" class="headerlink" title="27、减小Cookie体积"></a>27、减小Cookie体积</h2><p>  HTTP coockie可以用于权限验证和个性化身份等多种用途。coockie内的有关信息是通过HTTP文件头来在web服务器和浏览器之间进行交流的。因此 保持coockie尽可能的小以减少用户的响应时间十分重要。<br>有关更多信息可以查看<code>Tenni Theurer</code>和<code>Patty Chi</code>的文章<code>“When the Cookie Crumbles”</code>。这们研究中主要包括：<br>去除不必要的coockie</p>
<p>使coockie体积尽量小以减少对用户响应的影响<br>注意在适应级别的域名上设置coockie以便使子域名不受影响<br>设置合理的过期时间。较早地Expire时间和不要过早去清除coockie，都会改善用户的响应时间。</p>
<h2 id="28、对于页面内容使用无coockie域名"><a href="#28、对于页面内容使用无coockie域名" class="headerlink" title="28、对于页面内容使用无coockie域名"></a>28、对于页面内容使用无coockie域名</h2><p>当浏览器在请求中同时请求一张静态的图片和发送coockie时，服务器对于这些coockie不会做任何地使用。因此他们只是因为某些负面因素而创建的 网络传输。所有你应该确定对于静态内容的请求是无coockie的请求。创建一个子域名并用他来存放所有静态内容。<br> 如果你的域名是<code>http://www.example.org/</code>，你可以在<code>static.example.org</code>上存在静态内容。但是，如果你不是在<code>http://www.example.org/</code>上而是在顶级域名<code>example.org</code>设置了coockie，那么所有对于<code>static.example.org</code>的请求都包含coockie。在这种情 况下，你可以再重新购买一个新的域名来存在静态内容，并且要保持这个域名是无coockie的。Yahoo!使用的是<code>ymig.com</code>，YouTube使 用的是<code>ytimg.com</code>，Amazon使用的是<code>images-anazon.com</code>等等。<br>使用无coockie域名存在静态内容的另外一个好处就是一些代理（服务器）可能会拒绝对coockie的内容请求进行缓存。一个相关的建议就是，如果你 想确定应该使用<code>example.org</code>还是<code>http://www.example.org/</code>作为你的一主页，你要考虑到coockie带来的影响。忽略掉www会使你除了把coockie设置到<code>*.example.org</code>（*是泛域名解析，代表 了所有子域名译者dudo注）外没有其它选择，因此出于性能方面的考虑最好是使用带有www的子域名并且在它上面设置coockie。</p>
<h1 id="六、Image-部分"><a href="#六、Image-部分" class="headerlink" title="六、Image 部分"></a>六、Image 部分</h1><ul>
<li>优化图像</li>
<li>优化CSS Spirite</li>
<li>不要在HTML中缩放图像</li>
<li>favicon.ico要小而且可缓存</li>
</ul>
<h2 id="29、优化图像"><a href="#29、优化图像" class="headerlink" title="29、优化图像"></a>29、优化图像</h2><p>  设计人员完成对页面的设计之后，不要急于将它们上传到web服务器，这里还需要做几件事：<br>你可以检查一下你的GIF图片中图像颜色的数量是否和调色板规格一致。 使用imagemagick中下面的命令行很容易检查：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">identify -verbose image.gif</span><br></pre></td></tr></table></figure>

<p>如果你发现图片中只用到了4种颜色，而在调色板的中显示的256色的颜色槽，那么这张图片就还有压缩的空间。<br>  尝试把GIF格式转换成PNG格式，看看是否节省空间。大多数情况下是可以压缩的。由于浏览器支持有限，设计者们往往不太乐意使用PNG格式的图片，不过 这都是过去的事情了。现在只有一个问题就是在真彩PNG格式中的alpha通道半透明问题，不过同样的，GIF也不是真彩格式也不支持半透明。因此GIF 能做到的，PNG（PNG8）同样也能做到（除了动画）。下面这条简单的命令可以 安全地把GIF格式转换为PNG格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert image.gif image.png</span><br></pre></td></tr></table></figure>

<p>“我们要说的是：给PNG一个施展身手的机会吧！”<br>在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pngcrush image.png -rem alla -reduce -brute result.png</span><br></pre></td></tr></table></figure>

<p>在所有的JPEG图片上运行jpegtran。这个工具可以对图片中的出现的锯齿等做无损操作，同时它还可以用于优化和清除图片中的注释以及其它无用信息 （如EXIF信息）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jpegtran -copy none -optimize -perfect src.jpg dest.jpg</span><br></pre></td></tr></table></figure>

<h2 id="30、优化CSS-Spirite"><a href="#30、优化CSS-Spirite" class="headerlink" title="30、优化CSS Spirite"></a>30、优化CSS Spirite</h2><p>在Spirite中水平排列你的图片，垂直排列会稍稍增加文件大小；<br>Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以便适用PNG8格式；<br>便于移动，不要在Spirite的图像中间留有较大空隙。这虽然不大会增加文件大小但对于用户代理来说它需要更少的内存来把图片解压为像素地图。 100x100的图片为1万像素，而1000x1000就是100万像素。</p>
<h2 id="31、不要在HTML中缩放图像"><a href="#31、不要在HTML中缩放图像" class="headerlink" title="31、不要在HTML中缩放图像"></a>31、不要在HTML中缩放图像</h2><p>不要为了在HTML中设置长宽而使用比实际需要大的图片。如果你需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>那么你的图片（mycat.jpg）就应该是100x100像素而不是把一个500x500像素的图片缩小使用。</p>
<h2 id="32、favicon-ico要小而且可缓存"><a href="#32、favicon-ico要小而且可缓存" class="headerlink" title="32、favicon.ico要小而且可缓存"></a>32、favicon.ico要小而且可缓存</h2><p>favicon.ico是位于服务器根目录下的一个图片文件。它是必定存在的，因为即使你不关心它是否有用，浏览器也会对它发出请求，因此最好不要返回一 个404 Not Found的响应。由于是在同一台服务器上，它每被请求一次coockie就会被发送一次。这个图片文件还会影响下载顺序，例如在IE中当你在 onload中请求额外的文件时，favicon会在这些额外内容被加载前下载。<br>因此，为了减少favicon.ico带来的弊端，要做到：</p>
<ul>
<li>文件尽量地小，最好小于1K</li>
<li>在适当的时候（也就是你不要打算再换favicon.ico的时候，因为更换新文件时不能对它进行重命名）为它设置Expires文件头。你可以很安全地 把Expires文件头设置为未来的几个月。你可以通过核对当前favicon.ico的上次编辑时间来作出判断。<br>Imagemagick可以帮你创建小巧的favicon。</li>
</ul>
<h2 id="33、避免空的图像来源"><a href="#33、避免空的图像来源" class="headerlink" title="33、避免空的图像来源"></a>33、避免空的图像来源</h2><p>一个src属性为空串的图像有两种情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1． 直接的HTML</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">2． JavaScript</span><br><span class="line"></span><br><span class="line">var img = new Image();</span><br><span class="line">img.src = &quot;&quot;;</span><br></pre></td></tr></table></figure>

<p>这两种情况都会引起同样的效果：浏览器会再次向你的服务器发出请求。</p>
<p><code>Internet Explorer</code> 将向这个页面所在的目录发出一个请求<br><code>Safari and Chrome</code> 将发出对这个页面的一个请求。<br><code>Firefox 3</code> 和更早的版本所采取的动作和<code>Safari and Chrome</code>一样，但是 3.5版本 <code>addressed this issue[bug 444931] and no longer sends a request</code>.<br>Opera 不进行任何操作。<br>这个行为为何是不好的？</p>
<p>1、 发送大量突然的请求将使你的服务器宕机（<code>Cripple your servers</code>），尤其是每天有数百万访问量的页面。</p>
<p>2、 产生一个从未浏览过的页面将浪费服务器的计算周期（<code>computing cycles</code>）</p>
<p>3、 损坏用户数据。如果你在请求中追踪状态（以cookie或是其他的方式），你可能会损坏数据。即使这个图像请求并没有返回一个图像，所有的头被浏览器读取并接受，包括所有<code>cookie。While the rest of the response is thrown away, the damage may already be done</code>.</p>
<p>引起这种行为的根源在于浏览器中URI的解析方式。这种行为定义在<code>RFC 3986 - Uniform Resource Identifiers</code>.当一个空串作为一个URI时，它被认为一个相对URI（relative URI）并通过定义在section 5.2中的算法被解析。这个特例，一个空串，列在section 5.4当中。<code>Firefox, Safari, and Chrome</code>都是依据这一规格来解析空串，而<code>Internet Explorer</code>则不正确的解析这个串，符合更早的一个规范，<code>RFC 2396 - Uniform Resource Identifiers (this was obsoleted by RFC 3986)</code>.所以技术上，浏览器都在做它们被期望所做的事情来解析relative URIs，问题是在这个范围，空串不是故意造成的。</p>
<p><code>HTML5 adds to the description of the tag&#39;s src attribute to instruct browsers not to make an additional request in section 4.8.2:
    The src attribute must be present, and must contain a valid URL referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted. If the base URI of the element is the same as the document&#39;s address, then the src attribute&#39;s value must not be the empty string</code>.</p>
<p>非常希望浏览器在将来不会有这样的问题。不幸的是，没有为<code>&lt;script src=&quot;&quot;&gt;`` and</code><link href>`的条款。或许仍需要时间来做出调整以保证浏览器不会意外的实现这一行为。</p>
<p>这一规则是受雅虎JavaScript导师Nicolas C. Zakas启发。</p>
<h1 id="七、-Mobile部分"><a href="#七、-Mobile部分" class="headerlink" title="七、 Mobile部分"></a>七、 Mobile部分</h1><ul>
<li>保持单个内容小于25K</li>
<li>打包组件成复合文本</li>
</ul>
<h2 id="34、保持单个内容小于25K"><a href="#34、保持单个内容小于25K" class="headerlink" title="34、保持单个内容小于25K"></a>34、保持单个内容小于25K</h2><p>这条限制主要是因为iPhone不能缓存大于25K的文件。注意这里指的是解压缩后的大小。由于单纯gizp压缩可能达不要求，因此精简文件就显得十分重 要。<br>查看更多信息，请参阅Wayne Shea和Tenni Theurer的文件“Performance Research, Part 5: iPhone Cacheability - Making it Stick”。</p>
<h2 id="35、打包组件成复合文本"><a href="#35、打包组件成复合文本" class="headerlink" title="35、打包组件成复合文本"></a>35、打包组件成复合文本</h2><p>把页面内容打包成复合文本就如同带有多附件的Email，它能够使你在一个HTTP请求中取得多个组件（切记：HTTP请求是很奢侈的）。当你使用这条规 则时，首先要确定用户代理是否支持（iPhone就不支持）。</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular规范</title>
    <url>/2016/09/15/160915Angular%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>这个规范的目的是为构建Angular应用提供指导，当然更加重要的是让大家知道选择它的理由,当然, 也是为了督促自己能够好好用规范去编写可维护的代码，跟大家一起共勉！</p>
<blockquote>
<p>如果你喜欢这个规范，请在Pluralsight看看<a href="http://jpapa.me/ngclean" target="_blank" rel="noopener">Angular Patterns: Clean Code</a>。</p>
</blockquote>
<p>  <img src="https://oi2h9y4dd.qnssl.com/ng-clean-code-banner.png" alt="Angular Patterns: Clean Code"><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#单一职责">单一职责</a></li>
<li><a href="#iife">IIFE</a></li>
<li><a href="#modules">Modules</a></li>
<li><a href="#controllers">Controllers</a></li>
<li><a href="#services">Services</a></li>
<li><a href="#factories">Factories</a></li>
<li><a href="#data-services">Data Services</a></li>
<li><a href="#directives">Directives</a></li>
<li><a href="#解决controller的promises">解决Controller的Promises</a></li>
<li><a href="#手动依赖注入">手动依赖注入</a></li>
<li><a href="#压缩和注释">压缩和注释</a></li>
<li><a href="#异常处理">异常处理</a></li>
<li><a href="#命名">命名</a></li>
<li><a href="#应用程序结构的lift准则">应用程序结构的LIFT准则</a></li>
<li><a href="#应用程序结构">应用程序结构</a></li>
<li><a href="#模块化">模块化</a></li>
<li><a href="#启动逻辑">启动逻辑</a></li>
<li><a href="#angular-包装服务">Angular $包装服务</a></li>
<li><a href="#测试">测试</a></li>
<li><a href="#动画">动画</a></li>
<li><a href="#注释">注释</a></li>
<li><a href="#js-hint">JSHint</a></li>
<li><a href="#jscs">JSCS</a></li>
<li><a href="#常量">常量</a></li>
<li><a href="#文件模板和片段">文件模板和片段</a></li>
<li><a href="#yeoman-generator">Yeoman Generator</a></li>
<li><a href="#路由">路由</a></li>
<li><a href="#任务自动化">任务自动化</a></li>
<li><a href="#filters">Filters</a></li>
<li><a href="#angularjs文档">Angular文档</a></li>
</ol>
<h2 id="1-单一职责"><a href="#1-单一职责" class="headerlink" title="1. 单一职责"></a>1. 单一职责</h2><h3 id="规则一"><a href="#规则一" class="headerlink" title="规则一"></a>规则一</h3><ul>
<li><p>一个文件只定义一个组件。</p>
<p>下面的例子在同一个文件中定义了一个<code>app</code>的module和它的一些依赖、一个controller和一个factory。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line">  .controller(<span class="string">'SomeController'</span>, SomeController)</span><br><span class="line">  .factory(<span class="string">'someFactory'</span>, someFactory);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>推荐以下面的方式来做，把上面相同的组件分割成单独的文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.module.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// someController.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'SomeController'</span>, SomeController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="comment">// someFactory.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .factory(<span class="string">'someFactory'</span>, someFactory);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="2-IIFE"><a href="#2-IIFE" class="headerlink" title="2. IIFE"></a>2. IIFE</h2><h3 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h3><ul>
<li>把Angular组件包装到一个立即调用函数表达式中（IIFE）。</li>
</ul>
<p>  <em>为什么？</em>：把变量从全局作用域中删除了，这有助于防止变量和函数声明比预期在全局作用域中有更长的生命周期，也有助于避免变量冲突。</p>
<p>  <em>为什么？</em>：当你的代码为了发布而压缩了并且被合并到同一个文件中时，可能会有很多变量发生冲突，使用了IIFE（给每个文件提供了一个独立的作用域），你就不用担心这个了。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="comment">// logger.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger function会被当作一个全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storage.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .factory(<span class="string">'storage'</span>, storage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// storage function会被当作一个全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storage</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 再也不存在全局变量了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// logger.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    angular</span><br><span class="line">        .module(<span class="string">'app'</span>)</span><br><span class="line">        .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// storage.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    angular</span><br><span class="line">        .module(<span class="string">'app'</span>)</span><br><span class="line">        .factory(<span class="string">'storage'</span>, storage);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storage</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注：为了简洁起见，本规范余下的示例中将会省略IIFE语法。</p>
</li>
<li><p>注：IIFE阻止了测试代码访问私有成员（正则表达式、helper函数等），这对于自身测试是非常友好的。然而你可以把这些私有成员暴露到可访问成员中进行测试，例如把私有成员（正则表达式、helper函数等）放到factory或是constant中。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="3-Modules"><a href="#3-Modules" class="headerlink" title="3. Modules"></a>3. Modules</h2><h3 id="避免命名冲突"><a href="#避免命名冲突" class="headerlink" title="避免命名冲突"></a>避免命名冲突</h3><ul>
<li>每一个独立子模块使用唯一的命名约定。</li>
</ul>
<p>  <em>为什么</em>：避免冲突，每个模块也可以方便定义子模块。</p>
<h3 id="定义-aka-Setters"><a href="#定义-aka-Setters" class="headerlink" title="定义(aka Setters)"></a>定义(aka Setters)</h3><ul>
<li>不使用任何一个使用了setter语法的变量来定义modules。</li>
</ul>
<p>  <em>为什么?</em>：在一个文件只有一个组件的条件下，完全不需要为一个模块引入一个变量。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [</span><br><span class="line">    <span class="string">'ngAnimate'</span>,</span><br><span class="line">    <span class="string">'ngRoute'</span>,</span><br><span class="line">    <span class="string">'app.shared'</span>,</span><br><span class="line">    <span class="string">'app.dashboard'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>  你只需要用简单的setter语法来代替。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>, [</span><br><span class="line">      <span class="string">'ngAnimate'</span>,</span><br><span class="line">      <span class="string">'ngRoute'</span>,</span><br><span class="line">      <span class="string">'app.shared'</span>,</span><br><span class="line">      <span class="string">'app.dashboard'</span></span><br><span class="line">  ]);</span><br></pre></td></tr></table></figure>

<h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><ul>
<li>使用module的时候，避免直接用一个变量，而是使用getter的链式语法。</li>
</ul>
<p>  <em>为什么？</em>：这将产生更加易读的代码，并且可以避免变量冲突和泄漏。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>);</span><br><span class="line">app.controller(<span class="string">'SomeController'</span>, SomeController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'SomeController'</span>, SomeController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Setting-vs-Getting"><a href="#Setting-vs-Getting" class="headerlink" title="Setting vs Getting"></a>Setting vs Getting</h3><ul>
<li>只能设置一次。</li>
</ul>
<p>  <em>为什么？</em>：一个module只能被创建一次，创建之后才能被检索到。</p>
<pre><code>- 设置module，`angular.module(&apos;app&apos;, []);`。
- 获取module，`angular.module(&apos;app&apos;);`。</code></pre><h3 id="命名函数-vs-匿名函数"><a href="#命名函数-vs-匿名函数" class="headerlink" title="命名函数 vs 匿名函数"></a>命名函数 vs 匿名函数</h3><ul>
<li>回调函数使用命名函数，不要用匿名函数。</li>
</ul>
<p>  <em>为什么？</em>：易读，方便调试，减少嵌套回调函数的数量。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;)</span><br><span class="line">    .factory(<span class="string">'logger'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dashboard.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span> (<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p><strong><a href="#目录">回到顶部</a></strong></p>
<h2 id="4-Controllers"><a href="#4-Controllers" class="headerlink" title="4. Controllers"></a>4. Controllers</h2><h3 id="controllerAs在View中的语法"><a href="#controllerAs在View中的语法" class="headerlink" title="controllerAs在View中的语法"></a>controllerAs在View中的语法</h3><ul>
<li>使用<a href="http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/" target="_blank" rel="noopener"><code>controllerAs</code></a> 语法代替直接用经典的$scope定义的controller的方式。</li>
</ul>
<p>  <em>为什么？</em>：controller被构建的时候，就会有一个新的实例，<code>controllerAs</code> 的语法比<code>经典的$scope语法</code>更接近JavaScript构造函数。</p>
<p>  <em>为什么？</em>：这促进在View中对绑定到“有修饰”的对象的使用（例如用<code>customer.name</code> 代替<code>name</code>），这将更有语境、更容易阅读，也避免了任何没有“修饰”而产生的引用问题。</p>
<p>  <em>为什么？</em>：有助于避免在有嵌套的controllers的Views中调用 <code>$parent</code>。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- avoid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- recommended --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Customer as customer"</span>&gt;</span></span><br><span class="line">  &#123;&#123; customer.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="controllerAs在controller中的语法"><a href="#controllerAs在controller中的语法" class="headerlink" title="controllerAs在controller中的语法"></a>controllerAs在controller中的语法</h3><ul>
<li><p>使用 <code>controllerAs</code> 语法代替 <code>经典的$scope语法</code> 语法。</p>
</li>
<li><p>使用<code>controllerAs</code> 时，controller中的<code>$scope</code>被绑定到了<code>this</code>上。</p>
</li>
</ul>
<p>  <em>为什么？</em>：<code>controllerAs</code> 是<code>$scope</code>的语法修饰，你仍然可以绑定到View上并且访问 <code>$scope</code>的方法。</p>
<p>  <em>为什么？</em>：避免在controller中使用 <code>$scope</code>，最好不用它们或是把它们移到一个factory中。factory中可以考虑使用<code>$scope</code>，controller中只在需要时候才使用<code>$scope</code>，例如当使用<a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit" target="_blank" rel="noopener"><code>$emit</code></a>， <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast" target="_blank" rel="noopener"><code>$broadcast</code></a>，或者 <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on" target="_blank" rel="noopener"><code>$on</code></a>。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.name = &#123;&#125;;</span><br><span class="line">    $scope.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended - but see next section */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controllerAs-with-vm"><a href="#controllerAs-with-vm" class="headerlink" title="controllerAs with vm"></a>controllerAs with vm</h3><ul>
<li>使用<code>controllerAs</code>语法时把<code>this</code> 赋值给一个可捕获的变量，选择一个有代表性的名称，例如<code>vm</code>代表ViewModel。</li>
</ul>
<p>  <em>为什么？</em>：<code>this</code>在不同的地方有不同的语义（就是作用域不同），在controller中的一个函数内部使用<code>this</code>时可能会改变它的上下文。用一个变量来捕获<code>this</code>的上下文从而可以避免遇到这样的坑。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.name = &#123;&#125;;</span><br><span class="line">    vm.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注：你可以参照下面的做法来避免 <a href="http://www.jshint.com/" target="_blank" rel="noopener">jshint</a>的警告。但是构造函数（函数名首字母大写）是不需要这个的.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* jshint validthis: true */</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注：在controller中用<code>controller as</code>创建了一个watch时，可以用下面的语法监测<code>vm.*</code>的成员。（创建watch时要谨慎，因为它会增加更多的负载）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.title"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params">$scope, $log</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.title = <span class="string">'Some Title'</span>;</span><br><span class="line"></span><br><span class="line">    $scope.$watch(<span class="string">'vm.title'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">current, original</span>) </span>&#123;</span><br><span class="line">        $log.info(<span class="string">'vm.title was %s'</span>, original);</span><br><span class="line">        $log.info(<span class="string">'vm.title is now %s'</span>, current);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="置顶绑定成员"><a href="#置顶绑定成员" class="headerlink" title="置顶绑定成员"></a>置顶绑定成员</h3><ul>
<li>把可绑定的成员放到controller的顶部，按字母排序，并且不要通过controller的代码传播。</li>
</ul>
<p>  <em>为什么？</em>：虽然设置单行匿名函数很容易，但是当这些函数的代码超过一行时，这将极大降低代码的可读性。在可绑定成员下面定义函数（这些函数被提出来），把具体的实现细节放到下面，可绑定成员置顶，这会提高代码的可读性。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    vm.gotoSession = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    vm.refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    vm.search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    vm.sessions = [];</span><br><span class="line">    vm.title = <span class="string">'Sessions'</span>;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    vm.gotoSession = gotoSession;</span><br><span class="line">    vm.refresh = refresh;</span><br><span class="line">    vm.search = search;</span><br><span class="line">    vm.sessions = [];</span><br><span class="line">    vm.title = <span class="string">'Sessions'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gotoSession</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refresh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png" alt="Controller Using &quot;Above the Fold&quot;"></p>
<p>  注：如果一个函数就是一行，那么只要不影响可读性就把它放到顶部。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    vm.gotoSession = gotoSession;</span><br><span class="line">    vm.refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lines</span></span><br><span class="line"><span class="comment">         * of</span></span><br><span class="line"><span class="comment">         * code</span></span><br><span class="line"><span class="comment">         * affects</span></span><br><span class="line"><span class="comment">         * readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    vm.search = search;</span><br><span class="line">    vm.sessions = [];</span><br><span class="line">    vm.title = <span class="string">'Sessions'</span>;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params">dataservice</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    vm.gotoSession = gotoSession;</span><br><span class="line">    vm.refresh = dataservice.refresh; <span class="comment">// 1 liner is OK</span></span><br><span class="line">    vm.search = search;</span><br><span class="line">    vm.sessions = [];</span><br><span class="line">    vm.title = <span class="string">'Sessions'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="函数声明隐藏实现细节"><a href="#函数声明隐藏实现细节" class="headerlink" title="函数声明隐藏实现细节"></a>函数声明隐藏实现细节</h3><ul>
<li>使用函数声明来隐藏实现细节，置顶绑定成员，当你需要在controller中绑定一个函数时，把它指向一个在文件的后面会出现函数声明。更多详情请看<a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code" target="_blank" rel="noopener">这里</a>。</li>
</ul>
<p>  <em>为什么？</em>：易读，易识别哪些成员可以在View中绑定和使用。</p>
<p>  <em>为什么？</em>：把函数的实现细节放到后面，你可以更清楚地看到重要的东西。</p>
<p>  <em>为什么？</em>：由于函数声明会被置顶，所以没有必要担心在声明它之前就使用函数的问题。</p>
<p>  <em>为什么？</em>：你再也不用担心当 <code>a</code>依赖于 <code>b</code>时，把<code>var a</code>放到<code>var b</code>之前会中断你的代码的函数声明问题。</p>
<p>  <em>为什么？</em>：函数表达式中顺序是至关重要的。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * avoid</span></span><br><span class="line"><span class="comment"> * Using function expressions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.avengers = [];</span><br><span class="line">    vm.title = <span class="string">'Avengers'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            vm.avengers = data;</span><br><span class="line">            <span class="keyword">return</span> vm.avengers;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vm.getAvengers = getAvengers;</span><br><span class="line"></span><br><span class="line">    activate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  注意这里重要的代码分散在前面的例子中。<br>  下面的示例中，可以看到重要的代码都放到了顶部。实现的详细细节都在下方，显然这样的代码更易读。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * recommend</span></span><br><span class="line"><span class="comment"> * Using function declarations</span></span><br><span class="line"><span class="comment"> * and bindable members up top.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.avengers = [];</span><br><span class="line">    vm.getAvengers = getAvengers;</span><br><span class="line">    vm.title = <span class="string">'Avengers'</span>;</span><br><span class="line"></span><br><span class="line">    activate();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            vm.avengers = data;</span><br><span class="line">            <span class="keyword">return</span> vm.avengers;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="把Controller中的逻辑延迟到Service中"><a href="#把Controller中的逻辑延迟到Service中" class="headerlink" title="把Controller中的逻辑延迟到Service中"></a>把Controller中的逻辑延迟到Service中</h3><ul>
<li>通过委派到service和factory中来延迟controller中的逻辑。</li>
</ul>
<p>  <em>为什么？</em>：把逻辑放到service中，并通过一个function暴露，就可以被多个controller重用。</p>
<p>  <em>为什么？</em>：把逻辑放到service中将会使单元测试的时候更加容易地把它们分离，相反，如果在controller中调用逻辑就显得很二了。</p>
<p>  <em>为什么？</em>：保持controller的简洁。</p>
<p>  <em>为什么？</em>：从controller中删除依赖关系并且隐藏实现细节。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Order</span>(<span class="params">$http, $q, config, userInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.checkCredit = checkCredit;</span><br><span class="line">    vm.isCreditOk;</span><br><span class="line">    vm.total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> settings = &#123;&#125;;</span><br><span class="line">        <span class="comment">// Get the credit service base URL from config</span></span><br><span class="line">        <span class="comment">// Set credit service required headers</span></span><br><span class="line">        <span class="comment">// Prepare URL query string or data object with request data</span></span><br><span class="line">        <span class="comment">// Add user-identifying info so service gets the right credit limit for this user.</span></span><br><span class="line">        <span class="comment">// Use JSONP for this browser if it doesn't support CORS</span></span><br><span class="line">        <span class="keyword">return</span> $http.get(settings)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">               <span class="comment">// Unpack JSON data in the response object</span></span><br><span class="line">               <span class="comment">// to find maxRemainingAmount</span></span><br><span class="line">               vm.isCreditOk = vm.total &lt;= maxRemainingAmount</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">               <span class="comment">// Interpret error</span></span><br><span class="line">               <span class="comment">// Cope w/ timeout? retry? try alternate service?</span></span><br><span class="line">               <span class="comment">// Re-reject with appropriate error for a user to see</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Order</span> (<span class="params">creditService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.checkCredit = checkCredit;</span><br><span class="line">    vm.isCreditOk;</span><br><span class="line">    vm.total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creditService.isOrderTotalOk(vm.total)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">isOk</span>) </span>&#123; vm.isCreditOk = isOk; &#125;)</span><br><span class="line">          .catch(showServiceError);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="保持Controller的专一性"><a href="#保持Controller的专一性" class="headerlink" title="保持Controller的专一性"></a>保持Controller的专一性</h3><ul>
<li><p>一个view定义一个controller，尽量不要在其它view中使用这个controller。把可重用的逻辑放到factory中，保证controller只服务于当前视图。</p>
<p><em>为什么？</em>：不同的view用同一个controller是非常不科学的，良好的端对端测试覆盖率对于保证大型应用稳定性是必需的。</p>
</li>
</ul>
<h3 id="分配Controller"><a href="#分配Controller" class="headerlink" title="分配Controller"></a>分配Controller</h3><ul>
<li><p>当一个controller必须匹配一个view时或者任何一个组件可能被其它controller或是view重用时，连同controller的route一起定义。</p>
<p>注：如果一个view是通过route外的其它形式加载的，那么就用<code>ng-controller=&quot;Avengers as vm&quot;</code>语法。</p>
<p><em>为什么？</em>：在route中匹配controller允许不同的路由调用不同的相匹配的controller和view，当在view中通过<a href="https://docs.angularjs.org/api/ng/directive/ngController" target="_blank" rel="noopener"><code>ng-controller</code></a>分配controller时，这个view总是和相同的controller相关联。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid - when using with a route and dynamic pairing is desired */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// route-config.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .config(config);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- avengers.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Avengers as vm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// route-config.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .config(config);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span>,</span><br><span class="line">            controller: <span class="string">'Avengers'</span>,</span><br><span class="line">            controllerAs: <span class="string">'vm'</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- avengers.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="5-Services"><a href="#5-Services" class="headerlink" title="5. Services"></a>5. Services</h2><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><ul>
<li><p>用<code>new</code>实例化service，用<code>this</code>实例化公共方法和变量，由于这和factory是类似的，所以为了保持统一，推荐用facotry来代替。</p>
<p>注意：<a href="https://docs.angularjs.org/guide/services" target="_blank" rel="noopener">所有的Angular services都是单例</a>，这意味着每个injector都只有一个实例化的service。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .service(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logError = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// factory</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        logError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">          <span class="comment">/* */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="6-Factories"><a href="#6-Factories" class="headerlink" title="6. Factories"></a>6. Factories</h2><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul>
<li>factory应该是<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一职责</a>，这是由其上下文进行封装的。一旦一个factory将要处理超过单一的目的时，就应该创建一个新的factory。</li>
</ul>
<h3 id="单例-1"><a href="#单例-1" class="headerlink" title="单例"></a>单例</h3><ul>
<li><p>facotry是一个单例，它返回一个包含service成员的对象。</p>
<p>注：<a href="https://docs.angularjs.org/guide/services" target="_blank" rel="noopener">所有的Angular services都是单例</a>，这意味着每个injector都只有一个实例化的service。</p>
</li>
</ul>
<h3 id="可访问的成员置顶"><a href="#可访问的成员置顶" class="headerlink" title="可访问的成员置顶"></a>可访问的成员置顶</h3><ul>
<li><p>使用从<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="noopener">显露模块模式</a>派生出来的技术把service（它的接口）中可调用的成员暴露到顶部，</p>
<p><em>为什么？</em>：易读，并且让你可以立即识别service中的哪些成员可以被调用，哪些成员必须进行单元测试（或者被别人嘲笑）。</p>
<p><em>为什么？</em>：当文件内容很长时，这可以避免需要滚动才能看到暴露了哪些东西。</p>
<p><em>为什么？</em>：虽然你可以随意写一个函数，但当函数代码超过一行时就会降低可读性并造成滚动。通过把实现细节放下面、把可调用接口置顶的形式返回service的方式来定义可调用的接口，从而使代码更加易读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataService</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someValue = <span class="string">''</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        save: save,</span><br><span class="line">        someValue: someValue,</span><br><span class="line">        validate: validate</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataService</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someValue = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> service = &#123;</span><br><span class="line">        save: save,</span><br><span class="line">        someValue: someValue,</span><br><span class="line">        validate: validate</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种绑定方式复制了宿主对象，原始值不会随着暴露模块模式的使用而更新。</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-2.png" alt="Factories Using &quot;Above the Fold&quot;"></p>
</li>
</ul>
<h3 id="函数声明隐藏实现细节-1"><a href="#函数声明隐藏实现细节-1" class="headerlink" title="函数声明隐藏实现细节"></a>函数声明隐藏实现细节</h3><ul>
<li><p>函数声明隐藏实现细节，置顶绑定成员，当你需要在controller中绑定一个函数时，把它指向一个函数声明，这个函数声明在文件的后面会出现。</p>
<p><em>为什么？</em>：易读，易识别哪些成员可以在View中绑定和使用。</p>
<p><em>为什么？</em>：把函数的实现细节放到后面，你可以更清楚地看到重要的东西。</p>
<p><em>为什么？</em>：由于函数声明会被置顶，所以没有必要担心在声明它之前就使用函数的问题。</p>
<p><em>为什么？</em>：你再也不用担心当 <code>a</code>依赖于 <code>b</code>时，把<code>var a</code>放到<code>var b</code>之前会中断你的代码的函数声明问题。</p>
<p><em>为什么？</em>：函数表达式中顺序是至关重要的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * avoid</span></span><br><span class="line"><span class="comment"> * Using function expressions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, $location, $q, exception, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> primePromise;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getAvengerCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getAvengersCast = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ready = <span class="function"><span class="keyword">function</span>(<span class="params">nextPromises</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> service = &#123;</span><br><span class="line">        getAvengersCast: getAvengersCast,</span><br><span class="line">        getAvengerCount: getAvengerCount,</span><br><span class="line">        getAvengers: getAvengers,</span><br><span class="line">        ready: ready</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> * Using function declarations</span></span><br><span class="line"><span class="comment"> * and accessible members up top.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, $location, $q, exception, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> primePromise;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> service = &#123;</span><br><span class="line">        getAvengersCast: getAvengersCast,</span><br><span class="line">        getAvengerCount: getAvengerCount,</span><br><span class="line">        getAvengers: getAvengers,</span><br><span class="line">        ready: ready</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengerCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengersCast</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">nextPromises</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// implementation details go here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="7-Data-Services"><a href="#7-Data-Services" class="headerlink" title="7. Data Services"></a>7. Data Services</h2><h3 id="独立的数据调用"><a href="#独立的数据调用" class="headerlink" title="独立的数据调用"></a>独立的数据调用</h3><ul>
<li><p>把进行数据操作和数据交互的逻辑放到factory中，数据服务负责XHR请求、本地存储、内存存储和其它任何数据操作。</p>
<p><em>为什么？</em>：controller的作用是查看视图和收集视图的信息，它不应该关心如何取得数据，只需要知道哪里需要用到数据。把取数据的逻辑放到数据服务中能够让controller更简单、更专注于对view的控制。</p>
<p><em>为什么？</em>：方便测试。</p>
<p><em>为什么？</em>：数据服务的实现可能有非常明确的代码来处理数据仓库，这可能包含headers、如何与数据交互或是其它service，例如<code>$http</code>。把逻辑封装到单独的数据服务中，这隐藏了外部调用者（例如controller）对数据的直接操作，这样更加容易执行变更。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dataservice factory</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.core'</span>)</span><br><span class="line">    .factory(<span class="string">'dataservice'</span>, dataservice);</span><br><span class="line"></span><br><span class="line">dataservice.$inject = [<span class="string">'$http'</span>, <span class="string">'logger'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getAvengers: getAvengers</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $http.get(<span class="string">'/api/maa'</span>)</span><br><span class="line">            .then(getAvengersComplete)</span><br><span class="line">            .catch(getAvengersFailed);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersComplete</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.data.results;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersFailed</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            logger.error(<span class="string">'XHR Failed for getAvengers.'</span> + error.data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：数据服务被调用时（例如controller），隐藏调用的直接行为，如下所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// controller calling the dataservice factory</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.avengers'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line">Avengers.$inject = [<span class="string">'dataservice'</span>, <span class="string">'logger'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.avengers = [];</span><br><span class="line"></span><br><span class="line">    activate();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataservice.getAvengers()</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">              vm.avengers = data;</span><br><span class="line">              <span class="keyword">return</span> vm.avengers;</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据调用返回一个Promise"><a href="#数据调用返回一个Promise" class="headerlink" title="数据调用返回一个Promise"></a>数据调用返回一个Promise</h3><ul>
<li><p>就像<code>$http</code>一样，调用数据时返回一个promise，在你的调用函数中也返回一个promise。</p>
<p><em>为什么？</em>：你可以把promise链接到一起，在数据调用完成并且resolve或是reject这个promise后采取进一步的行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"></span><br><span class="line">activate();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Step 1</span></span><br><span class="line"><span class="comment">     * Ask the getAvengers function for the</span></span><br><span class="line"><span class="comment">     * avenger data and wait for the promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Step 4</span></span><br><span class="line"><span class="comment">       * Perform an action on resolve of final promise</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      logger.info(<span class="string">'Activated Avengers View'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Step 2</span></span><br><span class="line"><span class="comment">     * Ask the data service for the data and wait</span></span><br><span class="line"><span class="comment">     * for the promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> dataservice.getAvengers()</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * Step 3</span></span><br><span class="line"><span class="comment">           * set the data and resolve the promise</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          vm.avengers = data;</span><br><span class="line">          <span class="keyword">return</span> vm.avengers;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="8-Directives"><a href="#8-Directives" class="headerlink" title="8. Directives"></a>8. Directives</h2><h3 id="一个directive一个文件"><a href="#一个directive一个文件" class="headerlink" title="一个directive一个文件"></a>一个directive一个文件</h3><ul>
<li><p>一个文件中只创建一个directive，并依照directive来命名文件。</p>
<p><em>为什么？</em>：虽然把所有directive放到一个文件中很简单，但是当一些directive是跨应用的，一些是跨模块的，一些仅仅在一个模块中使用时，想把它们独立出来就非常困难了。</p>
<p><em>为什么？</em>：一个文件一个directive也更加容易维护。</p>
<blockquote>
<p>注： “<strong>最佳实践</strong>：Angular文档中有提过，directive应该自动回收，当directive被移除后，你可以使用<code>element.on(&#39;$destroy&#39;, ...)</code>或者<code>scope.$on(&#39;$destroy&#39;, ...)</code>来执行一个clean-up函数。”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="comment">/* directives.js */</span></span><br><span class="line"></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.widgets'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* order directive仅仅会被order module用到 */</span></span><br><span class="line">    .directive(<span class="string">'orderCalendarRange'</span>, orderCalendarRange)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* sales directive可以在sales app的任意地方使用 */</span></span><br><span class="line">    .directive(<span class="string">'salesCustomerInfo'</span>, salesCustomerInfo)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* spinner directive可以在任意apps中使用 */</span></span><br><span class="line">    .directive(<span class="string">'sharedSpinner'</span>, sharedSpinner);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="comment">/* calendarRange.directive.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>order directive that is specific to the order module at a company named Acme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>&lt;div acme-order-calendar-range&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'sales.order'</span>)</span><br><span class="line">    .directive(<span class="string">'acmeOrderCalendarRange'</span>, orderCalendarRange);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="comment">/* customerInfo.directive.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>sales directive that can be used anywhere across the sales app at a company named Acme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>&lt;div acme-sales-customer-info&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'sales.widgets'</span>)</span><br><span class="line">    .directive(<span class="string">'acmeSalesCustomerInfo'</span>, salesCustomerInfo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="comment">/* spinner.directive.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>spinner directive that can be used anywhere across apps at a company named Acme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>&lt;div acme-shared-spinner&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'shared.widgets'</span>)</span><br><span class="line">    .directive(<span class="string">'acmeSharedSpinner'</span>, sharedSpinner);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* implementation details */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：由于directive使用条件比较广，所以命名就存在很多的选项。选择一个让directive和它的文件名都清楚分明的名字。下面有一些例子，不过更多的建议去看<a href="#命名">命名</a>章节。</p>
</li>
</ul>
<h3 id="在directive中操作DOM"><a href="#在directive中操作DOM" class="headerlink" title="在directive中操作DOM"></a>在directive中操作DOM</h3><ul>
<li><p>当需要直接操作DOM的时候，使用directive。如果有替代方法可以使用，例如：使用CSS来设置样式、<a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="noopener">animation services</a>、Angular模板、<a href="https://docs.angularjs.org/api/ng/directive/ngShow" target="_blank" rel="noopener"><code>ngShow</code></a>或者<a href="https://docs.angularjs.org/api/ng/directive/ngHide" target="_blank" rel="noopener"><code>ngHide</code></a>，那么就直接用这些即可。例如，如果一个directive只是想控制显示和隐藏，用ngHide/ngShow即可。</p>
<p><em>为什么？</em>：DOM操作的测试和调试是很困难的，通常会有更好的方法（CSS、animations、templates）。</p>
</li>
</ul>
<h3 id="提供一个唯一的Directive前缀"><a href="#提供一个唯一的Directive前缀" class="headerlink" title="提供一个唯一的Directive前缀"></a>提供一个唯一的Directive前缀</h3><ul>
<li><p>提供一个短小、唯一、具有描述性的directive前缀，例如<code>acmeSalesCustomerInfo</code>在HTML中声明为<code>acme-sales-customer-info</code>。</p>
<p><em>为什么？</em>：方便快速识别directive的内容和起源，例如<code>acme-</code>可能预示着这个directive是服务于Acme company。</p>
<p>注：避免使用<code>ng-</code>为前缀，研究一下其它广泛使用的directive避免命名冲突，例如<a href="http://ionicframework.com/" target="_blank" rel="noopener">Ionic Framework</a>的<code>ion-</code>。</p>
</li>
</ul>
<h3 id="限制元素和属性"><a href="#限制元素和属性" class="headerlink" title="限制元素和属性"></a>限制元素和属性</h3><ul>
<li><p>当创建一个directive需要作为一个独立元素时，restrict值设置为<code>E</code>（自定义元素），也可以设置可选值<code>A</code>（自定义属性）。一般来说，如果它就是为了独立存在，用<code>E</code>是合适的做法。一般原则是允许<code>EA</code>，但是当它是独立的时候这更倾向于作为一个元素来实施，当它是为了增强已存在的DOM元素时则更倾向于作为一个属性来实施。</p>
<p><em>为什么？</em>：这很有意义！</p>
<p><em>为什么？</em>：虽然我们允许directive被当作一个class来使用，但如果这个directive的行为确实像一个元素的话，那么把directive当作元素或者属性是更有意义的。</p>
<p>注：Angular 1.3 +默认使用EA。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- avoid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-calendar-range"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.widgets'</span>)</span><br><span class="line">    .directive(<span class="string">'myCalendarRange'</span>, myCalendarRange);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> directive = &#123;</span><br><span class="line">        link: link,</span><br><span class="line">        templateUrl: <span class="string">'/template/is/located/here.html'</span>,</span><br><span class="line">        restrict: <span class="string">'C'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> directive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">link</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- recommended --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="name">my-calendar-range</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.widgets'</span>)</span><br><span class="line">    .directive(<span class="string">'myCalendarRange'</span>, myCalendarRange);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> directive = &#123;</span><br><span class="line">        link: link,</span><br><span class="line">        templateUrl: <span class="string">'/template/is/located/here.html'</span>,</span><br><span class="line">        restrict: <span class="string">'EA'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> directive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">link</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Directives和ControllerAs"><a href="#Directives和ControllerAs" class="headerlink" title="Directives和ControllerAs"></a>Directives和ControllerAs</h3><ul>
<li><p>directive使用<code>controller as</code>语法，和view使用<code>controller as</code>保持一致。</p>
<p><em>为什么？</em>：因为不难且有必要这样做。</p>
<p>注意：下面的directive演示了一些你可以在link和directive控制器中使用scope的方法，用controllerAs。这里把template放在行内是为了在一个地方写出这些代码。</p>
<p>注意：关于依赖注入的内容，请看<a href="#手动依赖注入">手动依赖注入</a>。</p>
<p>注意：directive的控制器是在directive外部的，这种风格避免了由于注入造成的<code>return</code>之后的代码无法访问的情况。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-example</span> <span class="attr">max</span>=<span class="string">"77"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .directive(<span class="string">'myExample'</span>, myExample);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> directive = &#123;</span><br><span class="line">        restrict: <span class="string">'EA'</span>,</span><br><span class="line">        templateUrl: <span class="string">'app/feature/example.directive.html'</span>,</span><br><span class="line">        scope: &#123;</span><br><span class="line">            max: <span class="string">'='</span></span><br><span class="line">        &#125;,</span><br><span class="line">        link: linkFunc,</span><br><span class="line">        controller : ExampleController,</span><br><span class="line">        controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">        bindToController: <span class="literal">true</span> <span class="comment">// because the scope is isolated</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> directive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">linkFunc</span>(<span class="params">scope, el, attr, ctrl</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.min = %s *** should be undefined'</span>, scope.min);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.max = %s *** should be undefined'</span>, scope.max);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.vm.min = %s'</span>, scope.vm.min);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.vm.max = %s'</span>, scope.vm.max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExampleController.$inject = [<span class="string">'$scope'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Injecting $scope just for comparison</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    vm.min = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: $scope.vm.min = %s'</span>, $scope.vm.min);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: $scope.vm.max = %s'</span>, $scope.vm.max);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.min = %s'</span>, vm.min);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.max = %s'</span>, vm.max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- example.directive.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>max=&#123;&#123;vm.max&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"&#123;&#123;vm.max&#125;&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>min=&#123;&#123;vm.min&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"&#123;&#123;vm.min&#125;&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：当你把controller注入到link的函数或可访问的directive的attributes时，你可以把它命名为控制器的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Alternative to above example</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">linkFunc</span>(<span class="params">scope, el, attr, vm</span>) </span>&#123; <span class="comment">// 和上面例子的区别在于把vm直接传递进来</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: scope.min = %s *** should be undefined'</span>, scope.min);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: scope.max = %s *** should be undefined'</span>, scope.max);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: vm.min = %s'</span>, vm.min);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: vm.max = %s'</span>, vm.max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当directive中使用了<code>controller as</code>语法时，如果你想把父级作用域绑定到directive的controller作用域时，使用<code>bindToController = true</code>。</p>
<p><em>为什么？</em>：这使得把外部作用域绑定到directive controller中变得更加简单。</p>
<p>注意：Angular 1.3.0才介绍了<code>bindToController</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-example</span> <span class="attr">max</span>=<span class="string">"77"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .directive(<span class="string">'myExample'</span>, myExample);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> directive = &#123;</span><br><span class="line">        restrict: <span class="string">'EA'</span>,</span><br><span class="line">        templateUrl: <span class="string">'app/feature/example.directive.html'</span>,</span><br><span class="line">        scope: &#123;</span><br><span class="line">            max: <span class="string">'='</span></span><br><span class="line">        &#125;,</span><br><span class="line">        controller: ExampleController,</span><br><span class="line">        controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">        bindToController: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> directive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.min = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.min = %s'</span>, vm.min);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.max = %s'</span>, vm.max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- example.directive.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>max=&#123;&#123;vm.max&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.max"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>min=&#123;&#123;vm.min&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.min"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="9-解决Controller的Promises"><a href="#9-解决Controller的Promises" class="headerlink" title="9. 解决Controller的Promises"></a>9. 解决Controller的Promises</h2><h3 id="Controller-Activation-Promises"><a href="#Controller-Activation-Promises" class="headerlink" title="Controller Activation Promises"></a>Controller Activation Promises</h3><ul>
<li><p>在<code>activate</code>函数中解决controller的启动逻辑。</p>
<p><em>为什么？</em>：把启动逻辑放在一个controller中固定的位置可以方便定位、有利于保持测试的一致性，并能够避免controller中到处都是激活逻辑。</p>
<p><em>为什么？</em>：<code>activate</code>这个controller使得重用刷新视图的逻辑变得很方便，把所有的逻辑都放到了一起，可以让用户更快地看到视图，可以很轻松地对<code>ng-view</code> 或 <code>ui-view</code>使用动画，用户体验更好。</p>
<p>注意：如果你需要在开始使用controller之前有条件地取消路由，那么就用<a href="#style-y081">route resolve</a>来代替。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.avengers = [];</span><br><span class="line">    vm.title = <span class="string">'Avengers'</span>;</span><br><span class="line"></span><br><span class="line">    dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        vm.avengers = data;</span><br><span class="line">        <span class="keyword">return</span> vm.avengers;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.avengers = [];</span><br><span class="line">    vm.title = <span class="string">'Avengers'</span>;</span><br><span class="line"></span><br><span class="line">    activate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            vm.avengers = data;</span><br><span class="line">            <span class="keyword">return</span> vm.avengers;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Route-Resolve-Promises"><a href="#Route-Resolve-Promises" class="headerlink" title="Route Resolve Promises"></a>Route Resolve Promises</h3><ul>
<li><p>当一个controller在激活之前，需要依赖一个promise的完成时，那么就在controller的逻辑执行之前在<code>$routeProvider</code>中解决这些依赖。如果你需要在controller被激活之前有条件地取消一个路由，那么就用route resolver。</p>
</li>
<li><p>当你决定在过渡到视图之前取消路由时，使用route resolve。</p>
<p><em>为什么？</em>：controller在加载前可能需要一些数据，这些数据可能是从一个通过自定义factory或是<a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank" rel="noopener">$http</a>的promise而来的。<a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider" target="_blank" rel="noopener">route resolve</a>允许promise在controller的逻辑执行之前解决，因此它可能对从promise中来的数据做一些处理。</p>
<p><em>为什么？</em>：这段代码将在路由后的controller的激活函数中执行，视图立即加载，promise resolve的时候将会开始进行数据绑定，可以（通过<code>ng-view</code>或<code>ui-view</code>）在视图的过渡之间加个loading状态的动画。</p>
<p>注意：这段代码将在路由之前通过一个promise来执行，拒绝了承诺就会取消路由，接受了就会等待路由跳转到新视图。如果你想更快地进入视图，并且无需验证是否可以进入视图，你可以考虑用<a href="#style-y080">控制器 <code>activate</code> 技术</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">movieService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// unresolved</span></span><br><span class="line">    vm.movies;</span><br><span class="line">    <span class="comment">// resolved asynchronously</span></span><br><span class="line">    movieService.getMovies().then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        vm.movies = response.movies;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* better */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// route-config.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .config(config);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span>,</span><br><span class="line">            controller: <span class="string">'Avengers'</span>,</span><br><span class="line">            controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                moviesPrepService: <span class="function"><span class="keyword">function</span>(<span class="params">movieService</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> movieService.getMovies();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// avengers.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line">Avengers.$inject = [<span class="string">'moviesPrepService'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">moviesPrepService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.movies = moviesPrepService.movies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：下面这个例子展示了命名函数的路由解决，这种方式对于调试和处理依赖注入更加方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* even better */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// route-config.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .config(config);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span>,</span><br><span class="line">            controller: <span class="string">'Avengers'</span>,</span><br><span class="line">            controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                moviesPrepService: moviesPrepService</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moviesPrepService</span>(<span class="params">movieService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> movieService.getMovies();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// avengers.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line">Avengers.$inject = [<span class="string">'moviesPrepService'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">moviesPrepService</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">      vm.movies = moviesPrepService.movies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：示例代码中的<code>movieService</code>不符合安全压缩的做法，可以到<a href="#手动依赖注入">手动依赖注入</a>和<a href="#压缩和注释">压缩和注释</a>部分学习如何安全压缩。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="10-手动依赖注入"><a href="#10-手动依赖注入" class="headerlink" title="10. 手动依赖注入"></a>10. 手动依赖注入</h2><h3 id="压缩的不安全性"><a href="#压缩的不安全性" class="headerlink" title="压缩的不安全性"></a>压缩的不安全性</h3><ul>
<li><p>声明依赖时避免使用缩写语法。</p>
<p><em>为什么？</em>：组件的参数（例如controller、factory等等）将会被转换成各种乱七八糟错误的变量。例如，<code>common</code>和<code>dataservice</code>可能会变成<code>a</code>或者<code>b</code>，但是这些转换后的变量在Angular中是找不到的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid - not minification-safe*/</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">common, dataservice</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一段代码在压缩时会产生错误的变量，因此在运行时就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid - not minification-safe*/</span></span><br><span class="line">angular.module(<span class="string">'app'</span>).controller(<span class="string">'Dashboard'</span>, d);<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">a, b</span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="手动添加依赖"><a href="#手动添加依赖" class="headerlink" title="手动添加依赖"></a>手动添加依赖</h3><ul>
<li><p>用<code>$inject</code>手动添加Angular组件所需的依赖。</p>
<p><em>为什么？</em>：这种技术反映了使用<a href="https://github.com/olov/ng-annotate" target="_blank" rel="noopener"><code>ng-annotate</code></a>的技术，这就是我推荐的对依赖关系进行自动化创建安全压缩的方式，如果<code>ng-annotate</code>检测到已经有了注入，那么它就不会再次重复执行。</p>
<p><em>为什么？</em>：可以避免依赖变成其它Angular找不到的变量，例如，<code>common</code>和<code>dataservice</code>可能会变成<code>a</code>或者<code>b</code>。</p>
<p><em>为什么？</em>：避免创建内嵌的依赖，因为一个数组太长不利于阅读，此外，内嵌的方式也会让人感到困惑，比如数组是一系列的字符串，但是最后一个却是组件的function。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>,</span><br><span class="line">        [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;&#125;</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>,</span><br><span class="line">      [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>, Dashboard]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</span><br><span class="line"></span><br><span class="line">Dashboard.$inject = [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：当你的函数处于return语句后面，那么<code>$inject</code>是无法访问的（这会在directive中发生），你可以通过把Controller移到directive外面来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* avoid */</span></span><br><span class="line"><span class="comment">// inside a directive definition</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ddo = &#123;</span><br><span class="line">        controller: DashboardPanelController,</span><br><span class="line">        controllerAs: <span class="string">'vm'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> ddo;</span><br><span class="line"></span><br><span class="line">    DashboardPanelController.$inject = [<span class="string">'logger'</span>]; <span class="comment">// Unreachable</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">DashboardPanelController</span>(<span class="params">logger</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="comment">// outside a directive definition</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ddo = &#123;</span><br><span class="line">        controller: DashboardPanelController,</span><br><span class="line">        controllerAs: <span class="string">'vm'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> ddo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DashboardPanelController.$inject = [<span class="string">'logger'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DashboardPanelController</span>(<span class="params">logger</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="手动确定路由解析器依赖"><a href="#手动确定路由解析器依赖" class="headerlink" title="手动确定路由解析器依赖"></a>手动确定路由解析器依赖</h3><ul>
<li><p>用<code>$inject</code>手动给Angular组件添加路由解析器依赖。</p>
<p><em>为什么？</em>：这种技术打破了路由解析的匿名函数的形式，易读。</p>
<p><em>为什么？</em>：<code>$inject</code>语句可以让任何依赖都可以安全压缩。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span>,</span><br><span class="line">            controller: <span class="string">'AvengersController'</span>,</span><br><span class="line">            controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                moviesPrepService: moviesPrepService</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">moviesPrepService.$inject =  [<span class="string">'movieService'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moviesPrepService</span>(<span class="params">movieService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> movieService.getMovies();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="11-压缩和注释"><a href="#11-压缩和注释" class="headerlink" title="11. 压缩和注释"></a>11. 压缩和注释</h2><h3 id="ng-annotate"><a href="#ng-annotate" class="headerlink" title="ng-annotate"></a>ng-annotate</h3><ul>
<li><p>在<a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp</a>或<a href="http://gruntjs.com" target="_blank" rel="noopener">Grunt</a>中使用<a href="//github.com/olov/ng-annotate">ng-annotate</a>，用<code>/** @ngInject */</code>对需要自动依赖注入的function进行注释。</p>
<p><em>为什么？</em>：可以避免代码中的依赖使用到任何不安全的写法。</p>
<p><em>为什么？</em>：不推荐用<a href="https://github.com/btford/ngmin" target="_blank" rel="noopener"><code>ng-min</code></a>。</p>
<blockquote>
<p>我更喜欢Gulp，因为我觉得它是易写易读易调试的。</p>
</blockquote>
<p>下面的代码没有注入依赖，显然压缩是不安全的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @ngInject */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">storageService, avengerService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.heroSearch = <span class="string">''</span>;</span><br><span class="line">    vm.storeHero = storeHero;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);</span><br><span class="line">      storageService.save(hero.name, hero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当上面的代码通过ng-annotate运行时，就会产生如下的带有<code>$inject</code>注释的输出结果，这样的话压缩就会安全了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @ngInject */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">storageService, avengerService</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    vm.heroSearch = <span class="string">''</span>;</span><br><span class="line">    vm.storeHero = storeHero;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);</span><br><span class="line">      storageService.save(hero.name, hero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Avengers.$inject = [<span class="string">'storageService'</span>, <span class="string">'avengerService'</span>];</span><br></pre></td></tr></table></figure>

<p>注意：如果<code>ng-annotate</code>检测到已经有注入了（例如发现了<code>@ngInject</code>），就不会重复生成<code>$inject</code>代码了。</p>
<p>注意：路由的函数前面也可以用<code>/* @ngInject */</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using @ngInject annotations</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/avengers'</span>, &#123;</span><br><span class="line">            templateUrl: <span class="string">'avengers.html'</span>,</span><br><span class="line">            controller: <span class="string">'Avengers'</span>,</span><br><span class="line">            controllerAs: <span class="string">'vm'</span>,</span><br><span class="line">            resolve: &#123; <span class="comment">/* @ngInject */</span></span><br><span class="line">                moviesPrepService: <span class="function"><span class="keyword">function</span>(<span class="params">movieService</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> movieService.getMovies();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：从Angular 1.3开始，你就可以用<a href="https://docs.angularjs.org/api/ng/directive/ngApp" target="_blank" rel="noopener"><code>ngApp</code></a>指令的 <code>ngStrictDi</code>参数来检测任何可能失去依赖的地方，当以“strict-di”模式创建injector时，会导致应用程序无法调用不使用显示函数注释的函数（这也许无法安全压缩）。记录在控制台的调试信息可以帮助追踪出问题的代码。我只在需要调试的时候才会用到<code>ng-strict-di</code>。<br><code>&lt;body ng-app=&quot;APP&quot; ng-strict-di&gt;</code></p>
</blockquote>
</li>
</ul>
<h3 id="使用Gulp或Grunt结合ng-annotate"><a href="#使用Gulp或Grunt结合ng-annotate" class="headerlink" title="使用Gulp或Grunt结合ng-annotate"></a>使用Gulp或Grunt结合ng-annotate</h3><ul>
<li><p>在自动化任务中使用<a href="https://www.npmjs.org/package/gulp-ng-annotate" target="_blank" rel="noopener">gulp-ng-annotate</a>或<a href="https://www.npmjs.org/package/grunt-ng-annotate" target="_blank" rel="noopener">grunt-ng-annotate</a>，把<code>/* @ngInject */</code>注入到任何有依赖关系函数的前面。</p>
<p><em>为什么？*：ng-annotate会捕获大部分的依赖关系，但是有时候需要借助于`/</em> @ngInject */`语法提示。</p>
<p>下面的代码是gulp任务使用ngAnnotate的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'js'</span>, [<span class="string">'jshint'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> source = pkg.paths.js;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(source)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(concat(<span class="string">'all.min.js'</span>, &#123;<span class="attr">newLine</span>: <span class="string">';'</span>&#125;))</span><br><span class="line">        <span class="comment">// Annotate before uglify so the code get's min'd properly.</span></span><br><span class="line">        .pipe(ngAnnotate(&#123;</span><br><span class="line">            <span class="comment">// true helps add where @ngInject is not used. It infers.</span></span><br><span class="line">            <span class="comment">// Doesn't work with resolve, so we must be explicit there</span></span><br><span class="line">            add: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(bytediff.start())</span><br><span class="line">        .pipe(uglify(&#123;<span class="attr">mangle</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(bytediff.stop())</span><br><span class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</span><br><span class="line">        .pipe(gulp.dest(pkg.paths.dev));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h2><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul>
<li><p>使用一个<a href="https://docs.angularjs.org/api/auto/service/$provide#decorator" target="_blank" rel="noopener">decorator</a>，在配置的时候用<a href="https://docs.angularjs.org/api/auto/service/$provide" target="_blank" rel="noopener"><code>$provide</code></a>服务，当发生异常时，在<a href="https://docs.angularjs.org/api/ng/service/$exceptionHandler" target="_blank" rel="noopener"><code>$exceptionHandler</code></a>服务中执行自定义的处理方法。</p>
<p><em>为什么？</em>：在开发时和运行时提供了一种统一的方式来处理未被捕获的Angular异常。</p>
<p>注：另一个选项是用来覆盖service的，这个可以代替decorator，这是一个非常nice的选项，但是如果你想保持默认行为，那么推荐你扩展一个decorator。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'blocks.exception'</span>)</span><br><span class="line">    .config(exceptionConfig);</span><br><span class="line"></span><br><span class="line">exceptionConfig.$inject = [<span class="string">'$provide'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exceptionConfig</span>(<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">    $provide.decorator(<span class="string">'$exceptionHandler'</span>, extendExceptionHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extendExceptionHandler.$inject = [<span class="string">'$delegate'</span>, <span class="string">'toastr'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendExceptionHandler</span>(<span class="params">$delegate, toastr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">exception, cause</span>) </span>&#123;</span><br><span class="line">        $delegate(exception, cause);</span><br><span class="line">        <span class="keyword">var</span> errorData = &#123;</span><br><span class="line">          exception: exception,</span><br><span class="line">          cause: cause</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Could add the error to a service's collection,</span></span><br><span class="line"><span class="comment">         * add errors to $rootScope, log errors to remote web server,</span></span><br><span class="line"><span class="comment">         * or log locally. Or throw hard. It is entirely up to you.</span></span><br><span class="line"><span class="comment">         * throw exception;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        toastr.error(exception.msg, errorData);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="异常捕获器"><a href="#异常捕获器" class="headerlink" title="异常捕获器"></a>异常捕获器</h3><ul>
<li><p>创建一个暴露了一个接口的factory来捕获异常并以合适方式处理异常。</p>
<p><em>为什么？</em>：提供了一个统一的方法来捕获代码中抛出的异常。</p>
<p>注：异常捕获器对特殊异常的捕获和反应是非常友好的，例如，使用XHR从远程服务获取数据时，你想要捕获所有异常并做出不同的反应。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'blocks.exception'</span>)</span><br><span class="line">    .factory(<span class="string">'exception'</span>, exception);</span><br><span class="line"></span><br><span class="line">exception.$inject = [<span class="string">'logger'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exception</span>(<span class="params">logger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> service = &#123;</span><br><span class="line">        catcher: catcher</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">catcher</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            logger.error(message, reason);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="路由错误"><a href="#路由错误" class="headerlink" title="路由错误"></a>路由错误</h3><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ngRoute/service/$route#$routeChangeError" target="_blank" rel="noopener"><code>$routeChangeError</code></a>来处理并打印出所有的路由错误信息。</p>
<p><em>为什么？</em>：提供一个统一的方式来处理所有的路由错误。</p>
<p><em>为什么？</em>：当一个路由发生错误的时候，可以给展示一个提示信息，提高用户体验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="keyword">var</span> handlingRouteChangeError = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRoutingErrors</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Route cancellation:</span></span><br><span class="line"><span class="comment">     * On routing error, go to the dashboard.</span></span><br><span class="line"><span class="comment">     * Provide an exit clause if it tries to do it twice.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $rootScope.$on(<span class="string">'$routeChangeError'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">event, current, previous, rejection</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (handlingRouteChangeError) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">            handlingRouteChangeError = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">var</span> destination = (current &amp;&amp; (current.title ||</span><br><span class="line">                current.name || current.loadedTemplateUrl)) ||</span><br><span class="line">                <span class="string">'unknown target'</span>;</span><br><span class="line">            <span class="keyword">var</span> msg = <span class="string">'Error routing to '</span> + destination + <span class="string">'. '</span> +</span><br><span class="line">                (rejection.msg || <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Optionally log using a custom service or $log.</span></span><br><span class="line"><span class="comment">             * (Don't forget to inject custom service)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            logger.warning(msg, [current]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * On routing error, go to another route/state.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            $location.path(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="13-命名"><a href="#13-命名" class="headerlink" title="13. 命名"></a>13. 命名</h2><h3 id="命名原则"><a href="#命名原则" class="headerlink" title="命名原则"></a>命名原则</h3><ul>
<li><p>遵循以描述组件功能，然后是类型（可选）的方式来给所有的组件提供统一的命名，我推荐的做法是<code>feature.type.js</code>。大多数文件都有2个名字。</p>
<ul>
<li>文件名 (<code>avengers.controller.js</code>)</li>
<li>带有Angular的注册组件名 (<code>AvengersController</code>)</li>
</ul>
<p><em>为什么？</em>：命名约定有助于为一目了然地找到内容提供一个统一的方式，在项目中和团队中保持统一性是非常重要的，保持统一性对于跨公司来说提供了巨大的效率。</p>
<p><em>为什么？</em>：命名约定应该只为代码的检索和沟通提供方便。</p>
</li>
</ul>
<h3 id="功能文件命名"><a href="#功能文件命名" class="headerlink" title="功能文件命名"></a>功能文件命名</h3><ul>
<li><p>遵循以“描述组件功能.类型（可选）”的方式来给所有的组件提供统一的命名，我推荐的做法是<code>feature.type.js</code>。</p>
<p><em>为什么？</em>：为快速识别组件提供了统一的方式。</p>
<p><em>为什么？</em>：为任何自动化的任务提供模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * common options</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Controllers</span></span><br><span class="line">avengers.js</span><br><span class="line">avengers.controller.js</span><br><span class="line">avengersController.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// Services/Factories</span></span><br><span class="line">logger.js</span><br><span class="line">logger.service.js</span><br><span class="line">loggerService.js</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// controllers</span></span><br><span class="line">avengers.controller.js</span><br><span class="line">avengers.controller.spec.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// services/factories</span></span><br><span class="line">logger.service.js</span><br><span class="line">logger.service.spec.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// constants</span></span><br><span class="line">constants.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// module definition</span></span><br><span class="line">avengers.module.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// routes</span></span><br><span class="line">avengers.routes.js</span><br><span class="line">avengers.routes.spec.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// configuration</span></span><br><span class="line">avengers.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// directives</span></span><br><span class="line">avenger-profile.directive.js</span><br><span class="line">avenger-profile.directive.spec.js</span><br></pre></td></tr></table></figure>

<p>注意：另外一种常见的约定就是不要用<code>controller</code>这个词来给controller文件命名，例如不要用<code>avengers.controller.js</code>，而是用<code>avengers.js</code>。所有其它的约定都坚持使用类型作为后缀，但是controller是组件中最为常用的类型，因此这种做法的好处貌似仅仅是节省了打字，但是仍然很容易识别。我建议你为你的团队选择一种约定，并且要保持统一性。我喜欢的命名方式是<code>avengers.controller.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Controllers</span></span><br><span class="line">avengers.js</span><br><span class="line">avengers.spec.js</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="测试文件命名"><a href="#测试文件命名" class="headerlink" title="测试文件命名"></a>测试文件命名</h3><ul>
<li><p>和组件命名差不多，带上一个<code>spec</code>后缀。</p>
<p><em>为什么？</em>：为快速识别组件提供统一的方式。</p>
<p><em>为什么？</em>：为<a href="http://karma-runner.github.io/" target="_blank" rel="noopener">karma</a>或是其它测试运行器提供模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">avengers.controller.spec.js</span><br><span class="line">logger.service.spec.js</span><br><span class="line">avengers.routes.spec.js</span><br><span class="line">avenger-profile.directive.spec.js</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Controller命名"><a href="#Controller命名" class="headerlink" title="Controller命名"></a>Controller命名</h3><ul>
<li><p>为所有controller提供统一的名称，先特征后名字，鉴于controller是构造函数，所以要采用UpperCamelCase（每个单词首字母大写）的方式。</p>
<p><em>为什么？</em>：为快速识别和引用controller提供统一的方式。</p>
<p><em>为什么？</em>：UpperCamelCase是常规的识别一个可以用构造函数来实例化的对象的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// avengers.controller.js</span></span><br><span class="line">angular</span><br><span class="line">    .module</span><br><span class="line">    .controller(<span class="string">'HeroAvengersController'</span>, HeroAvengersController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeroAvengers</span>(<span class="params"></span>)</span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Controller命名后缀"><a href="#Controller命名后缀" class="headerlink" title="Controller命名后缀"></a>Controller命名后缀</h3><ul>
<li><p>使用<code>Controller</code>。</p>
<p><em>为什么？</em>：<code>Controller</code>使用更广泛、更明确、更具有描述性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// avengers.controller.js</span></span><br><span class="line">angular</span><br><span class="line">    .module</span><br><span class="line">    .controller(<span class="string">'AvengersController'</span>, AvengersController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AvengersController</span>(<span class="params"></span>)</span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Factory命名"><a href="#Factory命名" class="headerlink" title="Factory命名"></a>Factory命名</h3><ul>
<li><p>一样要统一，对service和factory使用camel-casing（驼峰式，第一个单词首字母小写，后面单词首字母大写）方式。避免使用<code>$</code>前缀。</p>
<p><em>为什么？</em>：可以快速识别和引用factory。</p>
<p><em>为什么？</em>：避免与内部使用<code>$</code>前缀的服务发生冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// logger.service.js</span></span><br><span class="line">angular</span><br><span class="line">    .module</span><br><span class="line">    .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>)</span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Directive组件命名"><a href="#Directive组件命名" class="headerlink" title="Directive组件命名"></a>Directive组件命名</h3><ul>
<li><p>使用camel-case方式，用一个短的前缀来描述directive在哪个区域使用（一些例子中是使用公司前缀或是项目前缀）。</p>
<p><em>为什么？</em>：可以快速识别和引用controller。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// avenger-profile.directive.js</span></span><br><span class="line">angular</span><br><span class="line">    .module</span><br><span class="line">    .directive(<span class="string">'xxAvengerProfile'</span>, xxAvengerProfile);</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage is &lt;xx-avenger-profile&gt; &lt;/xx-avenger-profile&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxAvengerProfile</span>(<span class="params"></span>)</span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li><p>当有很多的模块时，主模块文件命名成<code>app.module.js</code>，其它依赖模块以它们代表的内容来命名。例如，一个管理员模块命名成<code>admin.module.js</code>，它们各自的注册模块名字就是<code>app</code>和<code>admin</code>。</p>
<p><em>为什么？</em>：给多模块的应用提供统一的方式，这也是为了扩展大型应用。</p>
<p><em>为什么？</em>：对使用任务来自动化加载所有模块的定义（先）和其它所有的angular文件（后）提供了一种简单的方式。</p>
</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>把一个模块的配置独立到它自己的文件中，以这个模块为基础命名。<code>app</code>模块的配置文件命名成<code>app.config.js</code>（或是<code>config.js</code>），<code>admin.module.js</code>的配置文件命名成<code>admin.config.js</code>。</p>
<p><em>为什么？</em>：把配置从模块定义、组件和活跃代码中分离出来。</p>
<p><em>为什么？</em>：为设置模块的配置提供了一个可识别的地方。</p>
</li>
</ul>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul>
<li>把路由的配置独立到单独的文件。主模块的路由可能是<code>app.route.js</code>，<code>admin</code>模块的路由可能是<code>admin.route.js</code>。即使是在很小的应用中，我也喜欢把路由的配置从其余的配置中分离出来。</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="14-应用程序结构的LIFT准则"><a href="#14-应用程序结构的LIFT准则" class="headerlink" title="14. 应用程序结构的LIFT准则"></a>14. 应用程序结构的LIFT准则</h2><h3 id="LIFT"><a href="#LIFT" class="headerlink" title="LIFT"></a>LIFT</h3><ul>
<li><p>构建一个可以快速定位（<code>L</code>ocate）代码、一目了然地识别（<code>I</code>dentify）代码、拥有一个平直（<code>F</code>lattest）的结构、尽量（<code>T</code>ry）坚持DRY（Don’t Repeat Yourself）的应用程序，其结构应该遵循这4项基本准则。</p>
<p><em>为什么是LIFT?</em>: 提供一个有良好扩展的结构，并且是模块化的，更快的找到代码能够帮助开发者提高效率。另一种检查你的app结构的方法就是问你自己：你能多块地打开涉及到一个功能的所有相关文件并开始工作？</p>
<p>当我发现我的的代码结构很恶心的时候，我就重新看看LIFT准则。</p>
<ol>
<li>轻松定位代码（L）</li>
<li>一眼识别代码（I）</li>
<li>平直的代码结构（层级不要太多）（F）</li>
<li>尽量保持不要写重复代码（T）</li>
</ol>
</li>
</ul>
<h3 id="Locate"><a href="#Locate" class="headerlink" title="Locate"></a>Locate</h3><ul>
<li><p>更直观、更简单、更快捷地定位代码</p>
<p><em>为什么？</em>：我发现这对于一个项目是非常重要的，如果一个团队不能快速找到他们需要工作的文件，这将不能使团队足够高效地工作，那么这个代码结构就得改变。你可能不知道文件名或是相关的文件放在了哪里，那么就把他们放在最直观的地方，放在一起会节省大量的时间。下面是一个参考目录结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bower_components</span><br><span class="line">/client</span><br><span class="line">  /app</span><br><span class="line">    /avengers</span><br><span class="line">    /blocks</span><br><span class="line">      /exception</span><br><span class="line">      /logger</span><br><span class="line">    /core</span><br><span class="line">    /dashboard</span><br><span class="line">    /data</span><br><span class="line">    /layout</span><br><span class="line">    /widgets</span><br><span class="line">  /content</span><br><span class="line">  index.html</span><br><span class="line">.bower.json</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Identify"><a href="#Identify" class="headerlink" title="Identify"></a>Identify</h3><ul>
<li><p>当你看到一个文件时你应该能够立即知道它包含了什么、代表了什么。</p>
<p><em>为什么？</em>：你花费更少的时间来了解代码代表了什么，并且变得更加高效。如果这意味着你需要更长的名字，那么就这么干吧。文件名一定要具有描述性，保持和文件内容互为一体。避免文件中有多个controller，多个service，甚至是混合的。</p>
</li>
</ul>
<h3 id="Flat"><a href="#Flat" class="headerlink" title="Flat"></a>Flat</h3><ul>
<li><p>尽可能长时间地保持一个平直的文件夹结构，如果你的文件夹层级超过7+，那么就开始考虑分离。</p>
<p><em>为什么？</em>：没有谁想在一个7级文件夹中寻找一个文件，你可以考虑一下网页导航栏有那么多层。文件夹结构没有硬性规则，但是当一个文件夹下的文件有7-10个，那么就是时候创建子文件夹了，文件夹的层级一定要把握好。一直使用一个平直的结构，直到确实有必要（帮助其它的LIFT）创建一个新的文件夹。</p>
</li>
</ul>
<h3 id="T-DRY（尽量坚持DRY）"><a href="#T-DRY（尽量坚持DRY）" class="headerlink" title="T-DRY（尽量坚持DRY）"></a>T-DRY（尽量坚持DRY）</h3><ul>
<li><p>坚持DRY，但是不要疯了一样的做却牺牲了可读性。</p>
<p><em>为什么？</em>：保持DRY很重要，但是如果牺牲了其它LIFT，那么它就没那么重要了，这就是为什么说尽量坚持DRY。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="15-应用程序结构"><a href="#15-应用程序结构" class="headerlink" title="15. 应用程序结构"></a>15. 应用程序结构</h2><h3 id="总规范"><a href="#总规范" class="headerlink" title="总规范"></a>总规范</h3><ul>
<li><p>有实施的短期看法和长远的目标，换句话说，从小处入手，但是要记住app的走向。app的所有代码都在一个叫做<code>app</code>的根目录下，所有的内容都遵循一个功能一个文件，每一个controller、service、module、view都是独立的文件。第三方脚本存放在另外的根文件夹中（<code>bower_components</code>、<code>scripts</code>、<code>lib</code>）。</p>
<p>注：了解实例结构的具体信息看<a href="http://www.johnpapa.net/angular-app-structuring-guidelines/" target="_blank" rel="noopener">Angular应用结构</a>。</p>
</li>
</ul>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul>
<li><p>把定义应用程序总体布局的组件放到<code>layout</code>文件夹中，如导航、内容区等等。</p>
<p><em>为什么？</em>：复用。</p>
</li>
</ul>
<h3 id="按功能划分文件夹结构"><a href="#按功能划分文件夹结构" class="headerlink" title="按功能划分文件夹结构"></a>按功能划分文件夹结构</h3><ul>
<li><p>按照它们代表的功能来给创建的文件夹命名，当文件夹包含的文件超过7个（根据需要自行调整数量限制），就考虑新建文件夹。</p>
<p><em>为什么？</em>：开发者可以快速定位代码、快速识别文件代表的意思，结构尽可能平直，没有重复，没有多余名字。</p>
<p><em>为什么？</em>：LIFT规范都包括在内。</p>
<p><em>为什么？</em>：通过组织内容和让它们保持和LIFT指导准则一致，帮助降低应用程序变得混乱的可能性。</p>
<p><em>为什么？</em>：超过10个文件时，在一个一致性的文件夹中很容易定位，但是在一个平直的文件夹结构中确实很难定位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * recommended</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app/</span><br><span class="line">    app.module.js</span><br><span class="line">    app.config.js</span><br><span class="line">    directives/</span><br><span class="line">        calendar.directive.js</span><br><span class="line">        calendar.directive.html</span><br><span class="line">        user-profile.directive.js</span><br><span class="line">        user-profile.directive.html</span><br><span class="line">    services/</span><br><span class="line">        dataservice.js</span><br><span class="line">        localstorage.js</span><br><span class="line">        logger.js</span><br><span class="line">        spinner.js</span><br><span class="line">    layout/</span><br><span class="line">        shell.html</span><br><span class="line">        shell.controller.js</span><br><span class="line">        topnav.html</span><br><span class="line">        topnav.controller.js</span><br><span class="line">    people/</span><br><span class="line">        attendees.html</span><br><span class="line">        attendees.controller.js</span><br><span class="line">        people.routes.js</span><br><span class="line">        speakers.html</span><br><span class="line">        speakers.controller.js</span><br><span class="line">        speaker-detail.html</span><br><span class="line">        speaker-detail.controller.js</span><br><span class="line">    sessions/</span><br><span class="line">        sessions.html</span><br><span class="line">        sessions.controller.js</span><br><span class="line">        sessions.routes.js</span><br><span class="line">        session-detail.html</span><br><span class="line">        session-detail.controller.js</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/modularity-2.png" alt="实例App结构"></p>
<p>注意：不要使用按类型划分文件夹结构，因为如果这样的话，当做一个功能时，需要在多个文件夹中来回切换。当应用程序有5个、10个，甚至是25个以上的view、controller（或其他feature）时，这种方式将迅速变得不实用，这就使得它定位文件比按功能分文件夹的方式要困难的多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * avoid</span></span><br><span class="line"><span class="comment"> * Alternative folders-by-type.</span></span><br><span class="line"><span class="comment"> * I recommend "folders-by-feature", instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app/</span><br><span class="line">    app.module.js</span><br><span class="line">    app.config.js</span><br><span class="line">    app.routes.js</span><br><span class="line">    directives.js</span><br><span class="line">    controllers/</span><br><span class="line">        attendees.js</span><br><span class="line">        session-detail.js</span><br><span class="line">        sessions.js</span><br><span class="line">        shell.js</span><br><span class="line">        speakers.js</span><br><span class="line">        speaker-detail.js</span><br><span class="line">        topnav.js</span><br><span class="line">    directives/</span><br><span class="line">        calendar.directive.js</span><br><span class="line">        calendar.directive.html</span><br><span class="line">        user-profile.directive.js</span><br><span class="line">        user-profile.directive.html</span><br><span class="line">    services/</span><br><span class="line">        dataservice.js</span><br><span class="line">        localstorage.js</span><br><span class="line">        logger.js</span><br><span class="line">        spinner.js</span><br><span class="line">    views/</span><br><span class="line">        attendees.html</span><br><span class="line">        session-detail.html</span><br><span class="line">        sessions.html</span><br><span class="line">        shell.html</span><br><span class="line">        speakers.html</span><br><span class="line">        speaker-detail.html</span><br><span class="line">        topnav.html</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="16-模块化"><a href="#16-模块化" class="headerlink" title="16. 模块化"></a>16. 模块化</h2><h3 id="许多小的、独立的模块"><a href="#许多小的、独立的模块" class="headerlink" title="许多小的、独立的模块"></a>许多小的、独立的模块</h3><ul>
<li><p>创建只封装一个职责的小模块。</p>
<p><em>为什么？</em>：模块化的应用程序很容易添加新的功能。</p>
</li>
</ul>
<h3 id="创建一个App-Module"><a href="#创建一个App-Module" class="headerlink" title="创建一个App Module"></a>创建一个App Module</h3><ul>
<li><p>创建一个应用程序的根模块，它的职责是把应用程序中所有的模块和功能都放到一起。</p>
<p><em>为什么？</em>：Angular鼓励模块化和分离模式。创建根模块的作用是把其它模块都绑定到一起，这为增加或是删除一个模块提供了非常简单的方法。</p>
<p><em>为什么？</em>：应用程序模块变成了一个描述哪些模块有助于定义应用程序的清单。</p>
</li>
</ul>
<h3 id="保持App-Module的精简"><a href="#保持App-Module的精简" class="headerlink" title="保持App Module的精简"></a>保持App Module的精简</h3><ul>
<li><p>app module中只放聚合其它模块的逻辑，具体功能在它们自己的模块中实现。</p>
<p><em>为什么？</em>：添加额外的代码（获取数据、展现视图、其它和聚合模块无关的代码）到app module中使app module变得很糟糕，也使得模块难以重用和关闭。</p>
</li>
</ul>
<h3 id="功能区域就是模块"><a href="#功能区域就是模块" class="headerlink" title="功能区域就是模块"></a>功能区域就是模块</h3><ul>
<li><p>创建代表功能区的模块，例如布局、可重用、共享服务、仪表盘和app的特殊功能（例如客户、管理、销售）。</p>
<p><em>为什么？</em>：自包含的模块可以无缝地被添加到应用程序中。</p>
<p><em>为什么？</em>：项目进行功能迭代时，可以专注于功能，在开发完成启用它们即可。</p>
<p><em>为什么？</em>：把功能拆分成不同模块方便测试。</p>
</li>
</ul>
<h3 id="可重用的块就是模块"><a href="#可重用的块就是模块" class="headerlink" title="可重用的块就是模块"></a>可重用的块就是模块</h3><ul>
<li><p>为通用service创建代表可重用的应用程序块的模块，例如异常处理、日志记录、诊断、安全性和本地数据储藏等模块。</p>
<p><em>为什么？</em>：这些类型的功能在很多应用程序中都需要用到，所以把它们分离到自己的模块中，它们可以变成通用的应用程序，也能被跨应用地进行重用。</p>
</li>
</ul>
<h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><ul>
<li><p>应用程序根模块依赖于应用程序特定的功能模块、共享的和可复用的模块。</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/modularity-1.png" alt="模块化和依赖"></p>
<p><em>为什么？</em>：主程序模块包含一个能快速识别应用程序功能的清单。</p>
<p><em>为什么？</em>：每个功能区都包含一个它依赖了哪些模块的列表，因此其它应用可以把它当作一个依赖引入进来。</p>
<p><em>为什么？</em>：程序内部的功能，如共享数据的服务变得容易定位，并且从<code>app.core</code>中共享。</p>
<p>注意：这是保持一致性的一种策略，这里有很多不错的选择，选择一种统一的，遵循Angular依赖规则，这将易于维护和扩展。</p>
<blockquote>
<p>我的不同项目间的结构略有不同，但是它们都遵循了这些结构和模块化的准则,具体的实施方案会根据功能和团队发生变化。也就是说，不要在一棵树上吊死，但是心中一定要记得保持一致性、可维护性和效率。</p>
</blockquote>
<blockquote>
<p>小项目中，你可以直接把所有依赖都放到app module中，这对于小项目来说比较容易维护，但是想在此项目外重用模块就比较难了。</p>
</blockquote>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="17-启动逻辑"><a href="#17-启动逻辑" class="headerlink" title="17. 启动逻辑"></a>17. 启动逻辑</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>必须在angular应用启动前进行配置才能把代码注入到<a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="noopener">模块配置</a>，理想的一些case应该包括providers和constants。</p>
<p><em>为什么？</em>：这使得在更少的地方进行配置变得容易。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .config(configure);</span><br><span class="line"></span><br><span class="line">configure.$inject =</span><br><span class="line">    [<span class="string">'routerHelperProvider'</span>, <span class="string">'exceptionHandlerProvider'</span>, <span class="string">'toastr'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span> (<span class="params">routerHelperProvider, exceptionHandlerProvider, toastr</span>) </span>&#123;</span><br><span class="line">    exceptionHandlerProvider.configure(config.appErrorPrefix);</span><br><span class="line">    configureStateHelper();</span><br><span class="line"></span><br><span class="line">    toastr.options.timeOut = <span class="number">4000</span>;</span><br><span class="line">    toastr.options.positionClass = <span class="string">'toast-bottom-right'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">configureStateHelper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        routerHelperProvider.configure(&#123;</span><br><span class="line">            docTitle: <span class="string">'NG-Modular: '</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="运行代码块"><a href="#运行代码块" class="headerlink" title="运行代码块"></a>运行代码块</h3><ul>
<li><p>任何在应用程序启动时需要运行的代码都应该在factory中声明，通过一个function暴露出来，然后注入到<a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="noopener">运行代码块</a>中。</p>
<p><em>为什么？</em>：直接在运行代码块处写代码将会使得测试变得很困难，相反，如果放到facotry则会使的抽象和模拟变得很简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .run(runBlock);</span><br><span class="line"></span><br><span class="line">runBlock.$inject = [<span class="string">'authenticator'</span>, <span class="string">'translator'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runBlock</span>(<span class="params">authenticator, translator</span>) </span>&#123;</span><br><span class="line">    authenticator.initialize();</span><br><span class="line">    translator.initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="18-Angular-包装服务"><a href="#18-Angular-包装服务" class="headerlink" title="18. Angular $包装服务"></a>18. Angular $包装服务</h2><h3 id="document和-window"><a href="#document和-window" class="headerlink" title="$document和$window"></a>$document和$window</h3><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ng/service/$document" target="_blank" rel="noopener"><code>$document</code></a>和<a href="https://docs.angularjs.org/api/ng/service/$window" target="_blank" rel="noopener"><code>$window</code></a>代替<code>document</code>和<code>window</code>。</p>
<p><em>为什么？</em>：使用内部包装服务将更容易测试，也避免了你自己去模拟document和window。</p>
</li>
</ul>
<h3 id="timeout和-interval"><a href="#timeout和-interval" class="headerlink" title="$timeout和$interval"></a>$timeout和$interval</h3><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ng/service/$timeout" target="_blank" rel="noopener"><code>$timeout</code></a>和<a href="https://docs.angularjs.org/api/ng/service/$interval" target="_blank" rel="noopener"><code>$interval</code></a>代替<code>setTimeout</code>和<code>setInterval</code> 。</p>
<p><em>为什么？</em>：易于测试，处理Angular消化周期从而保证数据的同步绑定。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="19-测试"><a href="#19-测试" class="headerlink" title="19. 测试"></a>19. 测试</h2><p>单元测试有助于保持代码的清晰，因此我加入一些关于单元测试的基础和获取更多信息的链接。</p>
<h3 id="用故事来编写测试"><a href="#用故事来编写测试" class="headerlink" title="用故事来编写测试"></a>用故事来编写测试</h3><ul>
<li><p>给每一个故事都写一组测试，先创建一个空的测试，然后用你给这个故事写的代码来填充它。</p>
<p><em>为什么？</em>：编写测试有助于明确规定你的故事要做什么、不做什么以及你如何判断是否成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">it(<span class="string">'should have Avengers controller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(<span class="string">'should find 1 Avenger when filtered by name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(<span class="string">'should have 10 Avengers'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO (mock data?)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(<span class="string">'should return Avengers via XHR'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO ($httpBackend?)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and so on</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="测试库"><a href="#测试库" class="headerlink" title="测试库"></a>测试库</h3><ul>
<li><p>用<a href="http://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a>或者<a href="http://mochajs.org" target="_blank" rel="noopener">Mocha</a>进行单元测试。</p>
<p><em>为什么？</em>：Angular社区中Jasmine和Mocha都用的很广，两者都很稳定，可维护性好，提供强大的测试功能。</p>
<p>注意：使用Mocha时你可以考虑选择一个类似<a href="http://chaijs.com" target="_blank" rel="noopener">Chai</a>的提示库。</p>
</li>
</ul>
<h3 id="测试运行器"><a href="#测试运行器" class="headerlink" title="测试运行器"></a>测试运行器</h3><ul>
<li><p><a href="http://karma-runner.github.io" target="_blank" rel="noopener">Karma</a>。</p>
<p><em>为什么？</em>：Karma容易配置，代码发生修改时自动运行。</p>
<p><em>为什么？</em>：可以通过自身或是Grunt、Gulp方便地钩入持续集成的进程。</p>
<p><em>为什么？</em>：一些IDE已经开始集成Karma了，如<a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>和<a href="http://visualstudiogallery.msdn.microsoft.com/02f47876-0e7a-4f6c-93f8-1af5d5189225" target="_blank" rel="noopener">Visual Studio</a>。</p>
<p><em>为什么？</em>：Karma可以很好的和自动化任务工具如<a href="http://www.gruntjs.com" target="_blank" rel="noopener">Grunt</a>（带有<a href="https://github.com/karma-runner/grunt-karma" target="_blank" rel="noopener">grunt-karma</a>）和<a href="http://www.gulpjs.com" target="_blank" rel="noopener">Gulp</a>（带有<a href="https://github.com/lazd/gulp-karma" target="_blank" rel="noopener">gulp-karma</a>）合作。</p>
</li>
</ul>
<h3 id="Stubbing和Spying"><a href="#Stubbing和Spying" class="headerlink" title="Stubbing和Spying"></a>Stubbing和Spying</h3><ul>
<li><p>用<a href="http://sinonjs.org/" target="_blank" rel="noopener">Sinon</a>。</p>
<p><em>为什么？</em>：Sinon可以和Jasmine和Mocha合作良好，并且可以扩展它们提供的stubbing和spying。</p>
<p><em>为什么？</em>：如果你想试试Jasmine和Mocha，用Sinon在它们中间来回切换是很方便的。我更喜欢Mocha。</p>
<p><em>为什么？</em>：测试失败Sinon有一个具有描述性的信息。</p>
</li>
</ul>
<h3 id="Headless-Browser"><a href="#Headless-Browser" class="headerlink" title="Headless Browser"></a>Headless Browser</h3><ul>
<li><p>在服务器上使用<a href="http://phantomjs.org/" target="_blank" rel="noopener">PhantomJS</a>来运行你的测试。</p>
<p><em>为什么？</em>：PhantomJS是一个headless browser，无需一个“可视”的浏览器来帮助你运行测试。因此你的服务器上不需要安装Chrome、Safari、IE或是其它浏览器。</p>
<p>注意：你仍然需要在你的环境下测试所有浏览器，来满足用户的需求。</p>
</li>
</ul>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>  -在你的测试上运行JSHint。</p>
<pre><code>*为什么？*：测试也是代码，JSHint能够帮你识别代码中可能导致测试无法正常工作的的质量问题。</code></pre><h3 id="对测试降低全局JSHint规则"><a href="#对测试降低全局JSHint规则" class="headerlink" title="对测试降低全局JSHint规则"></a>对测试降低全局JSHint规则</h3><ul>
<li><p>对你的测试代码放宽规则，这样可以允许使用<code>describe</code>和<code>expect</code>等类似通用的全局方法。对表达式放宽规则，就行Mocha一样。</p>
<p><em>为什么？</em>：测试也是代码，因此要和对待其它生产代码一样重视测试代码的质量。然而，测试框架中允许使用全局变量，例如，在你的测试单例中允许使用this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* jshint -W117, -W030 */</span></span><br></pre></td></tr></table></figure>

<p>或者你也可以把下面的这几行加入到你的JSHint Options文件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"jasmine"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"mocha"</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/testing-tools.png" alt="测试工具"></p>
</li>
</ul>
<h3 id="组织测试"><a href="#组织测试" class="headerlink" title="组织测试"></a>组织测试</h3><ul>
<li><p>将单元测试文件(specs)同被测试客户端代码并列放在同一个文件夹下，将多个组件共用的测试文件以及服务器集成测试的文件放到一个单独的<code>tests</code>文件夹下。</p>
<p><em>为什么？</em>：单元测试和源代码中的每一个组件和文件都有直接的相关性。</p>
<p><em>为什么？</em>：这样它就会一直在你的视野中，很容易让它们保持在最新状态。编码的时候无论你做TDD还是在开发过程中测试，或者开发完成后测试，这些单测都不会脱离你的视线和脑海，这样就更容易维护，也有助于保持代码的覆盖率。</p>
<p><em>为什么？</em>：更新源代码的时候可以更简单地在同一时间更新测试代码。</p>
<p><em>为什么？</em>：方便源码阅读者了解组件如何使用，也便于发现其中的局限性。</p>
<p><em>为什么？</em>：方便找。</p>
<p><em>为什么？</em>：方便使用grunt或者gulp。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/src/client/app/customers/customer-detail.controller.js</span><br><span class="line">                         /customer-detail.controller.spec.js</span><br><span class="line">                         /customers.controller.js</span><br><span class="line">                         /customers.controller.spec.js</span><br><span class="line">                         /customers.module.js</span><br><span class="line">                         /customers.route.js</span><br><span class="line">                         /customers.route.spec.js</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="20-动画"><a href="#20-动画" class="headerlink" title="20. 动画"></a>20. 动画</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul>
<li><p>在页面过渡时使用<a href="https://docs.angularjs.org/guide/animations" target="_blank" rel="noopener">Angular动画</a>，包括<a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="noopener">ngAnimate模块</a>。三个关键点是细微、平滑、无缝。</p>
<p><em>为什么？</em>：使用得当的话能够提高用户体验。</p>
<p><em>为什么？</em>：当视图过渡时，微小的动画可以提高感知性。</p>
</li>
</ul>
<h3 id="Sub-Second"><a href="#Sub-Second" class="headerlink" title="Sub Second"></a>Sub Second</h3><ul>
<li><p>使用短持续性的动画，我一般使用300ms，然后调整到合适的时间。</p>
<p><em>为什么？</em>：长时间的动画容易造成用户认为程序性能太差的影响。</p>
</li>
</ul>
<h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><ul>
<li><p>传统动画使用<a href="http://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css</a>。</p>
<p><em>为什么？</em>：css提供的动画是快速的、流畅的、易于添加到应用程序中的。</p>
<p><em>为什么？</em>：为动画提供一致性。</p>
<p><em>为什么？</em>：animate.css被广泛使用和测试。</p>
<p>注意：参阅<a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html" target="_blank" rel="noopener">Matias Niemelä的关于Angular动画的文章</a></p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="21-注释"><a href="#21-注释" class="headerlink" title="21. 注释"></a>21. 注释</h2><h3 id="jsDoc"><a href="#jsDoc" class="headerlink" title="jsDoc"></a>jsDoc</h3><ul>
<li><p>如果你准备做一个文档，那么就使用<a href="http://usejsdoc.org/" target="_blank" rel="noopener"><code>jsDoc</code></a>的语法来记录函数名、描述、参数和返回值。使用<code>@namespace</code>和<code>@memberOf</code>来匹配应用程序结构。</p>
<p><em>为什么？</em>：你可以从代码中生成（重新生成）文档，而不必从头开始编写文档。</p>
<p><em>为什么？</em>：使用业内通用工具保持了统一性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logger Factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@namespace <span class="variable">Factories</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  angular</span><br><span class="line">      .module(<span class="string">'app'</span>)</span><br><span class="line">      .factory(<span class="string">'logger'</span>, logger);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@namespace <span class="variable">Logger</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>Application wide logger</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@memberOf <span class="variable">Factories</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params">$log</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> service = &#123;</span><br><span class="line">          logError: logError</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> service;</span><br><span class="line"></span><br><span class="line">      <span class="comment">////////////</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@name <span class="variable">logError</span></span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@desc </span>Logs errors</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>msg Message to log</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns <span class="type">&#123;String&#125;</span></span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@memberOf </span>Factories.Logger</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> loggedMsg = <span class="string">'Error: '</span> + msg;</span><br><span class="line">          $log.error(loggedMsg);</span><br><span class="line">          <span class="keyword">return</span> loggedMsg;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="22-JS-Hint"><a href="#22-JS-Hint" class="headerlink" title="22. JS Hint"></a>22. JS Hint</h2><h3 id="使用一个Options文件"><a href="#使用一个Options文件" class="headerlink" title="使用一个Options文件"></a>使用一个Options文件</h3><ul>
<li><p>用JS Hint来分析你的JavaScript代码，确保你自定义了JS Hint选项文件并且包含在源控制里。详细信息：<a href="http://www.jshint.com/docs/" target="_blank" rel="noopener">JS Hint文档</a>。</p>
<p><em>为什么？</em>：提交代码到原版本之前先发出警告。</p>
<p><em>为什么？</em>：统一性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"bitwise"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"camelcase"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"curly"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"es3"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"forin"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"freeze"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"immed"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"indent"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"latedef"</span>: <span class="string">"nofunc"</span>,</span><br><span class="line">    <span class="string">"newcap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"noarg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"noempty"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"nonbsp"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"nonew"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"plusplus"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"quotmark"</span>: <span class="string">"single"</span>,</span><br><span class="line">    <span class="string">"undef"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"unused"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"maxparams"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"maxdepth"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"maxstatements"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">"maxcomplexity"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">"maxlen"</span>: <span class="number">120</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"asi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"boss"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"debug"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"eqnull"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"esnext"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"evil"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"expr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"funcscope"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"globalstrict"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"iterator"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lastsemic"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"laxbreak"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"laxcomma"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"loopfunc"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"maxerr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"moz"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"multistr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"notypeof"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"proto"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"scripturl"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"shadow"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"sub"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"supernew"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"validthis"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"noyield"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"globals"</span>: &#123;</span><br><span class="line">        <span class="string">"angular"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"$"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="23-JSCS"><a href="#23-JSCS" class="headerlink" title="23. JSCS"></a>23. JSCS</h2><h3 id="用一个Options文件"><a href="#用一个Options文件" class="headerlink" title="用一个Options文件"></a>用一个Options文件</h3><ul>
<li><p>使用JSCS检查代码规范，确保你的代码控制中有定制的JSCS options文件，在这里<a href="http://www.jscs.info" target="_blank" rel="noopener">JSCS docs</a>查看更多信息。</p>
<p><em>为什么？</em>：提交代码前第一时间提供一个预警。</p>
<p><em>为什么？</em>：保持团队的一致性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"excludeFiles"</span>: [<span class="string">"node_modules/**"</span>, <span class="string">"bower_components/**"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"requireCurlyBraces"</span>: [</span><br><span class="line">        <span class="string">"if"</span>,</span><br><span class="line">        <span class="string">"else"</span>,</span><br><span class="line">        <span class="string">"for"</span>,</span><br><span class="line">        <span class="string">"while"</span>,</span><br><span class="line">        <span class="string">"do"</span>,</span><br><span class="line">        <span class="string">"try"</span>,</span><br><span class="line">        <span class="string">"catch"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"requireOperatorBeforeLineBreak"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"requireCamelCaseOrUpperCaseIdentifiers"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"maximumLineLength"</span>: &#123;</span><br><span class="line">      <span class="string">"value"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="string">"allowComments"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"allowRegex"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"validateIndentation"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"validateQuoteMarks"</span>: <span class="string">"'"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"disallowMultipleLineStrings"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"disallowMixedSpacesAndTabs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"disallowTrailingWhitespace"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"disallowSpaceAfterPrefixUnaryOperators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"disallowMultipleVarDecl"</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"requireSpaceAfterKeywords"</span>: [</span><br><span class="line">      <span class="string">"if"</span>,</span><br><span class="line">      <span class="string">"else"</span>,</span><br><span class="line">      <span class="string">"for"</span>,</span><br><span class="line">      <span class="string">"while"</span>,</span><br><span class="line">      <span class="string">"do"</span>,</span><br><span class="line">      <span class="string">"switch"</span>,</span><br><span class="line">      <span class="string">"return"</span>,</span><br><span class="line">      <span class="string">"try"</span>,</span><br><span class="line">      <span class="string">"catch"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"requireSpaceBeforeBinaryOperators"</span>: [</span><br><span class="line">        <span class="string">"="</span>, <span class="string">"+="</span>, <span class="string">"-="</span>, <span class="string">"*="</span>, <span class="string">"/="</span>, <span class="string">"%="</span>, <span class="string">"&lt;&lt;="</span>, <span class="string">"&gt;&gt;="</span>, <span class="string">"&gt;&gt;&gt;="</span>,</span><br><span class="line">        <span class="string">"&amp;="</span>, <span class="string">"|="</span>, <span class="string">"^="</span>, <span class="string">"+="</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>, <span class="string">"%"</span>, <span class="string">"&lt;&lt;"</span>, <span class="string">"&gt;&gt;"</span>, <span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"&amp;"</span>,</span><br><span class="line">        <span class="string">"|"</span>, <span class="string">"^"</span>, <span class="string">"&amp;&amp;"</span>, <span class="string">"||"</span>, <span class="string">"==="</span>, <span class="string">"=="</span>, <span class="string">"&gt;="</span>,</span><br><span class="line">        <span class="string">"&lt;="</span>, <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"!="</span>, <span class="string">"!=="</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"requireSpaceAfterBinaryOperators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"requireSpacesInConditionalExpression"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"requireSpaceBeforeBlockStatements"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"requireLineFeedAtFileEnd"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"disallowSpacesInsideObjectBrackets"</span>: <span class="string">"all"</span>,</span><br><span class="line">    <span class="string">"disallowSpacesInsideArrayBrackets"</span>: <span class="string">"all"</span>,</span><br><span class="line">    <span class="string">"disallowSpacesInsideParentheses"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"validateJSDoc"</span>: &#123;</span><br><span class="line">        <span class="string">"checkParamNames"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"requireParamTypes"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"disallowMultipleLineBreaks"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"disallowCommaBeforeLineBreak"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"disallowDanglingUnderscores"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"disallowEmptyBlocks"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"disallowMultipleLineStrings"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"disallowTrailingComma"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"requireCommaBeforeLineBreak"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"requireDotNotation"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"requireMultipleVarDecl"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"requireParenthesesAroundIIFE"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="24-常量"><a href="#24-常量" class="headerlink" title="24. 常量"></a>24. 常量</h2><p>###供应全局变量</p>
<ul>
<li><p>为供应库中的全局变量创建一个Angular常量。</p>
<p><em>为什么？</em>：提供一种注入到供应库的方法，否则就是全局变量。通过让你更容易地了解你的组件之间的依赖关系来提高代码的可测试性。这还允许你模拟这些依赖关系，这是很有意义的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constants.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* global toastr:false, moment:false */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    angular</span><br><span class="line">        .module(<span class="string">'app.core'</span>)</span><br><span class="line">        .constant(<span class="string">'toastr'</span>, toastr)</span><br><span class="line">        .constant(<span class="string">'moment'</span>, moment);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于一些不需要变动，也不需要从其它service中获取的值，使用常量定义，当一些常量只是在一个模块中使用但是有可能会在其它应用中使用的话，把它们写到一个以当前的模块命名的文件中。把常量集合到一起是非常有必要的，你可以把它们写到<code>constants.js</code>的文件中。</p>
<p><em>为什么？</em>：一个可能变化的值，即使变动的很少，也会从service中重新被检索，因此你不需要修改源代码。例如，一个数据服务的url可以被放到一个常量中，但是更好的的做法是把它放到一个web service中。</p>
<p><em>为什么？</em>：常量可以被注入到任何angular组件中，包括providers。</p>
<p><em>为什么？</em>：当一个应用程序被分割成很多可以在其它应用程序中复用的小模块时，每个独立的模块都应该可以操作它自己包含的相关常量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Constants used by the entire app</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.core'</span>)</span><br><span class="line">    .constant(<span class="string">'moment'</span>, moment);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constants used only by the sales module</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.sales'</span>)</span><br><span class="line">    .constant(<span class="string">'events'</span>, &#123;</span><br><span class="line">        ORDER_CREATED: <span class="string">'event_order_created'</span>,</span><br><span class="line">        INVENTORY_DEPLETED: <span class="string">'event_inventory_depleted'</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="25-文件模板和片段"><a href="#25-文件模板和片段" class="headerlink" title="25. 文件模板和片段"></a>25. 文件模板和片段</h2><p>为了遵循一致的规范和模式，使用文件模板和片段，这里有针对一些web开发的编辑器和IDE的模板和（或）片段。</p>
<h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ul>
<li><p>Angular片段遵循这些规范。</p>
<ul>
<li>下载<a href="assets/sublime-angular-snippets?raw=true">Sublime Angular snippets</a></li>
<li>把它放到Packages文件夹中</li>
<li>重启Sublime</li>
<li>在JavaScript文件中输入下面的命令然后按下<code>TAB</code>键即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ngcontroller <span class="comment">// creates an Angular controller</span></span><br><span class="line">ngdirective  <span class="comment">// creates an Angular directive</span></span><br><span class="line">ngfactory    <span class="comment">// creates an Angular factory</span></span><br><span class="line">ngmodule     <span class="comment">// creates an Angular module</span></span><br><span class="line">ngservice    <span class="comment">// creates an Angular service</span></span><br><span class="line">ngfilter     <span class="comment">// creates an Angular filter</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h3><ul>
<li><p>Angular文件遵循<a href="http://www.sidewaffle.com" target="_blank" rel="noopener">SideWaffle</a>所介绍的规范。</p>
<ul>
<li>下载Visual Studio扩展文件<a href="http://www.sidewaffle.com" target="_blank" rel="noopener">SideWaffle</a></li>
<li>运行下载的vsix文件</li>
<li>重启Visual Studio</li>
</ul>
</li>
</ul>
<h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><ul>
<li><p>你可以把它们导入到WebStorm设置中:</p>
<ul>
<li>下载<a href="https://github.com/johnpapa/angular-styleguide/blob/master/assets/webstorm-angular-file-template.settings.jar?raw=true" target="_blank" rel="noopener">WebStorm Angular file templates and snippets</a></li>
<li>打开WebStorm点击<code>File</code>菜单</li>
<li>选择<code>Import Settings</code>菜单选项</li>
<li>选择文件点击<code>OK</code></li>
<li>在JavaScript文件中输入下面的命令然后按下<code>TAB</code>键即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ng-c <span class="comment">// creates an Angular controller</span></span><br><span class="line">ng-f <span class="comment">// creates an Angular factory</span></span><br><span class="line">ng-m <span class="comment">// creates an Angular module</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul>
<li><p>Angular片段遵循以下规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apm install angularjs-styleguide-snippets</span><br></pre></td></tr></table></figure>

<p>或</p>
<ul>
<li>打开Atom，打开包管理器(Packages -&gt; Settings View -&gt; Install Packages/Themes)</li>
<li>搜索’angularjs-styleguide-snippets’</li>
<li>点击’Install’ 进行安装</li>
</ul>
</li>
<li><p>JavaScript文件中输入以下命令后以<code>TAB</code>结束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ngcontroller <span class="comment">// creates an Angular controller</span></span><br><span class="line">ngdirective <span class="comment">// creates an Angular directive</span></span><br><span class="line">ngfactory <span class="comment">// creates an Angular factory</span></span><br><span class="line">ngmodule <span class="comment">// creates an Angular module</span></span><br><span class="line">ngservice <span class="comment">// creates an Angular service</span></span><br><span class="line">ngfilter <span class="comment">// creates an Angular filter</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a>Brackets</h3><ul>
<li><p>Angular代码片段遵循以下规范。</p>
<ul>
<li>下载<a href="assets/brackets-angular-snippets.yaml?raw=true">Brackets Angular snippets</a></li>
<li>拓展管理器( File &gt; Extension manager )</li>
<li>安装<a href="https://github.com/chuyik/brackets-snippets" target="_blank" rel="noopener">‘Brackets Snippets (by edc)’</a></li>
<li>Click the light bulb in brackets’ right gutter</li>
<li>Click <code>Settings</code> and then <code>Import</code></li>
<li>Choose the file and select to skip or override</li>
<li>Click <code>Start Import</code></li>
</ul>
</li>
<li><p>JavaScript文件中输入以下命令后以<code>TAB</code>结束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// These are full file snippets containing an IIFE</span></span><br><span class="line">ngcontroller <span class="comment">// creates an Angular controller</span></span><br><span class="line">ngdirective  <span class="comment">// creates an Angular directive</span></span><br><span class="line">ngfactory    <span class="comment">// creates an Angular factory</span></span><br><span class="line">ngapp        <span class="comment">// creates an Angular module setter</span></span><br><span class="line">ngservice    <span class="comment">// creates an Angular service</span></span><br><span class="line">ngfilter     <span class="comment">// creates an Angular filter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These are partial snippets intended to chained</span></span><br><span class="line">ngmodule     <span class="comment">// creates an Angular module getter</span></span><br><span class="line">ngstate      <span class="comment">// creates an Angular UI Router state defintion</span></span><br><span class="line">ngconfig     <span class="comment">// defines a configuration phase function</span></span><br><span class="line">ngrun        <span class="comment">// defines a run phase function</span></span><br><span class="line">ngroute      <span class="comment">// creates an Angular routeProvider</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ul>
<li><p>vim代码片段遵循以下规范。</p>
<ul>
<li>下载<a href="assets/vim-angular-snippets?raw=true">vim Angular代码段</a></li>
<li>设置<a href="https://github.com/Shougo/neosnippet.vim" target="_blank" rel="noopener">neosnippet.vim</a></li>
<li>粘贴到snippet路径下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ngcontroller <span class="comment">// creates an Angular controller</span></span><br><span class="line">ngdirective  <span class="comment">// creates an Angular directive</span></span><br><span class="line">ngfactory    <span class="comment">// creates an Angular factory</span></span><br><span class="line">ngmodule     <span class="comment">// creates an Angular module</span></span><br><span class="line">ngservice    <span class="comment">// creates an Angular service</span></span><br><span class="line">ngfilter     <span class="comment">// creates an Angular filter</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="26-Yeoman-Generator"><a href="#26-Yeoman-Generator" class="headerlink" title="26. Yeoman Generator"></a>26. Yeoman Generator</h2><p>你可以使用<a href="http://jpapa.me/yohottowel" target="_blank" rel="noopener">HotTowel yeoman generator</a>来创建一个遵循本规范的Angular入门应用。</p>
<ol>
<li><p>安装generator-hottowel</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g generator-hottowel</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的文件夹并定位到它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行生成器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yo hottowel helloWorld</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="27-路由"><a href="#27-路由" class="headerlink" title="27. 路由"></a>27. 路由</h2><p>客户端路由对于在视图和很多小模板和指令组成的构成视图中创建导航是非常重要的。</p>
<ul>
<li><p>用<a href="http://angular-ui.github.io/ui-router/" target="_blank" rel="noopener">AngularUI Router</a>来做路由控制。</p>
<p><em>为什么？</em>：它包含了Angular路由的所有特性，并且增加了一些额外的特性，如嵌套路由和状态。</p>
<p><em>为什么？</em>：语法和Angular路由很像，很容易迁移到UI Router。</p>
</li>
<li><p>注意：你可以在运行期间使用<code>routerHelperProvider</code>配置跨文件状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// customers.routes.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app.customers'</span>)</span><br><span class="line">    .run(appRun);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @ngInject */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appRun</span>(<span class="params">routerHelper</span>) </span>&#123;</span><br><span class="line">    routerHelper.configureStates(getStates());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            state: <span class="string">'customer'</span>,</span><br><span class="line">            config: &#123;</span><br><span class="line">                abstract: <span class="literal">true</span>,</span><br><span class="line">                template: <span class="string">'&lt;ui-view class="shuffle-animation"/&gt;'</span>,</span><br><span class="line">                url: <span class="string">'/customer'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routerHelperProvider.js</span></span><br><span class="line">angular</span><br><span class="line">    .module(<span class="string">'blocks.router'</span>)</span><br><span class="line">    .provider(<span class="string">'routerHelper'</span>, routerHelperProvider);</span><br><span class="line"></span><br><span class="line">routerHelperProvider.$inject = [<span class="string">'$locationProvider'</span>, <span class="string">'$stateProvider'</span>, <span class="string">'$urlRouterProvider'</span>];</span><br><span class="line"><span class="comment">/* @ngInject */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routerHelperProvider</span>(<span class="params">$locationProvider, $stateProvider, $urlRouterProvider</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* jshint validthis:true */</span></span><br><span class="line">    <span class="keyword">this</span>.$<span class="keyword">get</span> = RouterHelper;</span><br><span class="line"></span><br><span class="line">    $locationProvider.html5Mode(true);</span><br><span class="line"></span><br><span class="line">    RouterHelper.$inject = ['$state'];</span><br><span class="line">    /* @ngInject */</span><br><span class="line">    function RouterHelper($state) &#123;</span><br><span class="line">        <span class="keyword">var</span> hasOtherwise = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> service = &#123;</span><br><span class="line">            configureStates: configureStates,</span><br><span class="line">            getStates: getStates</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">configureStates</span>(<span class="params">states, otherwisePath</span>) </span>&#123;</span><br><span class="line">            states.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">                $stateProvider.state(state.state, state.config);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (otherwisePath &amp;&amp; !hasOtherwise) &#123;</span><br><span class="line">                hasOtherwise = <span class="literal">true</span>;</span><br><span class="line">                $urlRouterProvider.otherwise(otherwisePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStates</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> $state.get(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Define routes for views in the module where they exist，Each module should contain the routes for the views in the module.</p>
<p><em>为什么？</em>：每个模块应该是独立的。</p>
<p><em>为什么？</em>：当删除或增加一个模块时，应用程序只包含指向现存视图的路由。（也就是说删除模块和增加模块都需更新路由）</p>
<p><em>为什么？</em>：这使得可以在不关心孤立的路由时很方便地启用或禁用应用程序的某些部分。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="28-任务自动化"><a href="#28-任务自动化" class="headerlink" title="28. 任务自动化"></a>28. 任务自动化</h2><p>用<a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp</a>或者<a href="http://gruntjs.com" target="_blank" rel="noopener">Grunt</a>来创建自动化任务。Gulp偏向于代码优先原则(code over configuration)而Grunt更倾向于配置优先原则(configuration over code)。我更倾向于使用gulp，因为gulp写起来比较简单。</p>
<blockquote>
<p>可以在我的<a href="http://jpapa.me/gulpps" target="_blank" rel="noopener">Gulp Pluralsight course</a>了解更多gulp和自动化任务的信息</p>
</blockquote>
<ul>
<li><p>用任务自动化在其它JavaScript文件之前列出所有模块的定义文件<code>*.module.js</code>。</p>
<p><em>为什么？</em>：Angular中，模块使用之前必须先注册。</p>
<p><em>为什么？*：带有特殊规则的模块命名，例如`</em>.module.js`，会让你很轻松地识别它们。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clientApp = <span class="string">'./src/client/app/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always grab module files first</span></span><br><span class="line"><span class="keyword">var</span> files = [</span><br><span class="line">  clientApp + <span class="string">'**/*.module.js'</span>,</span><br><span class="line">  clientApp + <span class="string">'**/*.js'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="29-Filters"><a href="#29-Filters" class="headerlink" title="29. Filters"></a>29. Filters</h2><ul>
<li><p>避免使用filters扫描一个复杂对象的所有属性，应该用filters来筛选选择的属性。</p>
<p><em>为什么？</em>：不恰当的使用会造成滥用并且会带来糟糕的性能问题，例如对一个复杂的对象使用过滤器。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="30-Angular文档"><a href="#30-Angular文档" class="headerlink" title="30. Angular文档"></a>30. Angular文档</h2><p><a href="//docs.angularjs.org/api">Angular文档</a>。</p>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<blockquote>
<p>reference: <a href="https://github.com/johnpapa/angular-styleguide/blob/master/a1/i18n/zh-CN.md" target="_blank" rel="noopener">https://github.com/johnpapa/angular-styleguide/blob/master/a1/i18n/zh-CN.md</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Angular规范</tag>
        <tag>规范指南</tag>
      </tags>
  </entry>
</search>
